{"version":3,"file":"components-experimental-TextField-docs-TextField-stories.120cc786.iframe.bundle.js","mappings":";;;;;AAyBA;;;;;;;;;;;;;AAaA;;;;;;AAQA;;;;AAIA;AAGA;;AAiBA;;;;;;;;;;;;;;;;;;;ACtDA;AACA;;;ACVA;;;AAGA;AACA;AACA;;AAIA;;;;AAIA;AACA;;;AAGA;AACA;;AAEA;;;AAGA;;;AAGA;;AAEA;AACA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;;;AAGA;;;;;;;;;;ACpCA;AACA;;AAEA;;;AAGA;;AAIA;AACA;;;;;;;AASA;AACA;;;AAGA;AAGA;;AAEA;;ACvCA;;AAEA;;AAEA;;;;;;;AAOA;;;;ACZA;;;;;;;;ACIA;AAGA;;;;;AAKA;;;AAGA;;;;;AAKA;;;AAGA;;;ACvBA;;;;;AAKA;;;;;;;;AC0DA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/TextField/TextField.tsx","webpack://@freenow/wave/./src/components/experimental/Field/Button.ts","webpack://@freenow/wave/./src/components/experimental/Field/FakeInput.ts","webpack://@freenow/wave/./src/components/experimental/Field/Field.ts","webpack://@freenow/wave/./src/components/experimental/Field/Footer.ts","webpack://@freenow/wave/./src/components/experimental/Field/InnerWrapper.ts","webpack://@freenow/wave/./src/components/experimental/Field/Label.ts","webpack://@freenow/wave/./src/components/experimental/Field/Wrapper.ts","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import React from 'react';\nimport { FieldError, TextField as BaseTextField, TextFieldProps as BaseTextFieldProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport XCrossCircleIcon from '../../../icons/actions/XCrossCircleIcon';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { VisuallyHidden } from '../../VisuallyHidden/VisuallyHidden';\nimport { Button } from '../Field/Button';\nimport { Label } from '../Field/Label';\nimport { TextArea, Input, fieldTextStyles } from '../Field/Field';\nimport { FakeInput } from '../Field/FakeInput';\nimport { Footer } from '../Field/Footer';\nimport { InnerWrapper } from '../Field/InnerWrapper';\nimport { Wrapper } from '../Field/Wrapper';\nimport { FieldProps } from '../Field/Props';\n\nconst defaultAriaStrings = {\n    clearFieldButton: 'Clear field',\n    messageFieldIsCleared: 'The field is cleared'\n};\n\nconst AutoResizingInnerWrapper = styled(InnerWrapper)`\n    display: grid;\n\n    &::after {\n        /* Styling should be the same */\n        ${fieldTextStyles};\n\n        /* Note the weird space! Needed to prevent jumpy behavior */\n        content: attr(data-replicated-value) ' ';\n\n        /* This is how textarea text behaves */\n        white-space: pre-wrap;\n\n        /* Hidden from view, clicks, and screen readers */\n        visibility: hidden;\n    }\n\n    &::after,\n    ${TextArea} {\n        overflow: hidden;\n\n        /* Place on top of each other */\n        grid-area: 1 / 1 / 2 / 2;\n    }\n`;\n\nconst BottomLine = styled(Footer)`\n    display: grid;\n    grid-template-areas: '. counter';\n    justify-content: space-between;\n    gap: ${get('space.2')};\n`;\n\nconst Counter = styled.span`\n    grid-area: counter;\n`;\n\ninterface TextFieldProps extends FieldProps, BaseTextFieldProps {\n    placeholder?: string;\n    multiline?: boolean;\n    /**\n     * If your project supports multiple languages,\n     * it is recommended to pass translated labels to these properties\n     */\n    ariaStrings?: {\n        clearFieldButton: string;\n        messageFieldIsCleared: string;\n    };\n}\n\nconst TextField = React.forwardRef<HTMLDivElement, TextFieldProps>(\n    (\n        {\n            label,\n            description,\n            errorMessage,\n            placeholder,\n            leadingIcon,\n            actionIcon,\n            multiline = false,\n            ariaStrings = defaultAriaStrings,\n            isVisuallyFocused = false,\n            ...props\n        },\n        forwardedRef\n    ) => {\n        const [text, setText] = React.useState(props.defaultValue || props.value || '');\n        const inputRef = React.useRef<HTMLInputElement | HTMLTextAreaElement>(null);\n\n        React.useEffect(() => {\n            if (props.value !== undefined) {\n                setText(props.value);\n            }\n        }, [props.value]);\n\n        const handleChange = (value: string) => {\n            setText(value);\n            props.onChange?.(value);\n        };\n\n        const clearField =\n            text.length > 0 ? (\n                <Button\n                    aria-controls={inputRef.current?.id}\n                    aria-label={ariaStrings.clearFieldButton}\n                    onPress={() => {\n                        inputRef.current.value = '';\n                        handleChange('');\n                    }}\n                >\n                    <XCrossCircleIcon />\n                </Button>\n            ) : (\n                <VisuallyHidden aria-live=\"polite\">{ariaStrings.messageFieldIsCleared}</VisuallyHidden>\n            );\n\n        const flyingLabel = <Label $flying={Boolean(placeholder || text.length > 0)}>{label}</Label>;\n\n        return (\n            <Wrapper>\n                <BaseTextField {...props} ref={forwardedRef} value={text} onChange={handleChange}>\n                    {({ isInvalid }) => (\n                        <>\n                            <FakeInput $isVisuallyFocused={isVisuallyFocused} onClick={() => inputRef.current?.focus()}>\n                                {leadingIcon}\n                                {multiline ? (\n                                    <AutoResizingInnerWrapper data-replicated-value={text}>\n                                        {flyingLabel}\n                                        <TextArea\n                                            placeholder={placeholder}\n                                            ref={inputRef as React.RefObject<HTMLTextAreaElement>}\n                                        />\n                                    </AutoResizingInnerWrapper>\n                                ) : (\n                                    <InnerWrapper>\n                                        {flyingLabel}\n                                        <Input\n                                            placeholder={placeholder}\n                                            ref={inputRef as React.RefObject<HTMLInputElement>}\n                                        />\n                                    </InnerWrapper>\n                                )}\n                                {actionIcon === undefined ? clearField : actionIcon}\n                            </FakeInput>\n                            <BottomLine>\n                                {isInvalid ? <FieldError>{errorMessage}</FieldError> : description}\n                                {Boolean(props.maxLength) && <Counter>{`${text.length} / ${props.maxLength}`}</Counter>}\n                            </BottomLine>\n                        </>\n                    )}\n                </BaseTextField>\n            </Wrapper>\n        );\n    }\n);\n\nexport { TextField, TextFieldProps };\n","import styled from 'styled-components';\nimport { Button as BaseButton } from 'react-aria-components';\nimport { getSemanticValue } from '../../../essentials/experimental/cssVariables';\nimport { get } from '../../../utils/experimental/themeGet';\n\nexport const Button = styled(BaseButton)`\n    appearance: none;\n    background: none;\n    border: none;\n    display: flex;\n    margin: 0;\n    padding: 0;\n    cursor: pointer;\n    outline: 0;\n\n    &[data-focused] {\n        outline: ${getSemanticValue('interactive')} solid 0.125rem;\n        border-radius: ${get('radii.2')};\n    }\n`;\n","import styled, { css } from 'styled-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { flyingLabelStyles, Label } from './Label';\nimport { InnerWrapper } from './InnerWrapper';\n\nconst focusStyles = css`\n    outline: ${getSemanticValue('interactive')} solid 0.125rem;\n    outline-offset: -0.125rem;\n\n    ${Label} {\n        color: ${getSemanticValue('interactive')};\n        ${flyingLabelStyles}\n    }\n`;\n\nexport const FakeInput = styled.div<{ $isVisuallyFocused: boolean }>`\n    box-sizing: content-box;\n    cursor: text;\n\n    color: ${getSemanticValue('on-surface-variant')};\n    background-color: ${getSemanticValue('surface')};\n    border-width: 0.0625rem;\n    border-style: solid;\n    border-color: ${getSemanticValue('outline-variant')};\n    border-radius: ${get('radii.4')};\n\n    padding: ${get('space.2')} ${get('space.3')} ${get('space.2')} ${get('space.4')};\n    display: flex;\n    align-items: start;\n    gap: ${get('space.3')};\n\n    /* stylelint-disable selector-type-case, selector-type-no-unknown */\n    & > :not(${InnerWrapper}) {\n        flex-shrink: 0;\n        margin-top: ${get('space.2')};\n        color: ${getSemanticValue('on-surface-variant')};\n    }\n\n    &:hover {\n        border-color: ${getSemanticValue('outline')};\n        color: ${getSemanticValue('on-surface')};\n    }\n\n    &:focus-within {\n        ${focusStyles}\n    }\n\n    [data-invalid] & {\n        border-color: ${getSemanticValue('negative')};\n    }\n\n    ${props => props.$isVisuallyFocused && focusStyles}\n`;\n","import styled, { css } from 'styled-components';\nimport { DateInput as BaseDateInput, Input as BaseInput, TextArea as BaseTextArea } from 'react-aria-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { textStyles } from '../Text/Text';\n\nexport const fieldTextStyles = textStyles.variants.body1;\n\nexport const fieldStyles = css`\n    border: none;\n    background-color: unset;\n    outline: none;\n\n    display: block;\n    width: 100%;\n    padding: 0;\n\n    caret-color: ${getSemanticValue('interactive')};\n    color: ${getSemanticValue('on-surface')};\n\n    ${fieldTextStyles}\n\n    [data-placeholder] {\n        color: ${getSemanticValue('on-surface-variant')};\n    }\n`;\n\nexport const Input = styled(BaseInput)`\n    ${fieldStyles}\n\n    &[type='search'] {\n        &::-webkit-search-cancel-button {\n            display: none;\n        }\n    }\n`;\n\nexport const TextArea = styled(BaseTextArea).attrs({ rows: 1 })`\n    ${fieldStyles};\n\n    resize: none;\n    min-height: ${fieldTextStyles.lineHeight};\n`;\n\nexport const DateInput = styled(BaseDateInput)`\n    display: flex;\n    ${fieldTextStyles}\n`;\n","import styled from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { textStyles } from '../Text/Text';\n\nexport const Footer = styled.footer`\n    padding: ${get('space.1')} ${get('space.3')} ${get('space.0')};\n\n    color: ${getSemanticValue('on-surface-variant')};\n\n    ${textStyles.variants.label2}\n\n    &:empty {\n        display: none;\n    }\n\n    [data-invalid] & {\n        color: ${getSemanticValue('negative')};\n    }\n`;\n","import styled from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\n\nexport const InnerWrapper = styled.div`\n    width: 100%;\n    padding-top: ${get('space.4')};\n\n    position: relative;\n    overflow: hidden;\n`;\n","import { Label as BaseLabel } from 'react-aria-components';\nimport styled, { css } from 'styled-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { textStyles } from '../Text/Text';\n\nexport const flyingLabelStyles = css`\n    top: 0;\n    transform: translate3d(0, 0, 0);\n\n    ${textStyles.variants.label2}\n`;\n\nexport const Label = styled(BaseLabel)<{ $flying: boolean }>`\n    position: absolute;\n    top: 50%;\n    color: currentColor;\n\n    ${textStyles.variants.body1}\n    white-space: nowrap;\n\n    transform: translate3d(0, calc(-${textStyles.variants.body1.lineHeight} / 2), 0);\n    transform-origin: 0;\n\n    transition: top 200ms ease, font-size 200ms ease, transform 200ms ease;\n\n    ${props => props.$flying && flyingLabelStyles}\n\n    [data-invalid] & {\n        color: ${getSemanticValue('negative')};\n    }\n`;\n","import styled from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { FakeInput } from './FakeInput';\n\nexport const Wrapper = styled.div`\n    padding: ${get('space.2')} 0;\n\n    &:has([data-disabled]) {\n        opacity: 0.38;\n\n        ${FakeInput} {\n            pointer-events: none;\n        }\n    }\n`;\n","import { Text as BaseText, TextProps as BaseTextProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../../essentials/experimental';\n\ninterface TextProps extends BaseTextProps {\n    variant?: ResponsiveValue<'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2'>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst Text = styled(BaseText)<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(variant(textStyles))}\n`;\n\nText.defaultProps = {\n    variant: 'body1'\n};\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}