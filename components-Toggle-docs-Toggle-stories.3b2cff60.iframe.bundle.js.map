{"version":3,"file":"components-Toggle-docs-Toggle-stories.3b2cff60.iframe.bundle.js","mappings":";;;;AAwBA;AACA;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;AAtCA;;;;;;;;;ACWA;;;;AAIA;;;;;;ACRA;;;;;AAKA;;;;ACeA;ACcA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Toggle/Slide.tsx","webpack://@freenow/wave/./src/components/Toggle/Input.tsx","webpack://@freenow/wave/./src/components/Toggle/Label.tsx","webpack://@freenow/wave/./src/components/Toggle/Toggle.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\nconst determineBackground = (props: SlideProps) => {\n    if (props.disabled) {\n        return getSemanticValue('background-element-disabled-faded');\n    }\n\n    if (props.error) {\n        return getSemanticValue('background-element-danger-default');\n    }\n\n    return getSemanticValue('background-element-accent-emphasized');\n};\n\ninterface SlideProps {\n    disabled?: boolean;\n    error?: boolean;\n}\n\nconst Slide = styled.div<SlideProps>`\n    width: 2.25rem;\n    height: 1rem;\n\n    cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n    background: ${props =>\n        // background-element-disabled-default is used for en enabled state\n        // because this is the only time this pair of colors used for a background of an enabled element\n        // create a new semantic token when another such use case appear\n        getSemanticValue(props.disabled ? 'background-element-disabled-faded' : 'background-element-disabled-default')};\n    display: inline-block;\n    border-radius: 0.5rem;\n    position: relative;\n\n    &::before {\n        content: '';\n        position: absolute;\n        top: -0.125rem;\n        left: 0;\n        width: 1.25rem;\n        height: 1.25rem;\n        background: ${props =>\n            getSemanticValue(\n                props.disabled ? 'background-element-disabled-faded' : 'background-element-neutral-default'\n            )};\n        border-radius: 50%;\n        box-shadow: 0 0 0.0625rem 0 rgba(0, 0, 0, 0.05), 0 0.0625rem 0.1875rem 0 rgba(0, 0, 0, 0.4);\n        transform: translateX(0);\n        transition: transform 200ms;\n    }\n\n    &::after {\n        content: '';\n        display: block;\n        border-radius: 0.5rem;\n        width: 1rem;\n        height: 1rem;\n        background-color: ${determineBackground};\n        transition: width 200ms;\n    }\n`;\n\nexport { Slide };\n","import styled from 'styled-components';\nimport { Slide } from './Slide';\n\ninterface InputProps {\n    disabled?: boolean;\n    error?: boolean;\n}\n\nconst Input = styled.input<InputProps>`\n    height: 0;\n    width: 0;\n    margin: 0;\n    visibility: hidden;\n\n    &:checked + ${/* sc-selector */ Slide}::before {\n        transform: translateX(calc(100% - 0.25rem));\n    }\n\n    &:checked + ${/* sc-selector */ Slide}::after {\n        width: 2.25rem;\n    }\n`;\n\nexport { Input };\n","import styled from 'styled-components';\nimport { margin, MarginProps } from 'styled-system';\n\ninterface LabelProps extends MarginProps {\n    disabled?: boolean;\n}\n\nconst Label = styled.label<LabelProps>`\n    display: flex;\n    align-items: center;\n    cursor: ${props => (props.disabled ? 'not-allowed' : 'pointer')};\n    user-select: none;\n\n    gap: 0.5rem;\n\n    ${margin}\n`;\n\nexport { Label };\n","import React, { ComponentPropsWithoutRef, FC, ReactNode, Ref } from 'react';\nimport styled from 'styled-components';\nimport { MarginProps } from 'styled-system';\n\nimport { ClassNameProps, extractClassNameProps, extractWrapperMarginProps } from '../../utils/extractProps';\nimport { Text } from '../Text/Text';\nimport { Input } from './Input';\nimport { Label } from './Label';\nimport { Slide } from './Slide';\n\ntype ToggleHtmlInputProps = ComponentPropsWithoutRef<'input'> & {\n    ref?: Ref<HTMLInputElement>;\n};\n\ninterface ToggleProps extends ToggleHtmlInputProps, ClassNameProps, MarginProps {\n    /**\n     * Provide a label for the input which will be shown next to the toggle\n     */\n    label?: ReactNode;\n    /**\n     * Add styles to show the toggle has errors\n     */\n    error?: boolean;\n}\n\nconst SlideWrapper = styled.span`\n    display: inline-flex;\n    align-items: center;\n`;\n\nconst Toggle: FC<ToggleProps> = props => {\n    const { classNameProps, restProps: withoutClassName } = extractClassNameProps(props);\n    const { marginProps, restProps } = extractWrapperMarginProps(withoutClassName);\n    const { disabled, error, label, ...rest } = restProps;\n    let dynamicLabel: ReactNode = label;\n\n    if (typeof label === 'string') {\n        dynamicLabel = <Text>{label}</Text>;\n    }\n\n    return (\n        <Label disabled={disabled} {...classNameProps} {...marginProps}>\n            <SlideWrapper>\n                <Input disabled={disabled} error={error} {...rest} type=\"checkbox\" />\n                <Slide disabled={disabled} error={error} />\n            </SlideWrapper>\n            {dynamicLabel}\n        </Label>\n    );\n};\n\nexport { Toggle, ToggleProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}