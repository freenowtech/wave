{"version":3,"file":"components-Search-docs-Search-stories.628b6457.iframe.bundle.js","mappings":";;AAmBA;;;;AAIA;AACA;;;AAKA;;AAEA;;AAQA;;AAEA;;AAEA;AACA;AACA;;AAIA;;;;AAIA;;;;;AAKA;;;;;;;;;;;;;;;;;AA6DA;AC3EA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Search/Search.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import { FC } from 'react';\nimport * as React from 'react';\n\nimport styled from 'styled-components';\nimport { Elevation } from '../../essentials';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { XCrossIcon, MagnifierIcon } from '../../icons';\nimport { useControlledState } from '../../utils/hooks/useControlledState';\nimport { Box, BoxProps } from '../Box/Box';\n\nimport { Input, type InputProps } from '../Input/Input';\n\nconst ActiveStyle = `\n    background-color: ${getSemanticValue('background-element-info-default')};\n    color: ${getSemanticValue('foreground-info-faded')};\n`;\n\nconst SearchResultsContainer = styled(Box)`\n    position: absolute;\n    z-index: ${Elevation.SUGGESTIONS_LIST};\n    margin-top: 0.0625rem;\n    padding: 0.25rem 0;\n    width: inherit;\n    background-color: ${getSemanticValue('background-page-elevation-1')};\n    box-shadow: 0 0.125rem 0.5rem 0.0625rem ${getSemanticValue('shadow-default')};\n    border-radius: 0.25rem;\n    cursor: pointer;\n`;\n\nconst ActiveBox = styled(Box)`\n    &[aria-selected='true'] > div {\n        ${ActiveStyle}\n    }\n`;\n\ninterface SearchInputContainerProps extends BoxProps {\n    isInFocus: boolean;\n}\n\nconst SearchInputContainer = styled(Box)<SearchInputContainerProps>`\n    box-sizing: border-box;\n    background: ${getSemanticValue('background-page-default')};\n    border-radius: 0.25rem;\n    border: ${p => `0.0625rem solid ${getSemanticValue(p.isInFocus ? 'border-focus' : 'border-neutral-default')}`};\n    box-shadow: ${p => (p.isInFocus ? `inset 0 0 0 0.0625rem ${getSemanticValue('border-focus')}` : 'none')};\n    height: ${p => (p.size === 'small' ? '2.2rem' : '3.2rem')};\n    transition: box-shadow 100ms ease, border 100ms ease;\n`;\n\nconst StyledInput = styled(Input)`\n    width: 100%;\n\n    input {\n        caret-color: ${getSemanticValue('foreground-info-faded')};\n        background: transparent;\n        border: 0;\n\n        &::placeholder {\n            color: ${p => getSemanticValue(p.disabled ? 'foreground-disabled' : 'foreground-neutral-default')};\n            opacity: 1;\n        }\n\n        &:focus,\n        &:active {\n            outline: 0;\n            border: 0;\n            box-shadow: unset;\n        }\n\n        text-overflow: ellipsis;\n\n        ::-webkit-search-cancel-button {\n            display: none;\n        }\n    }\n`;\n\nexport interface SearchProps extends Omit<InputProps, 'results'> {\n    results?: React.ReactNode[];\n    /**\n     * Sets the value\n     */\n    value?: string;\n    /**\n     * Function to set the value\n     */\n    setValue?: (value: string) => void;\n    /**\n     * show results dropdown\n     */\n    showResults?: boolean;\n    /**\n     * Function to show and hide the dropdown\n     */\n    setShowResults?: (value: boolean) => void;\n    /**\n     * Sets the width of the search box\n     */\n    width?: string;\n    /**\n     * This function is called when the \"Enter\" key is pressed or the search icon is clicked\n     */\n    onEnter?: (value: string) => void;\n    /**\n     * This function is called when the selection is changed. It emits the selected index\n     */\n    onChangeSelection?: (index: number) => void;\n    /**\n     * This function is called when the value in the search box changes\n     */\n    onInputChange?: (value: string) => void;\n    /**\n     * This function is called when the search box is cleared\n     */\n    onClear?: () => void;\n}\n\nconst prefix = 'result-item';\n\nexport const Search: FC<SearchProps> = ({\n    results = [],\n    value: propsValue,\n    setValue: setPropsValue,\n    showResults: propsShowResults,\n    setShowResults: setPropsShowResults,\n    width,\n    placeholder = 'Search...',\n    disabled,\n    size,\n    onInputChange,\n    onClear,\n    onEnter,\n    onChangeSelection,\n    ...props\n}: SearchProps) => {\n    const containerRef = React.useRef<HTMLDivElement>(null);\n\n    const [isInFocus, setIsInFocus] = React.useState<boolean>(false);\n\n    const [activeIndex, setActiveIndex] = React.useState<number>(0);\n\n    const [value, setValue] = useControlledState<string>([propsValue, setPropsValue], '');\n\n    const [showResults, setShowResults] = useControlledState<boolean>([propsShowResults, setPropsShowResults], false);\n\n    // this is to keep track of keypress events (up, down, enter, escape)\n    React.useEffect(() => {\n        // we're trying to calculate how many search result options will be rendered, to enable moving up and down through them\n        // if we specify customResultLength, that will be taken.\n        // if not, we'll check if children is an array, and if so take its length\n        // if not just assume there is only one child\n        const elementLength: number = Array.isArray(results) ? results.length : 1;\n\n        // emits onChangeSelection on ArrowDown and ArrowUp, onEnter on Enter, onBlur on Escape\n        const emitKeyEvent = ({ key }: KeyboardEvent) => {\n            if (!isInFocus) return;\n            switch (key) {\n                case 'ArrowUp': {\n                    const index = activeIndex > 0 ? (activeIndex - 1) % elementLength : elementLength - 1;\n                    setActiveIndex(index);\n                    onChangeSelection?.(index);\n                    break;\n                }\n\n                case 'ArrowDown': {\n                    const index = (activeIndex + 1) % elementLength;\n                    setActiveIndex(index);\n                    onChangeSelection?.(index);\n                    break;\n                }\n\n                case 'Enter': {\n                    const el = document.querySelector(`#${prefix}-${activeIndex}`);\n                    (el?.children[0] as HTMLElement)?.click();\n                    onEnter?.(value);\n                    break;\n                }\n\n                case 'Escape':\n                    setShowResults(false);\n                    break;\n\n                default:\n                    break;\n            }\n        };\n        document.addEventListener('keydown', emitKeyEvent);\n        return () => {\n            document.removeEventListener('keydown', emitKeyEvent);\n        };\n    }, [isInFocus, activeIndex, setActiveIndex, onChangeSelection, onEnter, value, propsValue, results]);\n\n    // this is to keep track of clicks outside the component (useful to close the search results)\n    React.useEffect(() => {\n        // eslint-disable-next-line unicorn/consistent-function-scoping\n        const emitIfClickingOutsideSearch = (event: DocumentEventMap['click']) => {\n            if (disabled) return;\n            if (!containerRef.current.contains(event.target as Element)) {\n                setShowResults(false);\n            } else {\n                setShowResults(true);\n            }\n        };\n        document.addEventListener('click', emitIfClickingOutsideSearch);\n        return () => {\n            document.removeEventListener('click', emitIfClickingOutsideSearch);\n        };\n    }, [showResults, setShowResults, disabled]);\n\n    const handleChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setShowResults(true);\n        const searchText: string = event.target.value;\n        setValue?.(searchText);\n        onInputChange?.(searchText);\n    };\n\n    return (\n        // this is a div to make attaching the ref a walk in the park :)\n        <div\n            ref={containerRef}\n            // give it the width passed down to it\n            style={{\n                width\n            }}\n            role=\"search\"\n        >\n            <SearchInputContainer\n                isInFocus={isInFocus}\n                display=\"flex\"\n                flexDirection=\"row\"\n                alignItems=\"center\"\n                width=\"100%\"\n                size={size}\n            >\n                <Box\n                    // passing styled-system props gives \"No overload matches this call\" lint error.\n                    style={{\n                        display: 'flex',\n                        margin: size === 'small' ? '0.5rem' : '1rem',\n                        marginRight: 'auto'\n                    }}\n                    onClick={() => !disabled && onEnter?.(value)}\n                >\n                    <MagnifierIcon\n                        size={size === 'small' ? 20 : 24}\n                        aria-hidden=\"true\"\n                        color={getSemanticValue(disabled ? 'foreground-disabled' : 'foreground-neutral-default')}\n                    />\n                </Box>\n\n                <StyledInput\n                    size={size}\n                    type=\"search\"\n                    disabled={disabled}\n                    aria-label={placeholder}\n                    autoComplete=\"off\"\n                    placeholder={placeholder}\n                    value={value}\n                    onChange={handleChangeValue}\n                    onFocus={() => setIsInFocus(true)}\n                    onBlur={() => setIsInFocus(false)}\n                    {...props}\n                />\n\n                {!value ? undefined : (\n                    <Box\n                        aria-label=\"clear-search\"\n                        style={{ margin: '1rem', marginLeft: 'auto', cursor: 'pointer', display: 'flex' }}\n                        onClick={() => {\n                            setValue?.('');\n                            onClear?.();\n                        }}\n                        role=\"button\"\n                    >\n                        <XCrossIcon aria-hidden=\"true\" color={getSemanticValue('foreground-neutral-default')} />\n                    </Box>\n                )}\n            </SearchInputContainer>\n\n            {showResults && results.length > 0 && (\n                <SearchResultsContainer role=\"listbox\">\n                    {results.map((result, index) => (\n                        <ActiveBox\n                            role=\"option\"\n                            id={`${prefix}-${index}`}\n                            key={\n                                // eslint-disable-next-line react/no-array-index-key\n                                index\n                            }\n                            onMouseEnter={() => setActiveIndex(index)}\n                            onMouseMove={() => setActiveIndex(index)}\n                            aria-selected={activeIndex === index}\n                        >\n                            {result}\n                        </ActiveBox>\n                    ))}\n                </SearchResultsContainer>\n            )}\n        </div>\n    );\n};\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}