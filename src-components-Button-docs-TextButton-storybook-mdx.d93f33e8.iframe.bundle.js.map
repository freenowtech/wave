{"version":3,"file":"src-components-Button-docs-TextButton-storybook-mdx.d93f33e8.iframe.bundle.js","mappings":";;;AAoCA;;;;AAIA;AACA;;;;;;;;;;;;;AAaA;;;;ACFA;AAGA;;AC5CA;;;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;AAIA;;ACcA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Button/BaseButton.tsx","webpack://@freenow/wave/./src/components/Button/TextButton.tsx","webpack://@freenow/wave/./src/components/Link/Link.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant, width, WidthProps } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface BaseButtonProps extends ComponentPropsWithoutRef<'button'>, MarginProps, WidthProps {\n    /**\n     * Adjusts the size of the button\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            minWidth: '5rem',\n            padding: '0 0.75rem'\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            minWidth: '6.25rem',\n            padding: '0 1rem'\n        }\n    }\n});\n\n// \"svg path\" fill set to \"inherit\" to being able to transition using button variants\nconst BaseButton = styled.button.attrs({ theme })<BaseButtonProps>`\n    align-items: center;\n    background: transparent;\n    border-radius: ${get('radii.2')};\n    border: 0.0625rem solid transparent;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.semibold')};\n    justify-content: center;\n    text-align: center;\n    text-decoration: none;\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    svg path {\n        fill: inherit;\n    }\n\n    ${compose(margin, sizeVariant, width)}\n`;\n\nexport { BaseButton, BaseButtonProps };\n","import styled from 'styled-components';\nimport { ResponsiveValue, variant } from 'styled-system';\n\nimport { BaseButton, BaseButtonProps } from './BaseButton';\nimport { ComponentSemanticTokens } from '../../essentials/Colors/types';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ntype Variant = 'default' | 'danger';\n\ninterface TextButtonProps extends BaseButtonProps {\n    /**\n     * Define base colors\n     */\n    variant?: ResponsiveValue<Variant>;\n}\n\nconst variantStyles = variant<ComponentSemanticTokens, Variant>({\n    variants: {\n        default: {\n            color: getSemanticValue('foreground-accent-default'),\n            fill: getSemanticValue('foreground-accent-default'),\n\n            '&:hover': {\n                color: getSemanticValue('foreground-accent-emphasized'),\n                fill: getSemanticValue('foreground-accent-emphasized')\n            },\n\n            '&:disabled': {\n                color: getSemanticValue('foreground-disabled'),\n                fill: getSemanticValue('foreground-disabled')\n            }\n        },\n        danger: {\n            color: getSemanticValue('foreground-danger-default'),\n            fill: getSemanticValue('foreground-danger-default'),\n\n            '&:hover': {\n                color: getSemanticValue('foreground-danger-emphasized'),\n                fill: getSemanticValue('foreground-danger-emphasized')\n            },\n\n            '&:disabled': {\n                color: getSemanticValue('foreground-disabled'),\n                fill: getSemanticValue('foreground-disabled')\n            }\n        }\n    }\n});\n\nconst TextButton = styled(BaseButton)<TextButtonProps>`\n    transition: color 200ms, fill 200ms;\n\n    ${variantStyles};\n`;\n\nTextButton.defaultProps = {\n    size: 'medium',\n    variant: 'default'\n};\n\nexport { TextButton, TextButtonProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, fontSize, FontSizeProps, margin, MarginProps, textAlign, TextAlignProps } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'>, MarginProps, FontSizeProps, TextAlignProps {}\n\nconst Link = styled.a.attrs({ theme })<LinkProps>`\n    display: inline-block;\n    color: ${getSemanticValue('foreground-accent-default')};\n    cursor: pointer;\n    line-height: 1.4;\n    font-family: ${get('fonts.normal')};\n    font-size: ${get('fontSizes.2')};\n    font-weight: ${get('fontWeights.semibold')};\n    text-decoration: none;\n\n    &:link,\n    &:visited {\n        color: ${getSemanticValue('foreground-accent-default')};\n    }\n\n    &:hover,\n    &:active {\n        color: ${getSemanticValue('foreground-accent-emphasized')};\n        text-decoration: underline;\n    }\n\n    ${compose(margin, fontSize, textAlign)}\n`;\n\nexport { Link, LinkProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}