{"version":3,"file":"components-experimental-Checkbox-docs-Checkbox-stories.ccdf1f1a.iframe.bundle.js","mappings":";;;;AAoBA;;;;;AAQA;ACPA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;;;;;;;;AAQA;;;;;;;;;;;;AAYA;;;;;;;;AAQA;;;;AAIA;;;;;;;;;AASA;AACA;;;;;AAKA;;;;;AAKA;AACA;;;;;;;;;;AAUA;;;;;AAKA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;;;;;;AASA;AACA;;;;AAIA;;;;;;AAMA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;AAIA;;;;AClFA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/Checkbox/components/LabelWrapper.tsx","webpack://@freenow/wave/./src/components/experimental/Checkbox/Checkbox.tsx","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { useHover } from '@react-aria/interactions';\nimport { mergeProps } from '@react-aria/utils';\n\nimport { getSemanticValue, theme } from '../../../../essentials/experimental';\n\ninterface LabelWrapperProps {\n    isDisabled?: boolean;\n    isInvalid?: boolean;\n}\n\ninterface StyledLabelProps extends LabelWrapperProps {\n    isHovered?: boolean;\n}\n\nconst StyledLabel = styled.label.attrs({ theme })<StyledLabelProps>`\n    display: inline-flex;\n    position: relative;\n    user-select: none;\n    color: ${props =>\n        getSemanticValue(props.isDisabled ? 'outline-variant' : props.isInvalid ? 'negative-variant' : 'on-surface')};\n    line-height: 1;\n    gap: 0.5rem;\n    padding: 3px 2px;\n    align-items: center;\n`;\n\nfunction LabelWrapper(props: LabelWrapperProps & React.LabelHTMLAttributes<HTMLLabelElement>): JSX.Element {\n    const { isDisabled = false, isInvalid = false, ...otherProps } = props;\n\n    const { hoverProps, isHovered } = useHover({ isDisabled });\n\n    return (\n        <StyledLabel\n            isDisabled={isDisabled}\n            isInvalid={isInvalid}\n            isHovered={isHovered}\n            {...mergeProps(hoverProps, otherProps)}\n        />\n    );\n}\n\nexport { LabelWrapper };\n","import React, { FC, ReactNode } from 'react';\nimport { Checkbox as CheckboxComponent, CheckboxProps as ReactAriaCheckboxProps } from 'react-aria-components';\nimport styled from 'styled-components';\n\nimport { Text, TextVariant } from '../Text/Text';\nimport { LabelWrapper } from './components/LabelWrapper';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { themeGet } from '../../../utils/experimental';\n\ninterface CheckboxProps extends Omit<ReactAriaCheckboxProps, 'children'> {\n    /**\n     * Provide a label for the input which will be shown next to the checkbox\n     */\n    label?: ReactNode;\n    /**\n     * Text variant for the label\n     */\n    variant?: TextVariant;\n}\n\nconst StyledCheckbox = styled(CheckboxComponent)`\n    --selected-color: ${getSemanticValue('accent')};\n    --selected-color-pressed: ${getSemanticValue('interactive')};\n    --checkmark-color: ${getSemanticValue('surface')};\n\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    forced-color-adjust: none;\n    cursor: pointer;\n\n    .checkbox {\n        width: ${themeGet('space.5')};\n        height: ${themeGet('space.5')};\n        border: 2px solid ${getSemanticValue('divider')};\n        border-radius: ${themeGet('radii.2')};\n        transition: all 200ms;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n\n        &:hover {\n            border-color: ${getSemanticValue('interactive')};\n        }\n    }\n\n    svg {\n        position: absolute;\n        width: 65%;\n        height: 62%;\n        top: 45%;\n        left: 53%;\n        transform: translate(-45%, -40%);\n        fill: none;\n        stroke: ${getSemanticValue('surface')};\n        stroke-width: 3px;\n        stroke-dasharray: 22px;\n        stroke-dashoffset: 66;\n        transition: all 200ms;\n    }\n\n    &[data-pressed] .checkbox {\n        border-color: ${getSemanticValue('surface-variant')};\n    }\n\n    &[data-focus-visible] .checkbox {\n        outline: 2px solid ${getSemanticValue('surface-variant')};\n        outline-offset: 2px;\n    }\n\n    &[data-disabled] {\n        color: transparent;\n        cursor: not-allowed;\n\n        .checkbox {\n            background-color: ${getSemanticValue('surface')};\n            border-color: ${getSemanticValue('surface-variant')};\n        }\n    }\n\n    &[data-invalid] .checkbox {\n        border-color: ${getSemanticValue('negative-variant')};\n    }\n\n    &[data-selected] .checkbox,\n    &[data-indeterminate] .checkbox {\n        border-color: ${getSemanticValue('accent')};\n        background: ${getSemanticValue('accent')};\n    }\n\n    &[data-selected] svg,\n    &[data-indeterminate] svg {\n        stroke-dashoffset: 44;\n    }\n\n    &[data-indeterminate] svg {\n        stroke: none;\n        fill: ${getSemanticValue('surface')};\n        left: 52%;\n    }\n\n    &[data-invalid] .checkbox:hover {\n        border-color: ${getSemanticValue('negative')};\n    }\n\n    &[data-selected] .checkbox:hover,\n    &[data-indeterminate] .checkbox:hover {\n        border-color: ${getSemanticValue('on-interactive-container')};\n        background: ${getSemanticValue('on-interactive-container')};\n    }\n\n    &[data-selected][data-pressed] .checkbox,\n    &[data-indeterminate][data-pressed] .checkbox {\n        border-color: ${getSemanticValue('interactive')};\n        background: ${getSemanticValue('interactive')};\n    }\n\n    &[data-selected][data-disabled],\n    &[data-indeterminate][data-disabled] {\n        color: transparent;\n        cursor: not-allowed;\n\n        .checkbox {\n            background-color: ${getSemanticValue('surface')};\n            border-color: ${getSemanticValue('surface-variant')};\n        }\n\n        svg {\n            stroke: ${getSemanticValue('outline-variant')};\n        }\n    }\n\n    &[data-indeterminate][data-disabled] svg {\n        stroke: none;\n        fill: ${getSemanticValue('outline-variant')};\n        left: 52%;\n    }\n\n    &[data-invalid][data-selected] .checkbox,\n    &[data-invalid][data-indeterminate] .checkbox {\n        background-color: ${getSemanticValue('negative-variant')};\n        border-color: ${getSemanticValue('negative-variant')};\n    }\n\n    &[data-invalid][data-selected] .checkbox:hover,\n    &[data-invalid][data-indeterminate] .checkbox:hover {\n        background-color: ${getSemanticValue('negative')};\n        border-color: ${getSemanticValue('negative')};\n    }\n`;\n\nconst Checkbox: FC<CheckboxProps> = props => {\n    const { isDisabled, isInvalid, isIndeterminate, label, variant = 'body1', ...rest } = props;\n\n    let dynamicLabel: ReactNode = label;\n    if (typeof label === 'string') {\n        dynamicLabel = (\n            <Text onClick={e => e.stopPropagation()} variant={variant}>\n                {label}\n            </Text>\n        );\n    }\n\n    return (\n        <LabelWrapper isDisabled={isDisabled} isInvalid={isInvalid}>\n            <StyledCheckbox isDisabled={isDisabled} isIndeterminate={isIndeterminate} isInvalid={isInvalid} {...rest}>\n                <div className=\"checkbox\">\n                    <svg viewBox=\"0 0 18 18\" aria-hidden=\"true\">\n                        {isIndeterminate ? (\n                            <rect x={1} y={7.5} width={15} height={3} rx={1.5} ry={1.5} />\n                        ) : (\n                            <polyline points=\"1 9 7 14 15 4\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                        )}\n                    </svg>\n                </div>\n            </StyledCheckbox>\n            {dynamicLabel}\n        </LabelWrapper>\n    );\n};\n\nexport { Checkbox, CheckboxProps };\n","import { Text as BaseText, TextProps as BaseTextProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../../essentials/experimental';\n\nexport type TextVariant = 'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2';\n\ninterface TextProps extends BaseTextProps {\n    variant?: ResponsiveValue<TextVariant>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst Text = styled(BaseText)<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(variant(textStyles))}\n`;\n\nText.defaultProps = {\n    variant: 'body1'\n};\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}