{"version":3,"file":"src-components-Breadcrumbs-docs-Breadcrumbs-storybook-mdx.68fede7d.iframe.bundle.js","mappings":";;;;;;;;;;AAgCA;;AAIA;;AA6BA;;;AAGA;AACA;;;;;;AAMA;;;AAKA;ACpCA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Breadcrumbs/Breadcrumbs.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import React, { Children, ReactElement, ReactNode, cloneElement, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { MarginProps } from 'styled-system';\n\nimport { ChevronRightIcon } from '../../icons';\nimport { Text } from '../Text/Text';\n\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { Box } from '../Box/Box';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface BreadcrumbsProps extends MarginProps {\n    /**\n     * Content of the Breadcrumbs\n     * @required\n     */\n    children: ReactNode;\n}\n\nconst BreadcrumbsList = styled.ul`\n    padding: 0;\n    list-style: none;\n    display: flex;\n    overflow: auto;\n    scrollbar-width: none;\n\n    &::-webkit-scrollbar {\n        width: 0;\n    }\n`;\n\nconst BreadcrumbsListItem = styled.li`\n    display: flex;\n`;\n\nconst Breadcrumbs = ({ children }: BreadcrumbsProps): JSX.Element => {\n    const arrayChildren = Children.toArray(children);\n    const breadcrumbsListRef = useRef<HTMLUListElement | null>(null);\n\n    useEffect(() => {\n        if (breadcrumbsListRef.current) {\n            breadcrumbsListRef.current.scrollLeft = breadcrumbsListRef.current.scrollWidth;\n        }\n    }, []);\n\n    return (\n        <BreadcrumbsList ref={breadcrumbsListRef}>\n            {Children.map(arrayChildren, (child, index) => (\n                <BreadcrumbsListItem>\n                    <nav aria-label=\"breadcrumbs\">{cloneElement(child as ReactElement)}</nav>\n                    {index < arrayChildren.length - 1 ? (\n                        <Box height={16} mt=\"0.125rem\">\n                            <ChevronRightIcon size={16} color={getSemanticValue('foreground-neutral-default')} />\n                        </Box>\n                    ) : // eslint-disable-next-line unicorn/no-null\n                    null}\n                </BreadcrumbsListItem>\n            ))}\n        </BreadcrumbsList>\n    );\n};\n\nconst Link = styled.a.attrs({ theme })`\n    display: inline-block;\n    color: ${getSemanticValue('foreground-accent-default')};\n    cursor: pointer;\n    line-height: 1.4;\n    font-family: ${get('fonts.normal')};\n    font-size: ${get('fontSizes.1')};\n    text-decoration: none;\n    padding: 0 0.25rem 0 0.25rem;\n\n    &:hover,\n    &:active {\n        color: ${getSemanticValue('foreground-accent-emphasized')};\n        text-decoration: underline;\n    }\n`;\n\nconst Item = styled(Text).attrs(() => ({\n    fontSize: 'small',\n    padding: '0 0.25rem 0 0.25rem'\n}))``;\n\nBreadcrumbs.Item = Item;\nBreadcrumbs.Link = Link;\n\nexport { Breadcrumbs, BreadcrumbsProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}