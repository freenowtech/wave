{"version":3,"file":"components-Button-docs-TextButton-stories.63c56950.iframe.bundle.js","mappings":";;;AAoCA;;;;AAIA;AACA;;;;;;;;;;;;;AAaA;;;;ACFA;AAGA","sources":["webpack://@freenow/wave/./src/components/Button/BaseButton.tsx","webpack://@freenow/wave/./src/components/Button/TextButton.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant, width, WidthProps } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface BaseButtonProps extends ComponentPropsWithoutRef<'button'>, MarginProps, WidthProps {\n    /**\n     * Adjusts the size of the button\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            minWidth: '5rem',\n            padding: '0 0.75rem'\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            minWidth: '6.25rem',\n            padding: '0 1rem'\n        }\n    }\n});\n\n// \"svg path\" fill set to \"inherit\" to being able to transition using button variants\nconst BaseButton = styled.button.attrs({ theme })<BaseButtonProps>`\n    align-items: center;\n    background: transparent;\n    border-radius: ${get('radii.2')};\n    border: 0.0625rem solid transparent;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.semibold')};\n    justify-content: center;\n    text-align: center;\n    text-decoration: none;\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    svg path {\n        fill: inherit;\n    }\n\n    ${compose(margin, sizeVariant, width)}\n`;\n\nexport { BaseButton, BaseButtonProps };\n","import styled from 'styled-components';\nimport { ResponsiveValue, variant } from 'styled-system';\n\nimport { BaseButton, BaseButtonProps } from './BaseButton';\nimport { ComponentSemanticTokens } from '../../essentials/Colors/types';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ntype Variant = 'default' | 'danger';\n\ninterface TextButtonProps extends BaseButtonProps {\n    /**\n     * Define base colors\n     */\n    variant?: ResponsiveValue<Variant>;\n}\n\nconst variantStyles = variant<ComponentSemanticTokens, Variant>({\n    variants: {\n        default: {\n            color: getSemanticValue('foreground-accent-default'),\n            fill: getSemanticValue('foreground-accent-default'),\n\n            '&:hover': {\n                color: getSemanticValue('foreground-accent-emphasized'),\n                fill: getSemanticValue('foreground-accent-emphasized')\n            },\n\n            '&:disabled': {\n                color: getSemanticValue('foreground-disabled'),\n                fill: getSemanticValue('foreground-disabled')\n            }\n        },\n        danger: {\n            color: getSemanticValue('foreground-danger-default'),\n            fill: getSemanticValue('foreground-danger-default'),\n\n            '&:hover': {\n                color: getSemanticValue('foreground-danger-emphasized'),\n                fill: getSemanticValue('foreground-danger-emphasized')\n            },\n\n            '&:disabled': {\n                color: getSemanticValue('foreground-disabled'),\n                fill: getSemanticValue('foreground-disabled')\n            }\n        }\n    }\n});\n\nconst TextButton = styled(BaseButton)<TextButtonProps>`\n    transition: color 200ms, fill 200ms;\n\n    ${variantStyles};\n`;\n\nTextButton.defaultProps = {\n    size: 'medium',\n    variant: 'default'\n};\n\nexport { TextButton, TextButtonProps };\n"],"names":[],"sourceRoot":""}