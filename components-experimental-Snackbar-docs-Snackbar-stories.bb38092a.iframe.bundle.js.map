{"version":3,"file":"components-experimental-Snackbar-docs-Snackbar-stories.bb38092a.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;;;;;;;;AAQA;;AAIA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;AAWA;AACA;;;;;;;;;;;AAWA;;AAKA;;;;ACjEA;;;;;AAKA;AAGA;;;;AAIA;AAGA;;;;;;ACvCA;AACA;AACA;AACA;;;;AAIA;;AAEA;AAGA;;;;AAiBA;;;;ACwBA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/IconButton/IconButton.tsx","webpack://@freenow/wave/./src/components/experimental/InlineSpinner/InlineSpinner.tsx","webpack://@freenow/wave/./src/components/experimental/Snackbar/Snackbar.tsx","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { ButtonProps, Button } from 'react-aria-components';\nimport { useVisuallyHidden } from 'react-aria';\nimport { IconProps } from '../../../icons';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { InlineSpinner } from '../InlineSpinner/InlineSpinner';\n\nexport interface IconButtonProps extends ButtonProps {\n    isActive?: boolean;\n    isLoading?: boolean;\n    variant?: 'standard' | 'tonal';\n    Icon: React.FC<IconProps>;\n    label: string;\n}\n\nconst StandardIconContainer = styled(Button)<Omit<IconButtonProps, 'Icon'>>`\n    height: 2.5rem;\n    width: 2.5rem;\n    border-radius: 100%;\n    background-color: transparent;\n    border-color: transparent;\n\n    cursor: pointer;\n\n    &[data-disabled],\n    &[data-pending] {\n        cursor: not-allowed;\n        opacity: 0.38;\n    }\n\n    /* we create a before pseudo element to mess with the opacity (see the hovered state) */\n    &::before {\n        position: absolute;\n        content: '';\n        border-radius: inherit;\n        opacity: 0;\n        height: inherit;\n        width: inherit;\n    }\n\n    /* we want to change the opacity here but not affect the icon, so we have to use the before pseudo element */\n    &[data-hovered]::before {\n        opacity: 0.16;\n        background-color: ${getSemanticValue('on-surface')};\n    }\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &:not([data-disabled]) {\n        color: ${props => (props.isActive ? getSemanticValue('interactive') : getSemanticValue('on-surface'))};\n    }\n`;\n\nconst TonalIconContainer = styled(Button)<Omit<IconButtonProps, 'Icon'>>`\n    height: 3.5rem;\n    width: 3.5rem;\n    border-radius: 100%;\n    border-color: transparent;\n    background: none;\n\n    cursor: pointer;\n\n    &[data-disabled],\n    &[data-pending] {\n        cursor: not-allowed;\n        opacity: 0.38;\n    }\n\n    /* we create a before pseudo element to mess with the opacity (see the hovered state) */\n    &::before {\n        position: absolute;\n        content: '';\n        border-radius: inherit;\n        height: inherit;\n        width: inherit;\n        background-color: ${props =>\n            props.isActive && !props.isDisabled\n                ? getSemanticValue('interactive-container')\n                : getSemanticValue('surface')};\n        z-index: -1;\n    }\n\n    /* we want to change the opacity here but not affect the icon, so we have to use the before pseudo element */\n    &[data-hovered]::before {\n        background-color: color-mix(\n            in hsl,\n            ${getSemanticValue('on-surface')} 100%,\n            ${props => (props.isActive ? getSemanticValue('interactive-container') : getSemanticValue('on-surface'))}\n                100%\n        );\n        opacity: 0.16;\n    }\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &:not([data-disabled]) {\n        color: ${props =>\n            props.isActive ? getSemanticValue('on-interactive-container') : getSemanticValue('on-surface')};\n    }\n`;\n\nexport const IconButton = ({\n    isDisabled = false,\n    isActive = false,\n    isLoading = false,\n    Icon,\n    variant = 'standard',\n    onPress,\n    label,\n    ...restProps\n}: IconButtonProps): ReactElement => {\n    const Container = variant === 'standard' ? StandardIconContainer : TonalIconContainer;\n    const { visuallyHiddenProps } = useVisuallyHidden();\n\n    return (\n        <Container\n            data-testid={variant === 'standard' ? 'standard-icon-container' : 'tonal-icon-container'}\n            onPress={onPress}\n            isDisabled={isDisabled}\n            isActive={isActive}\n            isPending={isLoading}\n            label={label}\n            {...restProps}\n        >\n            <>\n                {isLoading ? (\n                    <InlineSpinner\n                        data-testid=\"iconbutton-spinner\"\n                        color={getSemanticValue('on-surface')}\n                        size=\"medium\"\n                    />\n                ) : (\n                    <Icon data-testid=\"iconbutton-icon\" />\n                )}\n                <div {...visuallyHiddenProps}>{label}</div>\n            </>\n        </Container>\n    );\n};\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { compose, variant } from 'styled-system';\nimport SpinnerIcon from '../../../icons/experimental/SpinnerIcon';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\ninterface InlineSpinnerProps {\n    /**\n     * Override the color of the spinner\n     */\n    color?: string;\n    /**\n     * Set the size of the component\n     */\n    size?: 'small' | 'medium' | 'large';\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            width: '1rem',\n            height: '1rem'\n        },\n        medium: {\n            width: '1.25rem',\n            height: '1.25rem'\n        },\n        large: {\n            width: '2.5rem',\n            height: '2.5rem'\n        }\n    }\n});\n\nconst rotation = keyframes`\n    to {\n        transform: rotate(360deg);\n    }\n`;\n\nconst Wrapper = styled.span<InlineSpinnerProps>`\n    display: inline-flex;\n    box-sizing: border-box;\n    vertical-align: text-bottom;\n\n    ${compose(sizeVariant)}\n`;\n\nconst Icon = styled(SpinnerIcon)`\n    width: 100%;\n    height: 100%;\n\n    animation: ${rotation} 750ms linear infinite;\n`;\n\nconst InlineSpinner: React.FC<InlineSpinnerProps> = ({\n    color = getSemanticValue('interactive'),\n    size = 'medium',\n    ...rest\n}: InlineSpinnerProps) => (\n    <Wrapper aria-busy=\"true\" size={size}>\n        <Icon color={color} {...rest} />\n    </Wrapper>\n);\n\nexport { InlineSpinner, InlineSpinnerProps };\n","import React, { forwardRef, ReactNode, type ReactElement } from 'react';\nimport { PressEvent } from 'react-aria';\nimport styled from 'styled-components';\nimport { SpaceProps, LayoutProps, PositionProps, FlexboxProps } from 'styled-system';\n\nimport { get } from '../../../utils/experimental/themeGet';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { textStyles } from '../Text/Text';\nimport { XCrossIcon } from '../../../icons';\nimport { IconButton } from '../IconButton/IconButton';\n\nconst Container = styled.div`\n    position: relative;\n    justify-content: space-between;\n\n    border: none;\n    outline: none;\n    border-radius: ${get('radii.4')};\n    padding: ${get('space.3')} ${get('space.4')};\n    color: ${getSemanticValue('inverse-on-surface')};\n    background-color: ${getSemanticValue('inverse-surface')};\n\n    display: inline-flex;\n    align-items: center;\n    gap: ${get('space.1')};\n\n    ${textStyles.variants.body2}\n`;\n\nconst DismissButton = styled(IconButton)`\n    height: unset;\n    width: unset;\n    padding: 0;\n`;\n\ninterface SnackbarProps\n    extends SpaceProps,\n        LayoutProps,\n        PositionProps,\n        FlexboxProps,\n        React.HTMLAttributes<HTMLDivElement> {\n    children: ReactNode;\n    hasDismissButton?: boolean;\n    onDismiss?: (e: PressEvent) => void;\n}\n\nconst Snackbar = forwardRef<HTMLDivElement, SnackbarProps>(\n    ({ children, hasDismissButton = false, onDismiss = null, ...restProps }, ref): ReactElement => (\n        <Container ref={ref} {...restProps}>\n            {children}\n            {hasDismissButton && (\n                <DismissButton\n                    label=\"Close snackbar\"\n                    Icon={() => <XCrossIcon size={24} color={getSemanticValue('inverse-on-surface')} />}\n                    onPress={onDismiss}\n                />\n            )}\n        </Container>\n    )\n);\n\nexport { Snackbar, SnackbarProps };\n","import { Text as BaseText, TextProps as BaseTextProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../../essentials/experimental';\n\nexport type TextVariant = 'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2';\n\ninterface TextProps extends BaseTextProps {\n    variant?: ResponsiveValue<TextVariant>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst Text = styled(BaseText)<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(variant(textStyles))}\n`;\n\nText.defaultProps = {\n    variant: 'body1'\n};\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}