{"version":3,"file":"components-experimental-Tooltip-docs-Tooltip-stories.8e4de415.iframe.bundle.js","mappings":";;;;;AAoBA;AACA;AACA;AACA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;AAOA;AAGA;;;;ACUA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACYA","sources":["webpack://@freenow/wave/./src/components/experimental/Chip/Chip.tsx","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx","webpack://@freenow/wave/./src/components/experimental/Tooltip/Tooltip.tsx"],"sourcesContent":["import React, { forwardRef, type ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { Button as BaseButton, ButtonProps as ButtonBaseProps } from 'react-aria-components';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\nimport { textStyles } from '../Text/Text';\n\ninterface ChipProps extends ButtonBaseProps {\n    /**\n     * Toggle active state\n     */\n    isActive?: boolean;\n}\n\nconst Button = styled(BaseButton)<{ isActive: boolean }>`\n    position: relative;\n\n    border: none;\n    outline: none;\n    border-radius: ${get('radii.4')};\n    padding: ${get('space.2')} ${get('space.3')};\n    color: ${props => (props.isActive ? getSemanticValue('on-interactive-container') : getSemanticValue('on-surface'))};\n    background-color: ${props =>\n        props.isActive ? getSemanticValue('interactive-container') : getSemanticValue('surface-variant')};\n\n    display: inline-flex;\n    align-items: center;\n    gap: ${get('space.1')};\n\n    cursor: pointer;\n\n    &::before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n        bottom: 0;\n        content: '';\n        border-radius: inherit;\n        opacity: 0;\n        transition: opacity ease 200ms;\n    }\n\n    &[data-hovered]::before {\n        opacity: 0.16;\n        background-color: currentColor;\n    }\n\n    &[data-focused] {\n        outline: ${getSemanticValue('accent')} solid 0.125rem;\n    }\n\n    &[data-disabled] {\n        opacity: 0.38;\n    }\n\n    ${textStyles.variants.label1}\n`;\n\nconst Chip = forwardRef<HTMLButtonElement, ChipProps>(\n    ({ children, isActive = false, ...props }, ref): ReactElement => (\n        <Button isActive={isActive} ref={ref} {...props}>\n            {/* Button expects a single child */}\n            <>{children}</>\n        </Button>\n    )\n);\n\nexport { Chip, ChipProps };\n","import { Text as BaseText, TextProps as BaseTextProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../../essentials/experimental';\n\nexport type TextVariant = 'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2';\n\ninterface TextProps extends BaseTextProps {\n    variant?: ResponsiveValue<TextVariant>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst Text = styled(BaseText)<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(variant(textStyles))}\n`;\n\nText.defaultProps = {\n    variant: 'body1'\n};\n\nexport { Text, TextProps };\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\n\nimport {\n    OverlayArrow,\n    Tooltip as AriaTooltip,\n    TooltipTrigger as BaseTooltipTrigger,\n    Focusable\n} from 'react-aria-components';\n\nimport type { TooltipProps as AriaTooltipProps, TooltipTriggerComponentProps } from 'react-aria-components';\n\nconst TooltipTrigger = BaseTooltipTrigger as React.ComponentType<TooltipTriggerComponentProps>;\n\ninterface TooltipProps {\n    children: any;\n    content: string;\n    customTrigger?: boolean;\n    hideArrow?: boolean;\n    tooltipProps?: Omit<AriaTooltipProps, 'children'>;\n    triggerProps?: Omit<TooltipTriggerComponentProps, 'children'>;\n}\n\nconst TooltipStyles = createGlobalStyle`\n    .react-aria-Tooltip {\n\n        box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.20);\n        border-radius: 4px;\n        background: var(--wave-exp-color-inverse-surface);\n        color: var(--wave-exp-color-inverse-on-surface);\n        forced-color-adjust: none;\n        outline: none;\n        padding: 2px 8px;\n        max-width: 150px;\n        \n        /* fixes FF gap */\n        transform: translate3d(0, 0, 0);\n        transition: transform 200ms, opacity 200ms;\n\n        & .react-aria-OverlayArrow svg {\n            display: block;\n            fill: var(--wave-exp-color-inverse-surface);\n        }\n\n        &[data-entering],\n        &[data-exiting] {\n            transform: var(--origin);\n            opacity: 0;\n        }\n\n        &[data-placement='top'] {\n            margin-bottom: 8px;\n            \n            --origin: translateY(4px);\n        }\n\n        &[data-placement='bottom'] {\n            margin-top: 8px;\n            \n            --origin: translateY(-4px);\n            & .react-aria-OverlayArrow svg {\n                transform: rotate(180deg);\n            }\n        }\n\n        &[data-placement='right'] {\n            margin-left: 8px;\n            \n            --origin: translateX(-4px);\n            & .react-aria-OverlayArrow svg {\n                transform: rotate(90deg);\n            }\n        }\n\n        &[data-placement='left'] {\n            margin-right: 8px;\n            \n            --origin: translateX(4px);\n            & .react-aria-OverlayArrow svg {\n                transform: rotate(-90deg);\n            }\n        }\n    }\n`;\n\nconst Tooltip = ({\n    children,\n    content,\n    triggerProps,\n    tooltipProps,\n    hideArrow = false,\n    customTrigger = false\n}: TooltipProps): JSX.Element => (\n    <>\n        <TooltipStyles />\n        <TooltipTrigger {...triggerProps}>\n            {customTrigger ? <Focusable>{children}</Focusable> : children}\n            <AriaTooltip {...tooltipProps}>\n                {!hideArrow && (\n                    <OverlayArrow>\n                        <svg width={8} height={8} viewBox=\"0 0 8 8\">\n                            <path d=\"M0 0 L4 4 L8 0\" />\n                        </svg>\n                    </OverlayArrow>\n                )}\n                {content}\n            </AriaTooltip>\n        </TooltipTrigger>\n    </>\n);\n\nexport { Tooltip, TooltipProps };\n"],"names":[],"sourceRoot":""}