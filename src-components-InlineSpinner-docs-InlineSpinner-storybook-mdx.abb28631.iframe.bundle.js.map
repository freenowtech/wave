{"version":3,"file":"src-components-InlineSpinner-docs-InlineSpinner-storybook-mdx.abb28631.iframe.bundle.js","mappings":";;;;AA0CA;;;;;;AAMA;;;AAGA;;AAEA;AAGA;;AC7CA;;;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;AAIA;;ACcA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/InlineSpinner/InlineSpinner.tsx","webpack://@freenow/wave/./src/components/Link/Link.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport styled, { keyframes } from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { ReadCssColorVariable } from '../../essentials/Colors/types';\n\ninterface InlineSpinnerProps extends MarginProps {\n    /**\n     * Override the color of the spinner\n     */\n    // the below is the hack to keep autocomplete showing semantic variables but allowing any string as well\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    color?: ReadCssColorVariable | (string & {});\n    /**\n     * Set the size of the component\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            width: '1rem',\n            height: '1rem',\n            borderWidth: '0.1rem'\n        },\n        medium: {\n            width: '1.25rem',\n            height: '1.25rem',\n            borderWidth: '0.125rem'\n        }\n    }\n});\n\nconst rotation = keyframes`\n    to {\n        transform: rotate(360deg);\n    }\n`;\n\nconst InlineSpinnerIcon = styled.span<InlineSpinnerProps>`\n    display: inline-block;\n    box-sizing: border-box;\n    width: 1.25rem;\n    height: 1.25rem;\n    vertical-align: text-bottom;\n    border: 0.125rem solid ${p => p.color};\n    border-right-color: transparent;\n    border-radius: 50%;\n    animation: ${rotation} 750ms linear infinite;\n\n    ${compose(margin, sizeVariant)}\n`;\n\nconst InlineSpinner: React.FC<InlineSpinnerProps> = ({\n    color = getSemanticValue('foreground-primary'),\n    size = 'medium',\n    ...rest\n}: InlineSpinnerProps) => (\n    <span role=\"progressbar\">\n        <InlineSpinnerIcon color={color} size={size} {...rest} />\n    </span>\n);\n\nexport { InlineSpinner, InlineSpinnerProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, fontSize, FontSizeProps, margin, MarginProps, textAlign, TextAlignProps } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'>, MarginProps, FontSizeProps, TextAlignProps {}\n\nconst Link = styled.a.attrs({ theme })<LinkProps>`\n    display: inline-block;\n    color: ${getSemanticValue('foreground-accent-default')};\n    cursor: pointer;\n    line-height: 1.4;\n    font-family: ${get('fonts.normal')};\n    font-size: ${get('fontSizes.2')};\n    font-weight: ${get('fontWeights.semibold')};\n    text-decoration: none;\n\n    &:link,\n    &:visited {\n        color: ${getSemanticValue('foreground-accent-default')};\n    }\n\n    &:hover,\n    &:active {\n        color: ${getSemanticValue('foreground-accent-emphasized')};\n        text-decoration: underline;\n    }\n\n    ${compose(margin, fontSize, textAlign)}\n`;\n\nexport { Link, LinkProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}