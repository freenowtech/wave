{"version":3,"file":"components-experimental-Table-docs-Table-stories.b3d0204f.iframe.bundle.js","mappings":";;;;;;AAoBA;AACA;AAGA;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;AAIA;;;;;;AASA;;;;;AAKA;;AAEA;AACA;;;;AAIA;AAGA;;AAEA;AACA;AACA;;;AAGA;;;;;;AAMA;;;;AAIA;;;AAKA;;AAEA;AACA;;;;;AC/BA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/Table/Table.tsx","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import {\n    Table as BaseTable,\n    TableProps,\n    Cell as BaseCell,\n    Column as BaseColumn,\n    Row as BaseRow,\n    TableBody,\n    TableHeader\n} from 'react-aria-components';\nimport styled from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { textStyles } from '../Text/Text';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\nconst Table = styled(BaseTable)`\n    border-collapse: collapse;\n    border-spacing: 0;\n    position: relative;\n    width: 100%;\n    max-height: 100vh;\n    background: ${getSemanticValue('surface')};\n    color: ${getSemanticValue('on-surface')};\n` as typeof BaseTable;\n\nconst Cell = styled(BaseCell)`\n    box-sizing: border-box;\n    padding: 0 ${get('space.3')};\n    position: relative;\n\n    > * {\n        position: relative;\n    }\n\n    &::before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n        bottom: 0;\n        content: '';\n        border-radius: inherit;\n        opacity: 0;\n        transition: opacity ease 200ms;\n    }\n\n    &:first-of-type {\n        border-radius: ${get('radii.4')} 0 0 ${get('radii.4')};\n    }\n\n    &:last-of-type {\n        border-radius: 0 ${get('radii.4')} ${get('radii.4')} 0;\n    }\n\n    &[data-focused] {\n        outline: 0;\n    }\n` as typeof BaseCell;\n\n/* Z-Index is needed for sticky header cells to be on top of other cells */\nconst Column = styled(BaseColumn)`\n    position: sticky;\n    top: 0;\n    z-index: 1;\n    box-sizing: border-box;\n    padding: 0 ${get('space.3')};\n    height: 3rem;\n    background: ${getSemanticValue('surface')};\n    border-bottom: 1px solid ${getSemanticValue('divider')};\n    text-align: start;\n    white-space: nowrap;\n    outline: 0;\n    ${textStyles.variants.title2}\n` as typeof BaseColumn;\n\nconst Row = styled(BaseRow)`\n    height: 3rem;\n    border-bottom: 1px solid ${getSemanticValue('divider')};\n    border-radius: ${get('radii.4')};\n    ${textStyles.variants.body1}\n\n    &[data-hovered] td::before {\n        background: ${getSemanticValue('on-surface')};\n        opacity: 0.08;\n        cursor: pointer;\n    }\n\n    &[data-selected] {\n        background: ${getSemanticValue('interactive-container')};\n    }\n\n    &[data-focused] {\n        outline: 0.125rem solid ${getSemanticValue('accent')};\n        outline-offset: -0.125rem;\n    }\n` as typeof BaseRow;\n\nconst Skeleton = styled.div`\n    height: 1rem;\n    border-radius: ${get('radii.2')};\n    background: ${getSemanticValue('surface-variant')};\n`;\n\nexport { Table, TableProps, Cell, Column, Row, TableBody, TableHeader, Skeleton };\n","import { Text as BaseText, TextProps as BaseTextProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../../essentials/experimental';\n\ninterface TextProps extends BaseTextProps {\n    variant?: ResponsiveValue<'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2'>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst Text = styled(BaseText)<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(variant(textStyles))}\n`;\n\nText.defaultProps = {\n    variant: 'body1'\n};\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}