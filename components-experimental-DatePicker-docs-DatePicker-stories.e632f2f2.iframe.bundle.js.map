{"version":3,"file":"components-experimental-DatePicker-docs-DatePicker-stories.e632f2f2.iframe.bundle.js","mappings":";;AAMA;AACA;;;;;;;;;;;;AAYA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;AAgBA;AACA;;;;;;;AAOA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;AAQA;;;;;;;;;;;;AAcA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;AAIA;;;;;;;;;;AAUA;AACA;;;;;;;;;;;;;;;;AAgBA;;;;;AAKA;;;;;;AAMA;AACA;;;;;;;;;AASA;AACA;;;;AAIA;AACA;;;;;;;;;;;;;;;AAeA;AACA;;ACpPA;;;;;;;;;;;;;;;;;;;ACoBA;;;;;AAMA;;;;;;;;;;;ACkEA;;;;;;;;;;;AChFA;AACA;;;ACXA;;;AAGA;;;;;;;AAOA;;;;AAIA;AACA;;;;;ACdA;;;AAGA;AACA;AACA;;AAIA;;;;AAIA;AACA;;;AAGA;AACA;;AAEA;;;AAGA;;;AAGA;;AAEA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;;;;;;;;;;;;;;AAcA;;;;;;ACnDA;;;;;;;;;AASA;AACA;;AAEA;;;AAGA;;AAIA;AACA;;;;;;;AASA;AACA;;;;AAMA;;AAEA;;AC3CA;;AAEA;;AAEA;;;;;;;AAOA;;;;;;;;;ACRA;;;;;;;;ACIA;;;;;;;;;;;;;;;;AAgBA;;;AAGA;;;AC5BA;;;ACQA;AACA;;;AAGA;;;;;;;AASA;;AAIA;;;;ACyCA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/Calendar/Calendar.styled.ts","webpack://@freenow/wave/./src/components/experimental/Calendar/context/Calendar.context.ts","webpack://@freenow/wave/./src/components/experimental/DatePicker/DatePicker.styled.ts","webpack://@freenow/wave/./src/components/experimental/DatePicker/DatePicker.tsx","webpack://@freenow/wave/./src/components/experimental/Field/Button.ts","webpack://@freenow/wave/./src/components/experimental/Field/DateSegment.ts","webpack://@freenow/wave/./src/components/experimental/Field/FakeInput.ts","webpack://@freenow/wave/./src/components/experimental/Field/Field.ts","webpack://@freenow/wave/./src/components/experimental/Field/Footer.ts","webpack://@freenow/wave/./src/components/experimental/Field/InnerWrapper.ts","webpack://@freenow/wave/./src/components/experimental/Field/Label.ts","webpack://@freenow/wave/./src/components/experimental/Field/Wrapper.ts","webpack://@freenow/wave/./src/components/experimental/Popover/Popover.tsx","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\nexport const Container = styled.div`\n    /* Define react-day-picker CSS custom properties */\n    --rdp-accent-color: ${getSemanticValue('on-interactive-container')};\n    --rdp-accent-background-color: ${getSemanticValue('interactive-container')};\n    --rdp-animation_duration: 200ms;\n    --rdp-animation_timing: ease;\n    --rdp-day-height: 2.5rem;\n    --rdp-day-width: 2.5rem;\n    --rdp-day_button-border-radius: 50%;\n    --rdp-day_button-border: none;\n    --rdp-day_button-height: 2.5rem;\n    --rdp-day_button-width: 2.5rem;\n    --rdp-selected-border: none;\n    --rdp-disabled-opacity: 0.38;\n    --rdp-outside-opacity: 0;\n    --rdp-today-color: ${getSemanticValue('accent')};\n    --rdp-months-gap: 1.5rem;\n    --rdp-nav_button-disabled-opacity: 0;\n    --rdp-nav_button-height: 2.5rem;\n    --rdp-nav_button-width: 2.5rem;\n    --rdp-nav-height: 2.5rem;\n    --rdp-range_middle-background-color: ${getSemanticValue('interactive-container')};\n    --rdp-range_middle-color: ${getSemanticValue('on-interactive-container')};\n    --rdp-range_start-color: ${getSemanticValue('on-interactive-container')};\n    --rdp-range_start-background: ${getSemanticValue('interactive-container')};\n    --rdp-range_end-background: ${getSemanticValue('interactive-container')};\n    --rdp-range_end-color: ${getSemanticValue('on-interactive-container')};\n    --rdp-weekday-opacity: 1;\n    --rdp-weekday-padding: 0 0 ${get('space.1')};\n    --rdp-weekday-text-align: center;\n\n    color: ${getSemanticValue('on-surface')};\n\n    .rdp {\n        width: fit-content;\n    }\n\n    /* Layout for multiple months */\n    .rdp-months {\n        display: flex;\n        flex-direction: row;\n        gap: var(--rdp-months-gap);\n        position: relative;\n    }\n\n    .rdp-month {\n        display: flex;\n        flex-direction: column;\n        gap: ${get('space.3')};\n    }\n\n    /* Navigation */\n    .rdp-nav {\n        position: absolute;\n        inset-inline: 0;\n        top: 0;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        gap: ${get('space.1')};\n        pointer-events: none; /* allow buttons only */\n        height: var(--rdp-nav-height);\n    }\n\n    .rdp-button_previous,\n    .rdp-button_next {\n        appearance: none;\n        background: none;\n        border: 0;\n        display: inline-flex;\n        align-items: center;\n        justify-content: center;\n        width: var(--rdp-nav_button-width);\n        height: var(--rdp-nav_button-height);\n        padding: 0;\n        color: ${getSemanticValue('on-surface')};\n        border-radius: ${get('radii.2')};\n        pointer-events: auto;\n        cursor: pointer;\n    }\n\n    .rdp-button_previous:focus-visible,\n    .rdp-button_next:focus-visible {\n        outline: ${getSemanticValue('interactive')} solid 0.125rem;\n    }\n\n    .rdp-button_previous:disabled,\n    .rdp-button_next:disabled {\n        opacity: var(--rdp-nav_button-disabled-opacity);\n    }\n\n    .rdp-caption_label {\n        margin: 0;\n        color: ${getSemanticValue('on-surface')};\n        font-size: var(--wave-exp-typescale-title-2-size);\n        font-weight: var(--wave-exp-typescale-title-2-weight);\n        line-height: var(--wave-exp-typescale-title-2-line-height);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        inline-size: 100%;\n        block-size: var(--rdp-nav-height);\n    }\n\n    .rdp-weekdays {\n        /* Use a fixed 7-column grid so headers align regardless of outside days */\n        display: grid;\n        grid-template-columns: repeat(7, var(--rdp-day-width));\n    }\n\n    .rdp-weekday {\n        color: ${getSemanticValue('on-surface')};\n        font-size: var(--wave-exp-typescale-label-2-size);\n        font-weight: var(--wave-exp-typescale-label-2-weight);\n        line-height: var(--wave-exp-typescale-label-2-line-height);\n        text-align: var(--rdp-weekday-text-align);\n        opacity: var(--rdp-weekday-opacity);\n        padding: var(--rdp-weekday-padding);\n        flex: 1;\n        border-radius: ${get('radii.2')};\n    }\n\n    .rdp-week {\n        /* match original row spacing */\n        margin-top: 0.125rem;\n\n        /* Fixed 7-column grid to keep days aligned when outside days are hidden */\n        display: grid;\n        grid-template-columns: repeat(7, var(--rdp-day-width));\n        inline-size: 100%;\n    }\n`;\n\nexport const DayButton = styled.button`\n    position: relative;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: var(--rdp-day_button-width);\n    height: var(--rdp-day_button-height);\n    min-width: var(--rdp-day_button-width);\n    aspect-ratio: 1 / 1;\n    padding: 0;\n    margin: 0;\n    border: var(--rdp-day_button-border);\n    background: transparent;\n    color: ${getSemanticValue('on-surface')};\n    border-radius: var(--rdp-day_button-border-radius);\n    outline: 0;\n    font-size: var(--wave-exp-typescale-label-2-size);\n    font-weight: var(--wave-exp-typescale-label-2-weight);\n    line-height: var(--wave-exp-typescale-label-2-line-height);\n    transition: background var(--rdp-animation_duration) var(--rdp-animation_timing);\n\n    &::after {\n        content: '';\n        position: absolute;\n        inset: 0;\n        border-radius: inherit;\n        pointer-events: none;\n    }\n\n    /* When DayPicker marks outside days as hidden, keep layout space to avoid grid shift */\n    &[hidden] {\n        display: inline-flex; /* override UA stylesheet that sets display: none */\n        visibility: hidden; /* hide content while preserving size */\n    }\n\n    &:hover {\n        cursor: pointer;\n        background: ${getSemanticValue('surface-variant')};\n    }\n\n    &:focus-visible::after {\n        outline: ${getSemanticValue('interactive')} solid 0.125rem;\n    }\n\n    /* Today's date */\n    &[data-today='true'] {\n        color: var(--rdp-today-color);\n    }\n\n    /* Selected day */\n    &[data-selected='true'] {\n        background: ${getSemanticValue('interactive-container')};\n        color: ${getSemanticValue('on-interactive-container')};\n        border: var(--rdp-selected-border);\n    }\n\n    /* Disabled and outside */\n    &[data-disabled='true'] {\n        opacity: var(--rdp-disabled-opacity);\n        cursor: not-allowed;\n\n        &:hover {\n            background: transparent;\n        }\n    }\n\n    &[data-outside='true'] {\n        opacity: var(--rdp-outside-opacity);\n        color: ${getSemanticValue('on-surface-variant')};\n    }\n\n    /* Focused state */\n    &[data-focused='true']::after {\n        outline: ${getSemanticValue('interactive')} solid 0.125rem;\n        outline-offset: 0.125rem;\n    }\n\n    /* Range selection styling */\n    &[data-range-start='true'] {\n        background: ${getSemanticValue('interactive-container')};\n        color: ${getSemanticValue('on-interactive-container')};\n        border-start-start-radius: 50%;\n        border-end-start-radius: 50%;\n        border-start-end-radius: 0;\n        border-end-end-radius: 0;\n    }\n\n    &[data-range-middle='true'] {\n        border-radius: 0;\n        background: ${getSemanticValue('interactive-container')};\n        color: ${getSemanticValue('on-interactive-container')};\n    }\n\n    &[data-range-end='true'] {\n        background: ${getSemanticValue('interactive-container')};\n        color: ${getSemanticValue('on-interactive-container')};\n        border-start-start-radius: 0;\n        border-end-start-radius: 0;\n        border-start-end-radius: 50%;\n        border-end-end-radius: 50%;\n    }\n\n    /* Single selected day (not part of range) */\n    &[data-selected-single='true'] {\n        border-radius: 50%;\n    }\n\n    /* Multiple selected days */\n    &[data-selected-multiple='true'] {\n        border-radius: 50%;\n        background: ${getSemanticValue('interactive-container')};\n        color: ${getSemanticValue('on-interactive-container')};\n    }\n`;\n","import React from 'react';\n\nexport type SelectionType = 'single' | 'range' | 'multiple';\n\nexport const SelectionTypeContext = React.createContext<SelectionType>('single');\n","import styled from 'styled-components';\nimport { Button as BaseButton } from '../Field/Button';\n\nexport const ChipRemoveButton = styled(BaseButton)`\n    padding: 0;\n    min-width: 1.25rem;\n    height: 1.25rem;\n    line-height: 1;\n    background: transparent;\n    border: 0;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 999px;\n\n    /* tweak hover/focus styles as you like */\n    &:hover {\n        background: var(--surface-variant);\n    }\n    &:focus-visible {\n        outline: 2px solid var(--wave-exp-color-focus, currentColor);\n    }\n`;\n\nexport const Chips = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.5rem;\n    margin-top: 0.5rem;\n`;\nexport const Chip = styled.span`\n    display: inline-flex;\n    align-items: center;\n    gap: 0.4rem;\n    padding: 0.25rem 0.6rem;\n    border-radius: 999px;\n    border: 1px solid var(--border, #ddd);\n    font-size: 0.875rem;\n`;\n","import { format as dfFormat } from 'date-fns';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport { type DateValue } from '@internationalized/date';\nimport type { Matcher, DateRange as RdpRange } from 'react-day-picker';\n\nimport { DropdownSelectIcon, DropupSelectIcon } from '../../../icons';\nimport { CalendarTodayOutlineIcon } from '../../../icons/experimental';\nimport { Calendar } from '../Calendar/Calendar';\nimport { DateField } from '../DateField/DateField';\nimport { Button } from '../Field/Button';\nimport type { FieldProps } from '../Field/Props';\nimport { FocusTrap, Popover } from '../Popover/Popover';\nimport { Chip, ChipRemoveButton, Chips } from './DatePicker.styled';\n\nimport {\n    calendarDateToDate,\n    dateToCalendarDate,\n    getSeparator,\n    inBounds,\n    multipleSummary,\n    stripTime,\n    toJSDate,\n    tryParse,\n    type Mode\n} from './util';\n\ntype DateRange = RdpRange | undefined;\n\ntype CommonProps = Pick<FieldProps, 'description' | 'errorMessage'> & {\n    label?: string;\n    placeholder?: string;\n    hideOutOfRange?: boolean;\n    /** date-fns format used for display/parse */\n    displayFormat?: string;\n    /** day constraints */\n    minDate?: Date;\n    maxDate?: Date;\n    disabledDays?: Matcher | Matcher[];\n    /** calendar & i18n */\n    weekStartsOn?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n    locale?: Locale;\n    initialMonth?: Date;\n    /** how many months the calendar shows */\n    visibleMonths?: 1 | 2 | 3;\n    /** ids */\n    id?: string;\n    name?: string;\n    /** focus input on mount */\n    autoFocus?: boolean;\n    /** top-level blur (both variants) */\n    onBlur?: React.FocusEventHandler;\n};\n\ntype SingleProps = CommonProps & {\n    mode?: 'single';\n    value?: Date | null; // optional for uncontrolled\n    onChange?: (date: Date | null) => void;\n};\n\ntype MultipleProps = CommonProps & {\n    mode: 'multiple';\n    value?: Date[]; // optional for uncontrolled\n    onChange?: (dates: Date[]) => void;\n    maxSelections?: number;\n    summaryStrategy?: 'firstDate' | 'count';\n};\n\ntype RangeProps = CommonProps & {\n    mode: 'range';\n    value?: DateRange; // optional for uncontrolled\n    onChange?: (range: DateRange) => void;\n    /** text between start/end when typing */\n    separator?: string; // default ' – '\n};\n\ntype CompatDateLike = Date | { year: number; month: number; day: number };\n\n// legacy compat (avoid breaking changes)\ntype LegacyCompatProps = {\n    defaultValue?: CompatDateLike; // single only (legacy)\n    minValue?: CompatDateLike;\n    maxValue?: CompatDateLike;\n    isDisabled?: boolean;\n    isInvalid?: boolean;\n};\n\ntype DatePickerProps = (SingleProps | MultipleProps | RangeProps) & LegacyCompatProps;\n\nconst StyledPopover = styled(Popover)`\n    padding: 1.5rem;\n    border-radius: 1.5rem;\n`;\n\n// type guards\nfunction hasMode(p: DatePickerProps): p is DatePickerProps & { mode: Mode } {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return 'mode' in p && typeof (p as any).mode === 'string';\n}\nfunction isSingleProps(props: DatePickerProps): props is SingleProps & LegacyCompatProps {\n    return !hasMode(props) || props.mode === 'single';\n}\nfunction isMultipleProps(props: DatePickerProps): props is MultipleProps & LegacyCompatProps {\n    return hasMode(props) && props.mode === 'multiple';\n}\nfunction isRangeProps(props: DatePickerProps): props is RangeProps & LegacyCompatProps {\n    return hasMode(props) && props.mode === 'range';\n}\n\nexport interface DatePickerOverloads {\n    (props: SingleProps & LegacyCompatProps): JSX.Element;\n    (props: MultipleProps & LegacyCompatProps): JSX.Element;\n    (props: RangeProps & LegacyCompatProps): JSX.Element;\n}\n\nfunction DatePickerImpl(props: DatePickerProps): JSX.Element {\n    const {\n        label,\n        description,\n        errorMessage,\n        displayFormat = 'dd / MM / yyyy',\n        minDate,\n        maxDate,\n        disabledDays,\n        weekStartsOn = 1,\n        locale,\n        initialMonth,\n        name,\n        placeholder,\n        id,\n        visibleMonths,\n        hideOutOfRange = false,\n        defaultValue,\n        minValue,\n        maxValue,\n        isDisabled,\n        isInvalid,\n        autoFocus,\n        onBlur\n    } = props;\n\n    // legacy compat\n    const legacyDefaultValue = defaultValue;\n    const legacyMinValue = minValue;\n    const legacyMaxValue = maxValue;\n    const legacyIsDisabled = isDisabled;\n\n    // effective mode flags\n    const isSingle = isSingleProps(props);\n    const isMultiple = isMultipleProps(props);\n    const isRange = isRangeProps(props);\n    const modeLocal: Mode = isRange ? 'range' : isMultiple ? 'multiple' : 'single';\n\n    const { value: singleValueProp, onChange: onSingleChange } = isSingle ? props : ({} as SingleProps);\n    const {\n        value: multipleValueProp,\n        onChange: onMultipleChange,\n        maxSelections,\n        summaryStrategy\n    } = isMultiple ? props : ({} as MultipleProps);\n    const { value: rangeValueProp, onChange: onRangeChange, separator } = isRange ? props : ({} as RangeProps);\n\n    const minDateCompat = toJSDate(legacyMinValue) ?? minDate;\n    const maxDateCompat = toJSDate(legacyMaxValue) ?? maxDate;\n\n    const [open, setOpen] = React.useState(false);\n\n    // internal states\n    const [internalSingle, setInternalSingle] = React.useState<Date | null>(toJSDate(legacyDefaultValue) ?? null);\n    const [internalMultiple, setInternalMultiple] = React.useState<Date[]>([]);\n    const [internalRange, setInternalRange] = React.useState<DateRange>(undefined);\n\n    const contentRef = React.useRef<HTMLDivElement | null>(null);\n    const positionRef = React.useRef<HTMLDivElement | null>(null);\n    const triggerRef = React.useRef<HTMLButtonElement | null>(null);\n    const contentId = React.useId();\n    const inputId = id ?? `dp-${modeLocal}`;\n\n    // controlled detection per mode (controlled when `value` prop is provided)\n    const isControlledSingle = isSingle && singleValueProp !== undefined;\n    const isControlledMultiple = isMultiple && multipleValueProp !== undefined;\n    const isControlledRange = isRange && rangeValueProp !== undefined;\n\n    // sources per mode\n    const singleSource: Date | null = isSingle ? (isControlledSingle ? singleValueProp ?? null : internalSingle) : null;\n\n    const multipleSource: Date[] | undefined = isMultiple\n        ? isControlledMultiple\n            ? multipleValueProp ?? []\n            : internalMultiple\n        : undefined;\n\n    const rangeSource: DateRange = isRange ? (isControlledRange ? rangeValueProp : internalRange) : undefined;\n\n    const sepForRange = React.useMemo<string>(\n        () => (isRange ? getSeparator('range', separator) : getSeparator(modeLocal, undefined)),\n        [isRange, separator, modeLocal]\n    );\n\n    const neutralPlaceholder =\n        placeholder ??\n        (isRange ? `dd / mm / yyyy${sepForRange}dd / mm / yyyy` : isMultiple ? 'Select dates' : 'dd / mm / yyyy');\n\n    // input text (single/range); multiple shows read-only summary\n    const [text, setText] = React.useState<string>('');\n\n    // visible month\n    const [month, setMonth] = React.useState<Date | undefined>(\n        isSingle\n            ? singleSource ?? initialMonth\n            : isMultiple\n            ? multipleSource?.[0] ?? initialMonth\n            : rangeSource?.from ?? initialMonth\n    );\n\n    // reflect controlled changes in the UI\n    React.useEffect(() => {\n        if (isSingle) {\n            const src = singleSource;\n            setText(src ? dfFormat(src, displayFormat, { locale }) : '');\n            if (src) setMonth(src);\n            return;\n        }\n\n        if (isRange) {\n            const a = rangeSource?.from ? dfFormat(rangeSource.from, displayFormat, { locale }) : '';\n            const b = rangeSource?.to ? dfFormat(rangeSource.to, displayFormat, { locale }) : '';\n            setText(a || b ? `${a}${sepForRange}${b}` : '');\n            if (rangeSource?.from) setMonth(rangeSource.from);\n            else if (rangeSource?.to) setMonth(rangeSource.to);\n            return;\n        }\n\n        // multiple\n        if (multipleSource?.[0]) setMonth(multipleSource[0]);\n    }, [\n        isSingle,\n        isRange,\n        displayFormat,\n        locale,\n        singleSource?.getTime?.(),\n        rangeSource?.from?.getTime?.(),\n        rangeSource?.to?.getTime?.(),\n        multipleSource?.[0]?.getTime?.(),\n        sepForRange\n    ]);\n\n    // always call onChange if provided; update internal only if uncontrolled\n    const emitSingle = React.useCallback(\n        (next: Date | null) => {\n            onSingleChange?.(next);\n            if (!isControlledSingle) setInternalSingle(next);\n        },\n        [onSingleChange, isControlledSingle]\n    );\n\n    const emitMultiple = React.useCallback(\n        (next: Date[]) => {\n            onMultipleChange?.(next);\n            if (!isControlledMultiple) setInternalMultiple(next);\n        },\n        [onMultipleChange, isControlledMultiple]\n    );\n\n    const emitRange = React.useCallback(\n        (next: DateRange) => {\n            onRangeChange?.(next);\n            if (!isControlledRange) setInternalRange(next);\n        },\n        [onRangeChange, isControlledRange]\n    );\n\n    // parsing/committing (single & range)\n    const commitSingle = React.useCallback(\n        (date: string) => {\n            const parsedDate = tryParse(date, displayFormat, locale);\n            if (parsedDate && inBounds(parsedDate, minDateCompat, maxDateCompat)) {\n                emitSingle(parsedDate);\n                setMonth(parsedDate);\n            } else if (date.trim() === '') {\n                emitSingle(null);\n            }\n        },\n        [displayFormat, locale, minDateCompat, maxDateCompat, emitSingle]\n    );\n\n    const commitRange = React.useCallback(\n        (raw: string, sep: string) => {\n            const [ra, rb] = raw.split(sep);\n            const from = ra ? tryParse(ra.trim(), displayFormat, locale) : undefined;\n            const to = rb ? tryParse(rb.trim(), displayFormat, locale) : undefined;\n\n            let range: DateRange;\n            if (from || to) {\n                let a = from;\n                let b = to;\n                if (a && b && a > b) [a, b] = [b, a];\n                if (a && !inBounds(a, minDateCompat, maxDateCompat)) return;\n                if (b && !inBounds(b, minDateCompat, maxDateCompat)) return;\n                range = { from: a, to: b };\n            }\n\n            emitRange(range);\n            setMonth(from ?? to ?? month ?? new Date());\n        },\n        [displayFormat, locale, minDateCompat, maxDateCompat, month, emitRange]\n    );\n\n    // input value\n    const inputValue = isMultiple\n        ? multipleSummary(multipleSource ?? [], displayFormat, locale, summaryStrategy ?? 'count')\n        : text;\n\n    const readOnly = isMultiple || !!legacyIsDisabled;\n\n    // calendar handlers\n    const handleSelectSingle = React.useCallback(\n        (next: Date | null = null) => {\n            emitSingle(next);\n            setText(next ? dfFormat(next, displayFormat, { locale }) : '');\n            setOpen(false);\n        },\n        [displayFormat, locale, emitSingle]\n    );\n\n    const handleSelectMultiple = React.useCallback(\n        (dates?: Date[]) => {\n            const next = [...(dates ?? [])].sort((a, b) => a.getTime() - b.getTime());\n            if (maxSelections && next.length > maxSelections) return;\n            emitMultiple(next);\n        },\n        [emitMultiple, maxSelections]\n    );\n\n    const handleSelectRange = React.useCallback(\n        (range?: RdpRange) => {\n            emitRange(range);\n            if (range?.from || range?.to) {\n                const a = range?.from ? dfFormat(range.from, displayFormat, { locale }) : '';\n                const b = range?.to ? dfFormat(range.to, displayFormat, { locale }) : '';\n                setText(a || b ? `${a}${sepForRange}${b}` : '');\n            }\n        },\n        [displayFormat, locale, sepForRange, emitRange]\n    );\n\n    // disabled/hidden matchers\n    const disabledMatcher = React.useMemo<Matcher[] | undefined>(() => {\n        const arr: Matcher[] = [];\n        if (Array.isArray(disabledDays)) arr.push(...disabledDays);\n        else if (disabledDays) arr.push(disabledDays);\n        if (minDateCompat) arr.push({ before: stripTime(minDateCompat) });\n        if (maxDateCompat) arr.push({ after: stripTime(maxDateCompat) });\n        return arr.length > 0 ? arr : undefined;\n    }, [\n        Array.isArray(disabledDays) ? disabledDays.map(el => String(el)).join('|') : String(disabledDays),\n        minDateCompat?.getTime(),\n        maxDateCompat?.getTime()\n    ]);\n\n    const hiddenMatcher = React.useMemo<Matcher[] | undefined>(() => {\n        if (!hideOutOfRange) return undefined;\n        const arr: Matcher[] = [];\n        if (minDateCompat) arr.push({ before: stripTime(minDateCompat) });\n        if (maxDateCompat) arr.push({ after: stripTime(maxDateCompat) });\n        return arr.length > 0 ? arr : undefined;\n    }, [hideOutOfRange, minDateCompat?.getTime(), maxDateCompat?.getTime()]);\n\n    // common Calendar props\n    const commonCalProps = {\n        weekStartsOn,\n        month,\n        onMonthChange: setMonth,\n        disabled: disabledMatcher,\n        hidden: hiddenMatcher,\n        captionLayout: 'label' as const,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        locale: locale as any\n    };\n\n    return (\n        <div ref={positionRef} aria-label={label}>\n            <div style={{ position: 'relative' }}>\n                {isSingle ? (\n                    <DateField\n                        variant=\"segments\"\n                        id={inputId}\n                        name={name}\n                        label={label}\n                        description={description}\n                        errorMessage={errorMessage}\n                        isInvalid={isInvalid}\n                        isDisabled={legacyIsDisabled}\n                        isVisuallyFocused={open}\n                        leadingIcon={<CalendarTodayOutlineIcon />}\n                        value={singleSource ? dateToCalendarDate(singleSource) : undefined}\n                        onChange={(dv: DateValue | null | undefined) => {\n                            const next = dv ? calendarDateToDate(dv) : null;\n                            handleSelectSingle(next);\n                        }}\n                        autoFocus={autoFocus}\n                        onBlur={onBlur}\n                        actionIcon={\n                            <Button\n                                ref={triggerRef}\n                                isDisabled={legacyIsDisabled}\n                                onPress={() => !legacyIsDisabled && setOpen(v => !v)}\n                                aria-haspopup=\"dialog\"\n                                aria-expanded={open}\n                                aria-controls={contentId}\n                                aria-label={label ? `${label}: open calendar` : 'Open calendar'}\n                            >\n                                {open ? <DropupSelectIcon /> : <DropdownSelectIcon />}\n                            </Button>\n                        }\n                    />\n                ) : (\n                    <DateField\n                        variant=\"text\"\n                        id={inputId}\n                        name={name}\n                        label={label}\n                        description={description}\n                        errorMessage={errorMessage}\n                        isInvalid={isInvalid}\n                        isDisabled={legacyIsDisabled}\n                        isVisuallyFocused={open}\n                        leadingIcon={<CalendarTodayOutlineIcon />}\n                        value={inputValue}\n                        placeholder={neutralPlaceholder}\n                        onChange={(v: string) => {\n                            if (readOnly) return;\n                            setText(v);\n                            // optimistic month update for valid partials\n                            const tmp = isSingle\n                                ? tryParse(v, displayFormat, locale)\n                                : tryParse(v.split(sepForRange)[0]?.trim(), displayFormat, locale);\n                            if (tmp) setMonth(tmp);\n                        }}\n                        inputProps={{\n                            role: 'combobox',\n                            'aria-haspopup': 'dialog',\n                            'aria-expanded': open,\n                            'aria-controls': contentId,\n                            'aria-autocomplete': 'none',\n                            readOnly,\n                            autoFocus,\n                            onBlur: event => {\n                                onBlur?.(event);\n                                const nextEl = event.relatedTarget as HTMLElement | null;\n                                if (nextEl && nextEl === triggerRef.current) return;\n                                if (isSingle) commitSingle(event.currentTarget.value);\n                                else if (isRange) commitRange(event.currentTarget.value, sepForRange);\n                            },\n                            onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => {\n                                switch (event.key) {\n                                    case 'ArrowDown':\n                                        event.preventDefault();\n                                        setOpen(true);\n                                        break;\n                                    case 'Enter': {\n                                        const v = (event.target as HTMLInputElement).value;\n                                        if (isSingle) commitSingle(v);\n                                        else if (isRange) commitRange(v, sepForRange);\n                                        break;\n                                    }\n                                    case 'Escape':\n                                        setOpen(false);\n                                        break;\n                                    default:\n                                        break;\n                                }\n                            }\n                        }}\n                        actionIcon={\n                            <Button\n                                ref={triggerRef}\n                                isDisabled={legacyIsDisabled}\n                                onPress={() => !legacyIsDisabled && setOpen(v => !v)}\n                                aria-haspopup=\"dialog\"\n                                aria-expanded={open}\n                                aria-controls={contentId}\n                                aria-label={label ? `${label}: open calendar` : 'Open calendar'}\n                            >\n                                {open ? <DropupSelectIcon /> : <DropdownSelectIcon />}\n                            </Button>\n                        }\n                    />\n                )}\n            </div>\n\n            {isMultiple && (multipleSource?.length ?? 0) > 0 && (\n                <Chips aria-label=\"Selected dates\">\n                    {multipleSource.map(d => {\n                        const key = stripTime(d).getTime(); // stable per day\n                        return (\n                            <Chip key={key}>\n                                {dfFormat(d, displayFormat, { locale })}\n                                <ChipRemoveButton\n                                    onPress={() => {\n                                        const next = (multipleSource ?? []).filter(x => stripTime(x).getTime() !== key);\n                                        emitMultiple(next);\n                                    }}\n                                    aria-label=\"Remove date\"\n                                >\n                                    ×\n                                </ChipRemoveButton>\n                            </Chip>\n                        );\n                    })}\n                </Chips>\n            )}\n\n            <StyledPopover\n                aria-label={label ?? 'Date picker'}\n                placement=\"bottom left\"\n                offset={0}\n                triggerRef={positionRef}\n                isOpen={open}\n                onOpenChange={setOpen}\n                shouldCloseOnInteractOutside={element => {\n                    if (!element) return true;\n                    if (triggerRef.current && (element === triggerRef.current || triggerRef.current.contains(element)))\n                        return false;\n                    if (contentRef.current && contentRef.current.contains(element)) return false;\n                    return true;\n                }}\n            >\n                <FocusTrap role=\"dialog\">\n                    <div id={contentId} ref={contentRef}>\n                        {/* eslint-disable react/jsx-no-bind */}\n                        {isSingle && (\n                            <Calendar\n                                selectionType=\"single\"\n                                {...commonCalProps}\n                                visibleMonths={visibleMonths ?? 1}\n                                selected={singleSource ?? undefined}\n                                onSelect={handleSelectSingle}\n                            />\n                        )}\n\n                        {isMultiple && (\n                            <Calendar\n                                selectionType=\"multiple\"\n                                {...commonCalProps}\n                                visibleMonths={visibleMonths ?? 1}\n                                selected={multipleSource}\n                                onSelect={handleSelectMultiple}\n                            />\n                        )}\n\n                        {isRange && (\n                            <Calendar\n                                selectionType=\"range\"\n                                {...commonCalProps}\n                                visibleMonths={visibleMonths ?? 2}\n                                selected={rangeSource}\n                                onSelect={handleSelectRange}\n                            />\n                        )}\n                        {/* eslint-enable react/jsx-no-bind */}\n                    </div>\n                </FocusTrap>\n            </StyledPopover>\n        </div>\n    );\n}\n\nDatePickerImpl.displayName = 'DatePicker';\n\nexport type { DatePickerProps, LegacyCompatProps, SingleProps, MultipleProps, RangeProps };\n\n// exported component with proper overloads\nexport const DatePicker = DatePickerImpl as unknown as DatePickerOverloads;\n","import styled from 'styled-components';\nimport { Button as BaseButton } from 'react-aria-components';\nimport { getSemanticValue } from '../../../essentials/experimental/cssVariables';\nimport { get } from '../../../utils/experimental/themeGet';\n\nexport const Button = styled(BaseButton)`\n    appearance: none;\n    background: none;\n    border: none;\n    display: flex;\n    margin: 0;\n    padding: 0;\n    cursor: pointer;\n    outline: 0;\n\n    &[data-focused] {\n        outline: ${getSemanticValue('interactive')} solid 0.125rem;\n        border-radius: ${get('radii.2')};\n    }\n`;\n","import styled from 'styled-components';\nimport { DateSegment as BaseDateSegment } from 'react-aria-components';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\nexport const DateSegment = styled(BaseDateSegment)`\n    margin-right: ${get('space.1')};\n    font-variant-numeric: tabular-nums;\n    text-align: end;\n    color: ${getSemanticValue('on-surface')};\n\n    &[data-type='literal'] {\n        padding: 0;\n    }\n\n    &[data-placeholder] {\n        color: ${getSemanticValue('on-surface-variant')};\n    }\n\n    &:focus {\n        color: ${getSemanticValue('on-interactive-container')};\n        background: ${getSemanticValue('interactive-container')};\n        outline: none;\n        caret-color: transparent;\n    }\n`;\n","import styled, { css } from 'styled-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { flyingLabelStyles, Label } from './Label';\nimport { InnerWrapper } from './InnerWrapper';\n\nconst focusStyles = css`\n    outline: ${getSemanticValue('interactive')} solid 0.125rem;\n    outline-offset: -0.125rem;\n\n    ${Label} {\n        color: ${getSemanticValue('interactive')};\n        ${flyingLabelStyles}\n    }\n`;\n\nexport const FakeInput = styled.div<{ $isVisuallyFocused: boolean }>`\n    box-sizing: border-box;\n    cursor: text;\n\n    color: ${getSemanticValue('on-surface-variant')};\n    background-color: ${getSemanticValue('surface')};\n    border-width: 0.0625rem;\n    border-style: solid;\n    border-color: ${getSemanticValue('outline-variant')};\n    border-radius: ${get('radii.4')};\n    min-height: 3.5rem;\n    padding: 0 ${get('space.3')} 0 ${get('space.4')};\n    display: flex;\n    align-items: center;\n    gap: ${get('space.3')};\n\n    /* stylelint-disable selector-type-case, selector-type-no-unknown */\n    & > :not(${InnerWrapper}) {\n        flex-shrink: 0;\n        color: ${getSemanticValue('on-surface-variant')};\n    }\n\n    &:hover {\n        border-color: ${getSemanticValue('outline')};\n        color: ${getSemanticValue('on-surface')};\n    }\n\n    &:focus-within {\n        ${focusStyles}\n    }\n\n    [data-invalid] & {\n        border-color: ${getSemanticValue('negative')};\n    }\n\n    [data-disabled] & {\n        opacity: 0.38;\n        pointer-events: none;\n    }\n\n    &:has(input[disabled]),\n    &:has([aria-disabled='true']) {\n        opacity: 0.38;\n        pointer-events: none;\n    }\n\n    ${props => props.$isVisuallyFocused && focusStyles}\n`;\n","import styled, { css } from 'styled-components';\nimport { DateInput as BaseDateInput, Input as BaseInput, TextArea as BaseTextArea } from 'react-aria-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\nexport const fieldTextStyles = css`\n    font-family: inherit;\n    font-size: var(--wave-exp-typescale-body-1-size);\n    font-weight: var(--wave-exp-typescale-body-1-weight);\n    line-height: var(--wave-exp-typescale-body-1-line-height);\n`;\n\nexport const fieldStyles = css`\n    border: none;\n    background-color: unset;\n    outline: none;\n\n    display: block;\n    width: 100%;\n    padding: 0;\n\n    caret-color: ${getSemanticValue('interactive')};\n    color: ${getSemanticValue('on-surface')};\n\n    ${fieldTextStyles}\n\n    [data-placeholder] {\n        color: ${getSemanticValue('on-surface-variant')};\n    }\n`;\n\nexport const Input = styled(BaseInput)`\n    ${fieldStyles}\n\n    &[type='search'] {\n        &::-webkit-search-cancel-button {\n            display: none;\n        }\n    }\n`;\n\nexport const TextArea = styled(BaseTextArea).attrs({ rows: 1 })`\n    ${fieldStyles};\n\n    resize: none;\n    min-height: var(--wave-exp-typescale-body-1-line-height);\n`;\n\nexport const DateInput = styled(BaseDateInput)`\n    display: flex;\n    ${fieldTextStyles}\n`;\n","import styled from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { textStyles } from '../Text/Text';\n\nexport const Footer = styled.footer`\n    padding: ${get('space.1')} ${get('space.3')} ${get('space.0')};\n\n    color: ${getSemanticValue('on-surface-variant')};\n\n    ${textStyles.variants.label2}\n\n    &:empty {\n        display: none;\n    }\n\n    [data-invalid] & {\n        color: ${getSemanticValue('negative')};\n    }\n`;\n","import styled from 'styled-components';\n\nexport const InnerWrapper = styled.div<{ hideLabel?: boolean }>`\n    position: relative;\n    overflow: hidden;\n\n    box-sizing: border-box;\n    width: 100%;\n\n    ${props =>\n        !props.hideLabel &&\n        `\n        padding-top: var(--wave-exp-typescale-label-2-line-height);\n    `}\n`;\n","import { Label as BaseLabel } from 'react-aria-components';\nimport styled, { css } from 'styled-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\nexport const flyingLabelStyles = css`\n    top: 0;\n    transform: none;\n\n    font-size: var(--wave-exp-typescale-label-2-size);\n    font-weight: var(--wave-exp-typescale-label-2-weight);\n    line-height: var(--wave-exp-typescale-label-2-line-height);\n`;\n\nexport const Label = styled(BaseLabel)<{ $flying?: boolean }>`\n    position: absolute;\n    top: 50%;\n    color: currentColor;\n\n    font-family: inherit;\n    font-size: var(--wave-exp-typescale-body-1-size);\n    font-weight: var(--wave-exp-typescale-body-1-weight);\n    line-height: var(--wave-exp-typescale-body-1-line-height);\n    white-space: nowrap;\n\n    transform: translateY(-50%);\n    transform-origin: 0;\n\n    transition: top 200ms ease, font-size 200ms ease, transform 200ms ease;\n\n    ${props => props.$flying && flyingLabelStyles}\n\n    [data-invalid] & {\n        color: ${getSemanticValue('negative')};\n    }\n`;\n","import styled from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\n\nexport const Wrapper = styled.div`\n    padding: ${get('space.2')} 0;\n`;\n","import React, { ReactElement } from 'react';\nimport { Dialog, DialogTrigger, Popover as BasePopover, PopoverProps as BasePopoverProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { get } from '../../../utils/experimental/themeGet';\n\ninterface PopoverProps extends Omit<BasePopoverProps, 'children'> {\n    children: React.ReactNode;\n}\n\nconst StyledPopover = styled(BasePopover)`\n    overflow: auto;\n    background: ${getSemanticValue('surface')};\n    padding: ${get('space.4')};\n    box-shadow: 0 2px 4px -1px hsla(0, 0%, 0%, 0.2), 0 1px 10px 0 hsla(0, 0%, 0%, 0.12),\n        0 4px 5px 0 hsla(0, 0%, 0%, 0.14);\n    border-radius: ${get('radii.4')};\n\n    &[data-trigger='Select'],\n    &[data-trigger='ComboBox'] {\n        box-sizing: border-box;\n        width: var(--trigger-width);\n    }\n`;\n\nconst FocusTrap = styled(Dialog)`\n    outline: 0;\n`;\n\nfunction Popover({ children, placement = 'bottom', offset = 8, ...props }: PopoverProps): ReactElement {\n    return (\n        <StyledPopover placement={placement} offset={offset} {...props}>\n            {children}\n        </StyledPopover>\n    );\n}\n\nexport { Popover, DialogTrigger as PopoverTrigger, FocusTrap };\n","import { Text as BaseText, TextProps as BaseTextProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../../essentials/experimental';\n\nexport type TextVariant = 'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2';\n\ninterface TextProps extends BaseTextProps {\n    variant?: ResponsiveValue<TextVariant>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst Text = styled(BaseText)<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(variant(textStyles))}\n`;\n\nText.defaultProps = {\n    variant: 'body1'\n};\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}