{"version":3,"file":"components-experimental-IconButton-docs-IconButton-stories.6505d75e.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;;;;;;;AAQA;;AAIA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;AAWA;AACA;;;;;;;;;;;AAWA;;AAKA;;;;AC/DA;;;;;;AAMA;;;AAGA;;AAEA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/IconButton/IconButton.tsx","webpack://@freenow/wave/./src/components/InlineSpinner/InlineSpinner.tsx"],"sourcesContent":["import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { ButtonProps, Button } from 'react-aria-components';\nimport { IconProps } from '../../../icons';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { InlineSpinner } from '../../InlineSpinner/InlineSpinner';\n\nexport interface IconButtonProps extends ButtonProps {\n    isActive?: boolean;\n    isLoading?: boolean;\n    variant?: 'standard' | 'tonal';\n    Icon: React.FC<IconProps>;\n    onPress: () => void;\n}\n\nconst StandardIconContainer = styled(Button)<Omit<IconButtonProps, 'Icon'>>`\n    height: 2.5rem;\n    width: 2.5rem;\n    border-radius: 100%;\n    background-color: transparent;\n    border-color: transparent;\n\n    cursor: pointer;\n\n    &[data-disabled],\n    &[data-pending] {\n        cursor: not-allowed;\n        opacity: 0.38;\n    }\n\n    /* we create a before pseudo element to mess with the opacity (see the hovered state) */\n    &::before {\n        position: absolute;\n        content: '';\n        border-radius: inherit;\n        opacity: 0;\n        height: inherit;\n        width: inherit;\n    }\n\n    /* we want to change the opacity here but not affect the icon, so we have to use the before pseudo element */\n    &[data-hovered]::before {\n        opacity: 0.16;\n        background-color: ${getSemanticValue('on-surface')};\n    }\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &:not([data-disabled]) {\n        color: ${props => (props.isActive ? getSemanticValue('interactive') : getSemanticValue('on-surface'))};\n    }\n`;\n\nconst TonalIconContainer = styled(Button)<Omit<IconButtonProps, 'Icon'>>`\n    height: 3.5rem;\n    width: 3.5rem;\n    border-radius: 100%;\n    border-color: transparent;\n    background: none;\n\n    cursor: pointer;\n\n    &[data-disabled],\n    &[data-pending] {\n        cursor: not-allowed;\n        opacity: 0.38;\n    }\n\n    /* we create a before pseudo element to mess with the opacity (see the hovered state) */\n    &::before {\n        position: absolute;\n        content: '';\n        border-radius: inherit;\n        height: inherit;\n        width: inherit;\n        background-color: ${props =>\n            props.isActive && !props.isDisabled\n                ? getSemanticValue('interactive-container')\n                : getSemanticValue('surface')};\n        z-index: -1;\n    }\n\n    /* we want to change the opacity here but not affect the icon, so we have to use the before pseudo element */\n    &[data-hovered]::before {\n        background-color: color-mix(\n            in hsl,\n            ${getSemanticValue('on-surface')} 100%,\n            ${props => (props.isActive ? getSemanticValue('interactive-container') : getSemanticValue('on-surface'))}\n                100%\n        );\n        opacity: 0.16;\n    }\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &:not([data-disabled]) {\n        color: ${props =>\n            props.isActive ? getSemanticValue('on-interactive-container') : getSemanticValue('on-surface')};\n    }\n`;\n\nexport const IconButton = ({\n    isDisabled = false,\n    isActive = false,\n    isLoading = false,\n    Icon,\n    variant = 'standard',\n    onPress,\n    ...restProps\n}: IconButtonProps): ReactElement => {\n    const Container = variant === 'standard' ? StandardIconContainer : TonalIconContainer;\n\n    return (\n        <Container\n            data-testid={variant === 'standard' ? 'standard-icon-container' : 'tonal-icon-container'}\n            onPress={onPress}\n            isDisabled={isDisabled}\n            isActive={isActive}\n            isPending={isLoading}\n            {...restProps}\n        >\n            {isLoading ? (\n                <InlineSpinner data-testid=\"iconbutton-spinner\" color={getSemanticValue('on-surface')} />\n            ) : (\n                <Icon data-testid=\"iconbutton-icon\" />\n            )}\n        </Container>\n    );\n};\n","import * as React from 'react';\n\nimport styled, { keyframes } from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { ReadCssColorVariable } from '../../essentials/Colors/types';\n\ninterface InlineSpinnerProps extends MarginProps {\n    /**\n     * Override the color of the spinner\n     */\n    // the below is the hack to keep autocomplete showing semantic variables but allowing any string as well\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    color?: ReadCssColorVariable | (string & {});\n    /**\n     * Set the size of the component\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            width: '1rem',\n            height: '1rem',\n            borderWidth: '0.1rem'\n        },\n        medium: {\n            width: '1.25rem',\n            height: '1.25rem',\n            borderWidth: '0.125rem'\n        }\n    }\n});\n\nconst rotation = keyframes`\n    to {\n        transform: rotate(360deg);\n    }\n`;\n\nconst InlineSpinnerIcon = styled.span<InlineSpinnerProps>`\n    display: inline-block;\n    box-sizing: border-box;\n    width: 1.25rem;\n    height: 1.25rem;\n    vertical-align: text-bottom;\n    border: 0.125rem solid ${p => p.color};\n    border-right-color: transparent;\n    border-radius: 50%;\n    animation: ${rotation} 750ms linear infinite;\n\n    ${compose(margin, sizeVariant)}\n`;\n\nconst InlineSpinner: React.FC<InlineSpinnerProps> = ({\n    color = getSemanticValue('foreground-primary'),\n    size = 'medium',\n    ...rest\n}: InlineSpinnerProps) => (\n    <span role=\"progressbar\">\n        <InlineSpinnerIcon color={color} size={size} {...rest} />\n    </span>\n);\n\nexport { InlineSpinner, InlineSpinnerProps };\n"],"names":[],"sourceRoot":""}