{"version":3,"file":"components-Tag-docs-Tag-stories.56df27d3.iframe.bundle.js","mappings":";AA2BA;;AAEA;AACA;AACA;;;AAKA;;;;;;;AASA;;;;;;;;;;;;AA8EA;AACA;AAGA;ACnFA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Tag/Tag.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import React, { FC, MouseEvent, PropsWithChildren } from 'react';\nimport styled from 'styled-components';\nimport { margin, MarginProps, variant } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { XCrossIcon } from '../../icons';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { Text } from '../Text/Text';\n\ninterface TagProps extends MarginProps {\n    /**\n     * The function to handle when the dismiss icon is clicked\n     */\n    onDismiss?: (e: MouseEvent) => void;\n    /**\n     * The prop to determine whether the dismiss functionality is enabled\n     */\n    dismissible?: boolean;\n    /**\n     * Set the appropriate semantic tag color.\n     * @default default\n     */\n    variant?: 'default' | 'disabled' | 'error';\n}\n\nconst TagText = styled(Text).attrs({ theme })<Pick<TagProps, 'dismissible'>>`\n    color: ${getSemanticValue('foreground-info-faded')};\n    margin-left: 0.75rem;\n    margin-right: ${props => (props.dismissible ? '0.25rem' : '0.75rem')};\n    font-size: ${get('fontSizes.1')};\n    font-weight: ${get('fontWeights.semibold')};\n    cursor: default;\n    transition: color 125ms ease;\n`;\n\nconst DismissIcon = styled(XCrossIcon).attrs({ size: 18 })`\n    margin-right: 0.5rem;\n    transition: color 125ms ease;\n\n    &:hover {\n        cursor: pointer;\n    }\n`;\n\nconst tagVariant = variant({\n    variants: {\n        default: {\n            backgroundColor: getSemanticValue('background-element-info-default'),\n            borderColor: getSemanticValue('border-info-default'),\n\n            [`> ${TagText}`]: {\n                color: getSemanticValue('foreground-info-default')\n            },\n\n            [`> ${DismissIcon}`]: {\n                color: getSemanticValue('foreground-info-default')\n            },\n\n            '&:hover': {\n                backgroundColor: getSemanticValue('background-element-info-emphasized'),\n                borderColor: getSemanticValue('border-info-default'),\n\n                [`> ${TagText}`]: {\n                    color: getSemanticValue('foreground-on-background-info')\n                },\n\n                [`> ${DismissIcon}`]: {\n                    color: getSemanticValue('foreground-on-background-info')\n                }\n            }\n        },\n        disabled: {\n            borderColor: getSemanticValue('border-disabled'),\n\n            [`> ${TagText}`]: {\n                color: getSemanticValue('foreground-disabled')\n            },\n\n            [`> ${DismissIcon}`]: {\n                color: getSemanticValue('foreground-disabled')\n            }\n        },\n        error: {\n            backgroundColor: getSemanticValue('background-surface-danger-default'),\n            borderColor: getSemanticValue('border-danger-default'),\n\n            [`> ${TagText}`]: {\n                color: getSemanticValue('foreground-danger-default')\n            },\n\n            [`> ${DismissIcon}`]: {\n                color: getSemanticValue('foreground-danger-default')\n            },\n\n            '&:hover': {\n                backgroundColor: getSemanticValue('background-surface-danger-emphasized'),\n                borderColor: getSemanticValue('border-danger-default'),\n\n                [`> ${TagText}`]: {\n                    color: getSemanticValue('foreground-on-background-danger')\n                },\n\n                [`> ${DismissIcon}`]: {\n                    color: getSemanticValue('foreground-on-background-danger')\n                }\n            }\n        }\n    }\n});\n\nconst TagWrapper = styled.div.attrs({ theme })<TagProps>`\n    box-sizing: border-box;\n    border: solid 0.0625rem;\n    display: inline-flex;\n    align-items: center;\n    border-radius: 2rem;\n    height: 2rem;\n    margin-right: 0.25rem;\n    margin-bottom: 0.375rem;\n    padding: 0.375rem 0;\n    transition: background-color 125ms ease;\n\n    ${margin}\n    ${tagVariant}\n`;\n\nconst Tag: FC<PropsWithChildren<TagProps>> = ({\n    children,\n    onDismiss,\n    dismissible = true,\n    variant: variantValue = 'default',\n    ...rest\n}) => (\n    <TagWrapper variant={variantValue} {...rest}>\n        <TagText dismissible={dismissible}>{children}</TagText>\n        {dismissible && (\n            <DismissIcon\n                data-testid=\"dismiss-icon\"\n                color={getSemanticValue('foreground-info-faded')}\n                onClick={onDismiss}\n            />\n        )}\n    </TagWrapper>\n);\n\nexport { Tag, TagProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}