{"version":3,"file":"src-components-MonthPicker-docs-MonthRangePicker-storybook-mdx.2dd2d794.iframe.bundle.js","mappings":";;AAWA;;;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;AAIA;;AC+BA;AACA;AACA;;;AAGA;;;;;;;;;;;AAvDA;AAGA;AACA;AACA;;AAKA;AAEA;AACA;AACA;;;;;AAKA;AACA;;AAKA;AAEA;AACA;AACA;;;;;AAQA;AACA;AACA;;;;AAIA;AACA;;;;;;;AC3CA;;AAcA;;;;;ACfA;;AAEA;;;AAGA;;;;;AAOA;AACA;AACA;AACA;;AAEA;;;AAGA;;;;AAIA;;;AAGA;;;;AAIA;;;;;;;;;;;;;;;ACXA;;;;AAIA;;;;;;;;;AASA;AAGA;;;;;;;;;AAWA;;;;;AAOA;;AAIA;;AAkBA;AC3CA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Link/Link.tsx","webpack://@freenow/wave/./src/components/MonthPicker/MonthCalender/MonthButton.tsx","webpack://@freenow/wave/./src/components/MonthPicker/MonthCalender/MonthCalender.tsx","webpack://@freenow/wave/./src/components/MonthPicker/MonthPickerContentElements.tsx","webpack://@freenow/wave/./src/components/MonthPicker/MonthRangePicker.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, fontSize, FontSizeProps, margin, MarginProps, textAlign, TextAlignProps } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'>, MarginProps, FontSizeProps, TextAlignProps {}\n\nconst Link = styled.a.attrs({ theme })<LinkProps>`\n    display: inline-block;\n    color: ${getSemanticValue('foreground-accent-default')};\n    cursor: pointer;\n    line-height: 1.4;\n    font-family: ${get('fonts.normal')};\n    font-size: ${get('fontSizes.2')};\n    font-weight: ${get('fontWeights.semibold')};\n    text-decoration: none;\n\n    &:link,\n    &:visited {\n        color: ${getSemanticValue('foreground-accent-default')};\n    }\n\n    &:hover,\n    &:active {\n        color: ${getSemanticValue('foreground-accent-emphasized')};\n        text-decoration: underline;\n    }\n\n    ${compose(margin, fontSize, textAlign)}\n`;\n\nexport { Link, LinkProps };\n","import styled, { css } from 'styled-components';\n\nimport { getSemanticValue } from '../../../utils/cssVariables';\nimport { get } from '../../../utils/themeGet';\n\ninterface MonthButtonProps {\n    isSelectedStartOrEnd: boolean;\n    disabled: boolean;\n    isInRange: boolean;\n}\n\nconst getColor = ({ isSelectedStartOrEnd, isInRange, disabled }: MonthButtonProps) => {\n    if (isSelectedStartOrEnd) {\n        return css`\n            color: ${getSemanticValue('foreground-on-background-accent')};\n            background: ${getSemanticValue('background-element-accent-emphasized')};\n            box-shadow: 0 0 0 0.0625rem ${getSemanticValue('border-accent-default')};\n            z-index: 2;\n        `;\n    }\n\n    if (isInRange) {\n        return css`\n            color: ${getSemanticValue('foreground-accent-default')};\n            background: ${getSemanticValue('background-element-accent-faded')};\n            box-shadow: 0 0 0 0.0625rem ${getSemanticValue('border-accent-faded')};\n            z-index: 1;\n\n            &:hover {\n                cursor: pointer;\n                background: ${getSemanticValue('background-element-accent-default')};\n                color: ${getSemanticValue('foreground-accent-emphasized')};\n            }\n        `;\n    }\n\n    if (disabled) {\n        return css`\n            color: ${getSemanticValue('foreground-disabled')};\n            box-shadow: 0 0 0 0.0625rem ${getSemanticValue('border-disabled')};\n            background: ${getSemanticValue('transparent')};\n\n            &:hover {\n                cursor: not-allowed;\n            }\n        `;\n    }\n\n    return css`\n        color: ${getSemanticValue('foreground-primary')};\n        background: ${getSemanticValue('transparent')};\n\n        &:hover {\n            cursor: pointer;\n            background: ${getSemanticValue('background-element-accent-default')};\n            color: ${getSemanticValue('foreground-accent-emphasized')};\n        }\n    `;\n};\n\nconst MonthButton = styled.button.attrs({ type: 'button' })<MonthButtonProps>`\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.normal')};\n    font-size: ${get('fontSizes.0')};\n    border: 0;\n    padding: 0.5rem;\n    box-shadow: 0 0 0 0.0625rem ${getSemanticValue('border-neutral-default')};\n    outline: none;\n\n    transition-property: background, box-shadow, color;\n    transition-duration: 200ms;\n    transition-timing-function: ease;\n\n    &:hover {\n        cursor: pointer;\n    }\n\n    ${getColor}\n`;\n\nexport { MonthButton };\n","import React, { FC } from 'react';\nimport { format } from 'date-fns';\nimport styled from 'styled-components';\nimport { Text } from '../../Text/Text';\nimport { MonthButton } from './MonthButton';\n\nconst MonthGrid = styled.div`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 8px;\n`;\n\nconst YearSection = styled.div`\n    flex: 1;\n`;\n\nexport interface MonthCalendarProps {\n    year: number;\n    onClick: (monthIndex: number, year: number) => void;\n    onHover: (monthIndex: number, year: number) => void;\n    isMonthDisabled: (year: number, month: number) => boolean;\n    isInRange: (date: Date) => boolean;\n    isSelectedStartOrEnd: (date: Date) => boolean;\n    locale: Locale;\n}\n\nexport const MonthCalendar: FC<MonthCalendarProps> = ({\n    year,\n    onClick,\n    onHover,\n    isMonthDisabled,\n    isSelectedStartOrEnd,\n    isInRange,\n    locale\n}) => (\n    <YearSection>\n        <Text as=\"p\" fontWeight=\"bold\" mb={2} textAlign=\"center\">\n            {year}\n        </Text>\n        <MonthGrid>\n            {Array.from({ length: 12 }).map((_, index) => {\n                const date = new Date(year, index, 1);\n                const monthName = format(date, 'MMM', { locale });\n                const isDisabled = isMonthDisabled(year, index);\n\n                return (\n                    <MonthButton\n                        key={monthName}\n                        onClick={() => onClick(index, year)}\n                        onMouseEnter={() => onHover(index, year)}\n                        disabled={isDisabled}\n                        isInRange={isInRange(date)}\n                        isSelectedStartOrEnd={isSelectedStartOrEnd(date)}\n                        aria-label={`${monthName} ${year}`}\n                        aria-pressed={isSelectedStartOrEnd(date)}\n                    >\n                        {monthName}\n                    </MonthButton>\n                );\n            })}\n        </MonthGrid>\n    </YearSection>\n);\n","import styled, { css } from 'styled-components';\nimport { Elevation, MediaQueries } from '../../essentials';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\nconst baseArrowStyles = css`\n    width: 1.25rem;\n    height: 1.25rem;\n    position: absolute;\n    background: inherit;\n`;\n\nexport const Arrow = styled.div`\n    visibility: hidden;\n    ${baseArrowStyles};\n\n    &::before {\n        ${baseArrowStyles};\n        visibility: visible;\n        content: '';\n        transform: rotate(45deg);\n    }\n`;\n\nexport const MonthPickerContentContainer = styled.div`\n    background: ${getSemanticValue('background-surface-neutral-default')};\n    box-shadow: 0 0 0.5rem 0.1875rem ${getSemanticValue('border-neutral-faded')};\n    z-index: ${Elevation.DATEPICKER};\n\n    &[data-popper-placement^='top'] > ${Arrow} {\n        bottom: -0.625rem;\n        &::before {\n            box-shadow: 0.25rem 0.25rem 0.5rem -0.125rem ${getSemanticValue('border-neutral-faded')};\n        }\n    }\n\n    &[data-popper-placement^='bottom'] > ${Arrow} {\n        top: -0.625rem;\n        &::before {\n            box-shadow: -0.25rem -0.25rem 0.5rem -0.125rem ${getSemanticValue('border-neutral-faded')};\n        }\n    }\n\n    ${MediaQueries.small} {\n        padding: 1.5rem;\n        margin-left: 0;\n    }\n`;\n","import React, { useState, useEffect, useMemo, Fragment } from 'react';\nimport { createPortal } from 'react-dom';\nimport styled from 'styled-components';\nimport { usePopper } from 'react-popper';\nimport { isBefore, isAfter, isSameMonth, startOfMonth, endOfMonth } from 'date-fns';\nimport { compose, margin, MarginProps, width, WidthProps } from 'styled-system';\nimport { dateToText, isBetween } from './utils';\nimport { Input } from '../Input/Input';\nimport { MonthCalendar } from './MonthCalender/MonthCalender';\nimport { theme } from '../../essentials/theme';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { MediaQueries } from '../../essentials';\nimport { useClosestColorScheme } from '../../utils/hooks/useClosestColorScheme';\nimport { DarkScheme, LightScheme } from '../ColorScheme';\nimport { Arrow, MonthPickerContentContainer } from './MonthPickerContentElements';\nimport { ChevronLeftIcon, ChevronRightIcon } from '../../icons';\nimport { useLocaleObject } from '../Datepicker/utils/useLocaleObject';\n\ntype FocusedInput = 'start' | 'end' | null;\n\nconst Wrapper = styled.div.attrs({ theme })<MarginProps & WidthProps>`\n    display: inline-flex;\n    align-items: center;\n    position: relative;\n    z-index: 0;\n    width: 100%;\n\n    input {\n        &:focus,\n        &:active {\n            box-shadow: none;\n            border-color: ${getSemanticValue('border-neutral-default')};\n        }\n    }\n\n    ${MediaQueries.small} {\n        width: 14rem;\n\n        .startDate input,\n        .endDate input {\n            text-align: left;\n        }\n    }\n\n    ${compose(margin, width)}\n`;\n\nconst NavButton = styled.button`\n    background: none;\n    border: none;\n    cursor: pointer;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n`;\n\nconst YearGridContainer = styled.div`\n    display: grid;\n    grid-template-columns: repeat(2, 17.5625rem);\n    grid-gap: 0 1.5rem;\n    width: 100%;\n`;\n\nconst Back = styled(NavButton)`\n    left: 1.5rem;\n`;\n\nconst Forward = styled(NavButton)`\n    right: 1.5rem;\n`;\n\nexport interface MonthRangePickerProps extends MarginProps, WidthProps {\n    onRangeSelect?: (start: Date | null, end: Date | null) => void;\n    minMonth?: Date;\n    maxMonth?: Date;\n    value?: { start?: Date | null; end?: Date | null } | null;\n    label?: string;\n    placeholder?: string;\n    disabled?: boolean;\n    placement?: 'left' | 'right' | 'center';\n    locale?: string;\n}\n\ntype DatepickerPopperPlacement = 'bottom-end' | 'bottom-start' | 'bottom';\n\nconst PLACEMENT_TO_POPPER_PLACEMENT_MAP: {\n    [key in MonthRangePickerProps['placement']]: DatepickerPopperPlacement;\n} = {\n    center: 'bottom',\n    left: 'bottom-start',\n    right: 'bottom-end'\n};\n\nconst mapPlacementToPopperPlacement = (placement: MonthRangePickerProps['placement']) =>\n    PLACEMENT_TO_POPPER_PLACEMENT_MAP[placement];\n\nexport const MonthRangePicker: React.FC<MonthRangePickerProps> = ({\n    onRangeSelect,\n    minMonth,\n    maxMonth,\n    value,\n    label,\n    placeholder = 'Select a month range',\n    disabled,\n    placement = 'left',\n    locale = 'en-US',\n    ...rest\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n    const [focusedInput, setFocusedInput] = useState<FocusedInput>(null);\n\n    const [rangeStart, setRangeStart] = useState<Date | null>(null);\n    const [rangeEnd, setRangeEnd] = useState<Date | null>(null);\n    const [hoveredMonth, setHoveredMonth] = useState<Date | null>(null);\n\n    const [triggerReference, setTriggerReference] = useState<HTMLDivElement | null>(null);\n    const [contentReference, setContentReference] = useState<HTMLDivElement | null>(null);\n    const [arrowReference, setArrowReference] = useState(undefined);\n    const localeObject = useLocaleObject(locale);\n\n    const enforcedColorScheme = useClosestColorScheme(triggerReference);\n    const mappedPlacement = mapPlacementToPopperPlacement(placement);\n\n    const { styles, attributes } = usePopper(triggerReference, contentReference, {\n        placement: mappedPlacement,\n        modifiers: [\n            {\n                name: 'flip',\n                enabled: true\n            },\n            {\n                name: 'offset',\n                enabled: true,\n                options: {\n                    offset: [0, 15]\n                }\n            },\n            {\n                name: 'arrow',\n                options: { element: arrowReference }\n            }\n        ]\n    });\n\n    useEffect(() => {\n        const start = value?.start instanceof Date ? value.start : null;\n        const end = value?.end instanceof Date ? value.end : null;\n        setRangeStart(start ? startOfMonth(start) : null);\n        setRangeEnd(end ? endOfMonth(end) : null);\n    }, [value]);\n\n    const inputText = useMemo(() => {\n        if (rangeStart && rangeEnd) {\n            return `${dateToText(rangeStart, localeObject)} - ${dateToText(rangeEnd, localeObject)}`;\n        }\n        return rangeStart ? `${dateToText(rangeStart, localeObject)} - ...` : '';\n    }, [rangeStart, rangeEnd]);\n\n    // Close the picker when clicking outside\n    useEffect(() => {\n        function handleClickOutside(event: MouseEvent) {\n            if (\n                triggerReference &&\n                !triggerReference.contains(event.target as Node) &&\n                contentReference &&\n                !contentReference.contains(event.target as Node)\n            ) {\n                setIsOpen(false);\n                setFocusedInput(null);\n            }\n        }\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => document.removeEventListener('mousedown', handleClickOutside);\n    }, [triggerReference, contentReference]);\n\n    const handleMonthClick = (monthIndex: number, year: number) => {\n        const clickedDate = startOfMonth(new Date(year, monthIndex, 1));\n        if (focusedInput === 'start' || !rangeStart || (rangeStart && rangeEnd)) {\n            setRangeStart(clickedDate);\n            setRangeEnd(null);\n            setFocusedInput('end');\n            if (onRangeSelect) onRangeSelect(clickedDate, null);\n        } else if (focusedInput === 'end') {\n            let actualStart = rangeStart;\n            let actualEnd = clickedDate;\n            if (isBefore(clickedDate, rangeStart)) {\n                actualStart = clickedDate;\n                actualEnd = rangeStart;\n            }\n            const finalEndDate = endOfMonth(actualEnd);\n            setRangeStart(actualStart);\n            setRangeEnd(finalEndDate);\n            if (onRangeSelect) onRangeSelect(actualStart, finalEndDate);\n            setIsOpen(false);\n            setFocusedInput(null);\n        }\n    };\n\n    const handleMonthHover = (monthIndex: number, year: number) => {\n        const hoveredDate = new Date(year, monthIndex, 1);\n\n        if (rangeStart && !rangeEnd) {\n            setHoveredMonth(hoveredDate);\n        }\n    };\n\n    const isMonthDisabled = (year: number, month: number): boolean => {\n        const date = new Date(year, month);\n        if (minMonth && isBefore(date, startOfMonth(minMonth))) return true;\n        if (maxMonth && isAfter(date, endOfMonth(maxMonth))) return true;\n        return false;\n    };\n\n    const handleFocus = () => {\n        setIsOpen(true);\n        if (rangeStart && !rangeEnd) {\n            setFocusedInput('end');\n        } else {\n            setFocusedInput('start');\n        }\n    };\n\n    const isSelectedStartOrEnd = (date: Date) =>\n        !!((rangeStart && isSameMonth(date, rangeStart)) || (rangeEnd && isSameMonth(date, rangeEnd)));\n\n    const isInRange = (date: Date) => {\n        if (rangeStart && rangeEnd) {\n            return isBetween(date, rangeStart, rangeEnd);\n        }\n        if (rangeStart && !rangeEnd && hoveredMonth) {\n            const earlier = isBefore(hoveredMonth, rangeStart) ? hoveredMonth : rangeStart;\n            const later = isBefore(hoveredMonth, rangeStart) ? rangeStart : hoveredMonth;\n            if (isSameMonth(earlier, later)) return false;\n            return isAfter(date, earlier) && isBefore(date, later);\n        }\n        return false;\n    };\n\n    const PortalWrapper = useMemo(() => {\n        if (!enforcedColorScheme) return Fragment;\n        return enforcedColorScheme === 'light' ? LightScheme : DarkScheme;\n    }, [enforcedColorScheme]);\n\n    return (\n        <Wrapper {...rest}>\n            <div ref={setTriggerReference}>\n                <Input\n                    label={label}\n                    placeholder={placeholder}\n                    value={inputText}\n                    onFocus={handleFocus}\n                    readOnly\n                    disabled={disabled}\n                    autoComplete=\"off\"\n                />\n            </div>\n            {isOpen &&\n                createPortal(\n                    <PortalWrapper>\n                        <MonthPickerContentContainer\n                            ref={setContentReference}\n                            style={styles.popper}\n                            {...attributes.popper}\n                        >\n                            <Arrow ref={setArrowReference} style={styles.arrow} {...attributes.arrow} />\n                            <Back\n                                onClick={() => setCurrentYear(y => y - 1)}\n                                aria-label=\"Previous year\"\n                                disabled={minMonth && currentYear <= minMonth.getFullYear()}\n                            >\n                                <ChevronLeftIcon />\n                            </Back>\n                            <Forward\n                                onClick={() => setCurrentYear(y => y + 1)}\n                                aria-label=\"Next year\"\n                                disabled={maxMonth && currentYear + 1 >= maxMonth.getFullYear()}\n                            >\n                                <ChevronRightIcon />\n                            </Forward>\n                            <YearGridContainer onMouseLeave={() => setHoveredMonth(null)}>\n                                <MonthCalendar\n                                    year={currentYear}\n                                    onClick={handleMonthClick}\n                                    onHover={handleMonthHover}\n                                    isMonthDisabled={isMonthDisabled}\n                                    isSelectedStartOrEnd={isSelectedStartOrEnd}\n                                    isInRange={isInRange}\n                                    locale={localeObject}\n                                />\n                                <MonthCalendar\n                                    year={currentYear + 1}\n                                    onClick={handleMonthClick}\n                                    onHover={handleMonthHover}\n                                    isMonthDisabled={isMonthDisabled}\n                                    isSelectedStartOrEnd={isSelectedStartOrEnd}\n                                    isInRange={isInRange}\n                                    locale={localeObject}\n                                />\n                            </YearGridContainer>\n                        </MonthPickerContentContainer>\n                    </PortalWrapper>,\n                    document.body\n                )}\n        </Wrapper>\n    );\n};\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}