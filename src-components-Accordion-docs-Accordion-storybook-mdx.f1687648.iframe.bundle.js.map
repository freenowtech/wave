{"version":3,"file":"src-components-Accordion-docs-Accordion-storybook-mdx.f1687648.iframe.bundle.js","mappings":";;;;;;;;AAKA;;ACAA;;;ACcA;AACA;;AAIA;ACXA;AAGA;;AAEA;;;;AAIA;AACA;;;AAKA;AACA;;;;AAIA;;;;AAIA;AACA;;;AAKA;AACA;;AAIA;;ACtCA;AAGA;;AAMA;AACA;;;AAKA;;ACgCA;AACA;;;AAGA;AACA;;AClBA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Accordion/components/ChevronUp.tsx","webpack://@freenow/wave/./src/components/Accordion/components/ChevronDown.tsx","webpack://@freenow/wave/./src/components/Accordion/components/Compact.tsx","webpack://@freenow/wave/./src/components/Accordion/components/Default.tsx","webpack://@freenow/wave/./src/components/Accordion/Accordion.tsx","webpack://@freenow/wave/./src/components/Headline/Headline.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { ChevronUpIcon } from '../../../icons';\nimport { getSemanticValue } from '../../../utils/cssVariables';\n\nexport const ChevronUp = styled(ChevronUpIcon)`\n    color: ${props => (props.color ? props.color : getSemanticValue('foreground-primary'))};\n`;\n","import styled from 'styled-components';\nimport { ChevronDownIcon } from '../../../icons';\nimport { getSemanticValue } from '../../../utils/cssVariables';\n\nexport const ChevronDown = styled(ChevronDownIcon)`\n    color: ${props => (props.color ? props.color : getSemanticValue('foreground-primary'))};\n`;\n","import React, { ReactElement, useState, PropsWithChildren } from 'react';\nimport styled from 'styled-components';\nimport { Box } from '../../Box/Box';\nimport { Headline } from '../../Headline/Headline';\nimport { Header } from './Header';\nimport { ChevronUp } from './ChevronUp';\nimport { ChevronDown } from './ChevronDown';\nimport { Description } from './Description';\nimport { AccordionProps } from '../types';\nimport { getSemanticValue } from '../../../utils/cssVariables';\n\ntype Props = PropsWithChildren<\n    Pick<AccordionProps, 'heading' | 'description' | 'defaultExpanded' | 'onExpand' | 'onCollapse'>\n>;\n\nconst StyleHeadline = styled(Headline)``;\n\nconst PanelHeader = styled(Header)`\n    /* stylelint-disable */\n    &:hover ${StyleHeadline}, &:hover ${ChevronDown}, &:hover ${ChevronUp} {\n        color: ${getSemanticValue('foreground-accent-emphasized')};\n    }\n`;\n\nconst PanelIcon = ({ isOpen }: { isOpen: boolean }) => (isOpen ? <ChevronUp /> : <ChevronDown />);\n\nexport const Compact = ({\n    heading,\n    description,\n    defaultExpanded = false,\n    children,\n    onExpand,\n    onCollapse\n}: Props): ReactElement => {\n    const [isOpen, setIsOpen] = useState<boolean>(defaultExpanded);\n\n    return (\n        <>\n            <PanelHeader\n                onClick={() => {\n                    if (isOpen) {\n                        onExpand();\n                    } else {\n                        onCollapse();\n                    }\n                    setIsOpen(!isOpen);\n                }}\n            >\n                <Box display=\"flex\" flexDirection=\"column\" maxWidth=\"33%\">\n                    <Headline as=\"h4\" mr=\"3\">\n                        {heading}\n                    </Headline>\n                    {isOpen && <Description mt=\"1\" description={description} />}\n                </Box>\n                {!isOpen && <Description mt=\"1\" description={description} />}\n                <Box ml=\"3\">\n                    <PanelIcon isOpen={isOpen} />\n                </Box>\n            </PanelHeader>\n            {isOpen && (\n                <Box mx=\"2\" mb=\"5\">\n                    {children}\n                </Box>\n            )}\n        </>\n    );\n};\n","import React, { PropsWithChildren, ReactElement, useState } from 'react';\nimport styled from 'styled-components';\nimport { Text } from '../../Text/Text';\nimport { Box } from '../../Box/Box';\nimport { Headline } from '../../Headline/Headline';\nimport { Header } from './Header';\nimport { ChevronUp } from './ChevronUp';\nimport { ChevronDown } from './ChevronDown';\nimport { Description } from './Description';\nimport { AccordionProps } from '../types';\nimport { getSemanticValue } from '../../../utils/cssVariables';\n\nconst ButtonLabel = styled(Text).attrs({ as: 'p' })`\n    color: ${getSemanticValue('foreground-accent-default')};\n`;\n\nconst PanelHeader = styled(Header)`\n    &:hover {\n        background-color: ${getSemanticValue('background-surface-info-default')};\n    }\n\n    /* stylelint-disable */\n    &:hover ${ButtonLabel}, &:hover ${ChevronDown} {\n        color: ${getSemanticValue('foreground-accent-emphasized')};\n    }\n    /* stylelint-enable */\n`;\n\nconst CardHeader = styled(Header).attrs({ p: '3' })`\n    background-color: ${getSemanticValue('background-surface-neutral-faded')};\n    border-radius: 0.3125rem 0.3125rem 0 0;\n\n    &:hover {\n        background-color: ${getSemanticValue('background-surface-info-default')};\n    }\n\n    /* stylelint-disable */\n    &:hover ${ButtonLabel}, &:hover ${ChevronUp} {\n        color: ${getSemanticValue('foreground-accent-emphasized')};\n    }\n    /* stylelint-enable */\n`;\n\nconst PanelBody = styled(Box).attrs({ my: '3' })`\n    border: solid 0.0625rem ${getSemanticValue('border-neutral-default')};\n    border-radius: 0.3125rem;\n`;\n\nconst PanelIcon = ({ isOpen }: { isOpen: boolean }) =>\n    isOpen ? (\n        <ChevronUp color={getSemanticValue('foreground-accent-default')} />\n    ) : (\n        <ChevronDown color={getSemanticValue('foreground-accent-default')} />\n    );\n\nexport const DefaultPanel = ({\n    heading,\n    description,\n    info,\n    buttonLabel,\n    defaultExpanded = false,\n    children,\n    onExpand,\n    onCollapse\n}: PropsWithChildren<AccordionProps>): ReactElement => {\n    const [isOpen, setIsOpen] = useState<boolean>(defaultExpanded);\n\n    return (\n        <>\n            {isOpen ? (\n                <PanelBody>\n                    <CardHeader\n                        onClick={() => {\n                            setIsOpen(!isOpen);\n                            onCollapse();\n                        }}\n                    >\n                        <Box display=\"flex\" flexDirection=\"column\" maxWidth=\"33%\">\n                            <Headline as=\"h4\" mr=\"3\">\n                                {heading}\n                            </Headline>\n                            <Description mt=\"1\" description={description} />\n                        </Box>\n                        <Box ml=\"3\" display=\"flex\" flexDirection=\"row\">\n                            <ButtonLabel>{buttonLabel}</ButtonLabel>\n                            <PanelIcon isOpen={isOpen} />\n                        </Box>\n                    </CardHeader>\n                    <Box m=\"3\">{children}</Box>\n                </PanelBody>\n            ) : (\n                <PanelHeader\n                    onClick={() => {\n                        setIsOpen(!isOpen);\n                        onExpand();\n                    }}\n                >\n                    <Headline as=\"h4\" mr=\"3\">\n                        {heading}\n                    </Headline>\n                    <Box>\n                        <Description description={description} />\n                        <Text as=\"p\" style={{ textOverflow: 'ellipsis', overflow: 'hidden', whiteSpace: 'nowrap' }}>\n                            {info}\n                        </Text>\n                    </Box>\n                    <Box ml=\"3\" display=\"flex\" flexDirection=\"row\">\n                        <ButtonLabel>{buttonLabel}</ButtonLabel>\n                        <PanelIcon isOpen={isOpen} />\n                    </Box>\n                </PanelHeader>\n            )}\n        </>\n    );\n};\n","import React, { PropsWithChildren } from 'react';\nimport styled from 'styled-components';\nimport { Box } from '../Box/Box';\nimport { Compact } from './components/Compact';\nimport { DefaultPanel } from './components/Default';\nimport { AccordionProps } from './types';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\nconst HorizontalDivider = styled(Box)`\n    border: 0;\n    border-top: solid 0.0625rem ${getSemanticValue('border-neutral-default')};\n`;\n\nconst HorizontalDividerTop = HorizontalDivider;\n\nconst HorizontalDividerBottom = styled(HorizontalDivider)`\n    display: none;\n`;\n\nconst RenderedSection = styled(Box)`\n    :last-child ${HorizontalDividerBottom} {\n        display: inherit;\n    }\n`;\n\nconst Accordion: React.FC<PropsWithChildren<AccordionProps>> = ({\n    heading,\n    description,\n    info,\n    buttonLabel,\n    variant,\n    defaultExpanded,\n    children,\n    onExpand = () => undefined,\n    onCollapse = () => undefined\n}) => (\n    <RenderedSection role=\"group\">\n        <HorizontalDividerTop />\n        {variant === 'compact' ? (\n            <Compact\n                heading={heading}\n                description={description}\n                defaultExpanded={defaultExpanded}\n                onExpand={onExpand}\n                onCollapse={onCollapse}\n            >\n                {children}\n            </Compact>\n        ) : (\n            <DefaultPanel\n                heading={heading}\n                description={description}\n                buttonLabel={buttonLabel}\n                info={info}\n                defaultExpanded={defaultExpanded}\n                onExpand={onExpand}\n                onCollapse={onCollapse}\n            >\n                {children}\n            </DefaultPanel>\n        )}\n        <HorizontalDividerBottom />\n    </RenderedSection>\n);\n\nexport { Accordion, AccordionProps };\n","import * as React from 'react';\nimport { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, system, MarginProps, textAlign, TextAlignProps, ResponsiveValue } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface HeadlineProps extends ComponentPropsWithoutRef<'h1'>, MarginProps, TextAlignProps {\n    /**\n     * Set the html tag for the headline including the appropriate styles\n     */\n    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n    /**\n     * Set the style of the headline\n     */\n    size?: ResponsiveValue<'xxl' | 'xl' | 'l' | 'm' | 's' | 'xs'>;\n}\n\nexport const DEFAULT_HEADLINE_SIZE = {\n    h1: 'xxl',\n    h2: 'xl',\n    h3: 'l',\n    h4: 'm',\n    h5: 's',\n    h6: 'xs'\n} as const;\n\nconst parser = system({\n    fontSize: {\n        property: 'fontSize',\n        defaultScale: {\n            xs: '0.75rem',\n            s: '0.875rem',\n            m: '1rem',\n            l: '1.5rem',\n            xl: '2rem',\n            xxl: '3rem'\n        }\n    },\n    lh: {\n        property: 'lineHeight',\n        defaultScale: {\n            xs: '1.125rem',\n            s: '1.25rem',\n            m: '1.375rem',\n            l: '2rem',\n            xl: '2.5rem',\n            xxl: '3.75rem'\n        }\n    }\n});\n\nconst getSize = ({ as = 'h1', size }: HeadlineProps): ResponsiveValue<'xxl' | 'xl' | 'l' | 'm' | 's' | 'xs'> =>\n    size || DEFAULT_HEADLINE_SIZE[as];\n\nconst Headline: React.FC<HeadlineProps> = styled.h1.attrs({ theme })<HeadlineProps>`\n    color: inherit;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.bold')};\n    margin: 0;\n\n    ${props => parser({ fontSize: getSize(props), lh: getSize(props), ...props })}\n    ${compose(margin, textAlign)}\n`;\n\nexport { Headline, HeadlineProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}