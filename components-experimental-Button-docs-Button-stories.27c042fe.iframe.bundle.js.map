{"version":3,"file":"components-experimental-Button-docs-Button-stories.27c042fe.iframe.bundle.js","mappings":";;;;AA0CA;;;;;;AAMA;;;AAGA;;AAEA;AAGA;;;;;;ACuBA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;AAEA;AAGA;;;;ACtDA;AAGA","sources":["webpack://@freenow/wave/./src/components/InlineSpinner/InlineSpinner.tsx","webpack://@freenow/wave/./src/components/experimental/Button/Button.tsx","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport styled, { keyframes } from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { ReadCssColorVariable } from '../../essentials/Colors/types';\n\ninterface InlineSpinnerProps extends MarginProps {\n    /**\n     * Override the color of the spinner\n     */\n    // the below is the hack to keep autocomplete showing semantic variables but allowing any string as well\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    color?: ReadCssColorVariable | (string & {});\n    /**\n     * Set the size of the component\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            width: '1rem',\n            height: '1rem',\n            borderWidth: '0.1rem'\n        },\n        medium: {\n            width: '1.25rem',\n            height: '1.25rem',\n            borderWidth: '0.125rem'\n        }\n    }\n});\n\nconst rotation = keyframes`\n    to {\n        transform: rotate(360deg);\n    }\n`;\n\nconst InlineSpinnerIcon = styled.span<InlineSpinnerProps>`\n    display: inline-block;\n    box-sizing: border-box;\n    width: 1.25rem;\n    height: 1.25rem;\n    vertical-align: text-bottom;\n    border: 0.125rem solid ${p => p.color};\n    border-right-color: transparent;\n    border-radius: 50%;\n    animation: ${rotation} 750ms linear infinite;\n\n    ${compose(margin, sizeVariant)}\n`;\n\nconst InlineSpinner: React.FC<InlineSpinnerProps> = ({\n    color = getSemanticValue('foreground-primary'),\n    size = 'medium',\n    ...rest\n}: InlineSpinnerProps) => (\n    <span role=\"progressbar\">\n        <InlineSpinnerIcon color={color} size={size} {...rest} />\n    </span>\n);\n\nexport { InlineSpinner, InlineSpinnerProps };\n","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { variant } from 'styled-system';\nimport { Button as BaseButton, ButtonProps as BaseButtonProps } from 'react-aria-components';\nimport { getSemanticValue } from '../../../essentials/experimental/cssVariables';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { textStyles } from '../Text/Text';\nimport { InlineSpinner } from '../../InlineSpinner/InlineSpinner';\n\ntype Emphasis = 'primary' | 'secondary' | 'textButton';\n\ninterface ButtonProps extends BaseButtonProps {\n    /**\n     * Define style of the button component, defaults to primary\n     */\n    emphasis?: Emphasis;\n    /**\n     * Loading state, defaults to false\n     */\n    isLoading?: boolean;\n}\n\nconst emphasisStyles = variant<Record<string, unknown>, Emphasis>({\n    prop: '$emphasis',\n    variants: {\n        primary: {\n            color: getSemanticValue('on-accent'),\n            background: getSemanticValue('accent'),\n\n            '&::before': {\n                background: getSemanticValue('on-accent')\n            },\n\n            '&[data-disabled]::before': {\n                opacity: 0.38\n            }\n        },\n        secondary: {\n            color: getSemanticValue('on-surface'),\n            background: getSemanticValue('surface-variant'),\n\n            '&::before': {\n                background: getSemanticValue('on-surface')\n            },\n\n            '&[data-disabled]': {\n                opacity: 0.38\n            },\n\n            '&[data-disabled]::before': {\n                opacity: 0.06\n            }\n        },\n        textButton: {\n            color: getSemanticValue('on-surface'),\n            background: 'transparent',\n\n            '&::before': {\n                background: getSemanticValue('interactive')\n            },\n\n            '&[data-disabled]': {\n                opacity: 0.38\n            },\n\n            '&[data-disabled]::before': {\n                opacity: 0.06,\n                background: 'transparent'\n            }\n        }\n    }\n});\n\nconst ButtonStyled = styled(BaseButton)<{ $emphasis: Emphasis }>`\n    position: relative;\n\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: ${get('space.2')};\n    border: none;\n    outline: none;\n    border-radius: ${get('radii.4')};\n    padding: ${get('space.4')} ${get('space.6')};\n\n    cursor: pointer;\n\n    &[data-disabled],\n    &[data-pending] {\n        cursor: not-allowed;\n    }\n\n    &::before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n        bottom: 0;\n        content: '';\n        border-radius: inherit;\n        opacity: 0;\n        transition: opacity ease 200ms;\n    }\n\n    &[data-hovered]::before {\n        opacity: 0.16;\n    }\n\n    &[data-focused]::before,\n    &[data-pressed]::before {\n        opacity: 0.24;\n    }\n\n    &[data-pending] {\n        opacity: 0.38;\n    }\n\n    ${textStyles.variants.label1}\n\n    ${emphasisStyles};\n`;\n\nconst spinnerColor: Record<Emphasis, string> = {\n    primary: getSemanticValue('on-accent'),\n    secondary: getSemanticValue('on-surface'),\n    textButton: getSemanticValue('on-surface')\n};\n\nfunction Button({ children, emphasis = 'primary', isLoading = false, ...restProps }: ButtonProps): ReactElement {\n    return (\n        <ButtonStyled data-testid=\"button-container\" isPending={isLoading} $emphasis={emphasis} {...restProps}>\n            {isLoading ? <InlineSpinner data-testid=\"button-spinner\" color={spinnerColor[emphasis]} /> : children}\n        </ButtonStyled>\n    );\n}\n\nexport { Button };\n","import { Text as BaseText, TextProps as BaseTextProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../../essentials/experimental';\n\ninterface TextProps extends BaseTextProps {\n    variant?: ResponsiveValue<'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2'>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst Text = styled(BaseText)<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(variant(textStyles))}\n`;\n\nText.defaultProps = {\n    variant: 'body1'\n};\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}