{"version":3,"file":"components-Divider-docs-Divider-stories.c2a30f53.iframe.bundle.js","mappings":";;;;;AA0BA;;AAEA;AAGA;;;;;;AAQA;;AAEA;AAGA;ACAA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Divider/Divider.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import React from 'react';\nimport styled, { StyledComponent } from 'styled-components';\nimport { compose, space, SpaceProps } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ntype DividerOffset = number | string;\n\ninterface DividerProps extends SpaceProps {\n    /**\n     * Set the direction of the divider to vertical\n     */\n    vertical?: boolean;\n    /**\n     * Set offset / margin of the divider from the surrounding content\n     */\n    offset?: DividerOffset;\n}\n\nconst HorizontalLine: StyledComponent<'div', typeof theme, DividerProps, 'theme'> = styled.div.attrs({ theme })<\n    Pick<SpaceProps, 'my'>\n>`\n    width: 100%;\n    margin-left: auto;\n    margin-right: auto;\n    border: 0;\n    border-top: 1px solid ${getSemanticValue('border-neutral-default')};\n\n    ${compose(space)}\n`;\n\nconst VerticalLine: StyledComponent<'div', typeof theme, DividerProps, 'theme'> = styled.div.attrs({ theme })<\n    Pick<SpaceProps, 'mx'>\n>`\n    display: inline-block;\n    width: 0.06rem;\n    margin-top: 0;\n    margin-bottom: 0;\n    border: 0;\n    border-left: 1px solid ${getSemanticValue('border-neutral-default')};\n\n    ${compose(space)}\n`;\n\nconst Divider: React.FC<DividerProps> = ({ vertical = false, offset = '1rem' }: DividerProps) =>\n    vertical ? (\n        <VerticalLine mx={offset} data-testid=\"vertical-divider\" />\n    ) : (\n        <HorizontalLine my={offset} data-testid=\"horizontal-divider\" />\n    );\n\nexport { Divider, DividerProps, DividerOffset };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}