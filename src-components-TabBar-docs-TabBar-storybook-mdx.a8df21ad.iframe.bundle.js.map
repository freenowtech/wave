{"version":3,"file":"src-components-TabBar-docs-TabBar-storybook-mdx.a8df21ad.iframe.bundle.js","mappings":";;AAWA;;;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;AAIA;;;;ACEA;AAGA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;AAOA;AACA;;AAEA;AACA;;;AAKA;;;AC9CA;AACA;ACgCA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Link/Link.tsx","webpack://@freenow/wave/./src/components/TabBar/Link.tsx","webpack://@freenow/wave/./src/components/TabBar/TabBar.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, fontSize, FontSizeProps, margin, MarginProps, textAlign, TextAlignProps } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'>, MarginProps, FontSizeProps, TextAlignProps {}\n\nconst Link = styled.a.attrs({ theme })<LinkProps>`\n    display: inline-block;\n    color: ${getSemanticValue('foreground-accent-default')};\n    cursor: pointer;\n    line-height: 1.4;\n    font-family: ${get('fonts.normal')};\n    font-size: ${get('fontSizes.2')};\n    font-weight: ${get('fontWeights.semibold')};\n    text-decoration: none;\n\n    &:link,\n    &:visited {\n        color: ${getSemanticValue('foreground-accent-default')};\n    }\n\n    &:hover,\n    &:active {\n        color: ${getSemanticValue('foreground-accent-emphasized')};\n        text-decoration: underline;\n    }\n\n    ${compose(margin, fontSize, textAlign)}\n`;\n\nexport { Link, LinkProps };\n","import React, { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { Spaces } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'> {\n    /**\n     * Indicates that the link is currently selected\n     * @default false\n     */\n    selected?: boolean;\n\n    /**\n     * Override the default active class name (see react-router)\n     */\n    activeClassName?: string;\n\n    /**\n     * Replace the rendered component with an HTML tag or another component\n     * @default 'a'\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    as?: keyof JSX.IntrinsicElements | React.ComponentType<any>;\n}\n\nconst DEFAULT_ACTIVE_CLASS_NAME = 'active';\n\nconst UnderLine = styled.div`\n    background-color: transparent;\n    height: 0.1875rem;\n    margin-top: ${Spaces[1]};\n`;\n\nconst InnerLink = styled.a.attrs({ theme })<LinkProps>`\n    color: ${getSemanticValue('foreground-neutral-emphasized')};\n    cursor: pointer;\n    font-size: ${get('fontSizes.1')};\n    font-weight: ${get('fontWeights.semibold')};\n    font-family: ${get('fonts.normal')};\n    margin-right: ${Spaces[3]};\n    text-decoration: none;\n\n    &:last-child {\n        margin-right: 0;\n    }\n\n    &.${props => (props.activeClassName ? props.activeClassName : DEFAULT_ACTIVE_CLASS_NAME)} {\n        color: ${getSemanticValue('foreground-accent-default')};\n\n        ${UnderLine} {\n            background-color: ${getSemanticValue('foreground-accent-default')};\n        }\n    }\n`;\n\nconst Link: React.FC<LinkProps> = ({ children, selected, ...rest }: LinkProps) => {\n    const combinedClassNames = [rest.className];\n\n    if (selected) {\n        combinedClassNames.push(rest.activeClassName ? rest.activeClassName : DEFAULT_ACTIVE_CLASS_NAME);\n    }\n\n    return (\n        <InnerLink {...rest} className={combinedClassNames.join(' ')}>\n            {children}\n            <UnderLine />\n        </InnerLink>\n    );\n};\n\nexport { Link, LinkProps };\n","import styled from 'styled-components';\nimport { margin } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { Link } from './Link';\nimport { TabBarWithLink } from './TabBarWithLink';\n\nconst TabBar: TabBarWithLink = Object.assign(\n    styled.nav.attrs({ theme })`\n        display: flex;\n\n        ${margin}\n    `,\n    { Link }\n);\n\nexport { TabBar, TabBarWithLink };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}