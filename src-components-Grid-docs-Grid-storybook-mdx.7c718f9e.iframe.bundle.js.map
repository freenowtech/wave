{"version":3,"file":"src-components-Grid-docs-Grid-storybook-mdx.7c718f9e.iframe.bundle.js","mappings":";;;AAoCA;;;;AAIA;AACA;;;;;;;;;;;;;AAaA;;;;ACkBA;AAGA;;ACzDA;;ACuCA;AACA;;;AAGA;AACA;;;ACnDA;;;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;AAIA;;ACcA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Button/BaseButton.tsx","webpack://@freenow/wave/./src/components/Button/Button.tsx","webpack://@freenow/wave/./src/components/Grid/Grid.tsx","webpack://@freenow/wave/./src/components/Headline/Headline.tsx","webpack://@freenow/wave/./src/components/Link/Link.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant, width, WidthProps } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface BaseButtonProps extends ComponentPropsWithoutRef<'button'>, MarginProps, WidthProps {\n    /**\n     * Adjusts the size of the button\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            minWidth: '5rem',\n            padding: '0 0.75rem'\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            minWidth: '6.25rem',\n            padding: '0 1rem'\n        }\n    }\n});\n\n// \"svg path\" fill set to \"inherit\" to being able to transition using button variants\nconst BaseButton = styled.button.attrs({ theme })<BaseButtonProps>`\n    align-items: center;\n    background: transparent;\n    border-radius: ${get('radii.2')};\n    border: 0.0625rem solid transparent;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.semibold')};\n    justify-content: center;\n    text-align: center;\n    text-decoration: none;\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    svg path {\n        fill: inherit;\n    }\n\n    ${compose(margin, sizeVariant, width)}\n`;\n\nexport { BaseButton, BaseButtonProps };\n","import styled from 'styled-components';\nimport { ButtonStyleProps, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../essentials/theme';\n\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { BaseButton, BaseButtonProps } from './BaseButton';\nimport { ComponentSemanticTokens } from '../../essentials/Colors/types';\n\ntype Variant = 'primary' | 'secondary' | 'danger';\n\ninterface ButtonProps extends BaseButtonProps, ButtonStyleProps {\n    /**\n     * Define style of the button component, defaults to primary\n     */\n    variant?: ResponsiveValue<Variant>;\n}\n\nconst variantStyles = variant<ComponentSemanticTokens, Variant>({\n    variants: {\n        primary: {\n            color: getSemanticValue('foreground-on-background-primary'),\n            fill: getSemanticValue('foreground-on-background-primary'),\n            background: getSemanticValue('background-element-primary-default'),\n\n            '&:hover': {\n                color: getSemanticValue('foreground-on-background-accent'),\n                background: getSemanticValue('background-element-primary-emphasized')\n            },\n\n            '&:disabled': {\n                color: getSemanticValue('foreground-on-background-disabled'),\n                background: getSemanticValue('background-element-disabled-default')\n            }\n        },\n        secondary: {\n            color: getSemanticValue('foreground-primary'),\n            fill: getSemanticValue('foreground-primary'),\n            background: getSemanticValue('background-page-default'),\n            borderColor: getSemanticValue('border-neutral-default'),\n\n            '&:hover': {\n                color: getSemanticValue('foreground-on-background-neutral'),\n                background: getSemanticValue('background-element-neutral-emphasized')\n            },\n\n            '&:disabled': {\n                color: getSemanticValue('foreground-disabled'),\n                fill: getSemanticValue('foreground-disabled'),\n                background: getSemanticValue('transparent'),\n                borderColor: getSemanticValue('border-disabled')\n            }\n        },\n        danger: {\n            color: getSemanticValue('foreground-on-background-danger'),\n            fill: getSemanticValue('foreground-on-background-danger'),\n            background: getSemanticValue('background-element-danger-default'),\n\n            '&:hover': {\n                background: getSemanticValue('background-element-danger-emphasized')\n            },\n\n            '&:disabled': {\n                background: getSemanticValue('background-element-disabled-default'),\n                borderColor: getSemanticValue('border-disabled')\n            }\n        }\n    }\n});\n\nconst Button = styled(BaseButton).attrs({ theme })<ButtonProps>`\n    transition: background ease 200ms, border-color ease 200ms, color ease 200ms, fill ease 200ms;\n\n    ${variantStyles};\n`;\n\nButton.defaultProps = {\n    size: 'medium',\n    variant: 'primary'\n};\n\nexport { Button, ButtonProps };\n","import React, { FC, PropsWithChildren } from 'react';\nimport styled from 'styled-components';\nimport { Spaces } from '../../essentials/Spaces/Spaces';\nimport { Box, BoxProps } from '../Box/Box';\n\nconst AMOUNT_OF_DECIMALS = 4;\nconst COLUMN_WIDTH = 100 / 12;\nconst GAP = Spaces[3];\n\ntype ColumnOffset = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;\ntype ColumnSpan = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n\nconst BorderBoxWrapper = styled(Box)`\n    box-sizing: border-box;\n`;\n\ntype RowProps = BoxProps;\n\nconst Row: FC<PropsWithChildren<RowProps>> = props => (\n    <Box display=\"flex\" flexWrap=\"wrap\" marginRight={`-${GAP}`} {...props} />\n);\n\ninterface ColumnProps extends BoxProps {\n    span?: ColumnSpan;\n    offset?: ColumnOffset;\n}\n\nconst Column: FC<PropsWithChildren<ColumnProps>> = ({ span = 1, offset = 0, ...restProps }) => {\n    const marginLeft = offset * COLUMN_WIDTH;\n    const width = span * COLUMN_WIDTH;\n\n    return (\n        <BorderBoxWrapper\n            flex={`0 0 ${width.toFixed(AMOUNT_OF_DECIMALS)}%`}\n            marginLeft={marginLeft ? `${marginLeft.toFixed(AMOUNT_OF_DECIMALS)}%` : undefined}\n            paddingRight={GAP}\n            {...restProps}\n        />\n    );\n};\n\nexport { Row, RowProps, Column, ColumnProps };\n","import * as React from 'react';\nimport { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, system, MarginProps, textAlign, TextAlignProps, ResponsiveValue } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface HeadlineProps extends ComponentPropsWithoutRef<'h1'>, MarginProps, TextAlignProps {\n    /**\n     * Set the html tag for the headline including the appropriate styles\n     */\n    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n    /**\n     * Set the style of the headline\n     */\n    size?: ResponsiveValue<'xxl' | 'xl' | 'l' | 'm' | 's' | 'xs'>;\n}\n\nexport const DEFAULT_HEADLINE_SIZE = {\n    h1: 'xxl',\n    h2: 'xl',\n    h3: 'l',\n    h4: 'm',\n    h5: 's',\n    h6: 'xs'\n} as const;\n\nconst parser = system({\n    fontSize: {\n        property: 'fontSize',\n        defaultScale: {\n            xs: '0.75rem',\n            s: '0.875rem',\n            m: '1rem',\n            l: '1.5rem',\n            xl: '2rem',\n            xxl: '3rem'\n        }\n    },\n    lh: {\n        property: 'lineHeight',\n        defaultScale: {\n            xs: '1.125rem',\n            s: '1.25rem',\n            m: '1.375rem',\n            l: '2rem',\n            xl: '2.5rem',\n            xxl: '3.75rem'\n        }\n    }\n});\n\nconst getSize = ({ as = 'h1', size }: HeadlineProps): ResponsiveValue<'xxl' | 'xl' | 'l' | 'm' | 's' | 'xs'> =>\n    size || DEFAULT_HEADLINE_SIZE[as];\n\nconst Headline: React.FC<HeadlineProps> = styled.h1.attrs({ theme })<HeadlineProps>`\n    color: inherit;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.bold')};\n    margin: 0;\n\n    ${props => parser({ fontSize: getSize(props), lh: getSize(props), ...props })}\n    ${compose(margin, textAlign)}\n`;\n\nexport { Headline, HeadlineProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, fontSize, FontSizeProps, margin, MarginProps, textAlign, TextAlignProps } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'>, MarginProps, FontSizeProps, TextAlignProps {}\n\nconst Link = styled.a.attrs({ theme })<LinkProps>`\n    display: inline-block;\n    color: ${getSemanticValue('foreground-accent-default')};\n    cursor: pointer;\n    line-height: 1.4;\n    font-family: ${get('fonts.normal')};\n    font-size: ${get('fontSizes.2')};\n    font-weight: ${get('fontWeights.semibold')};\n    text-decoration: none;\n\n    &:link,\n    &:visited {\n        color: ${getSemanticValue('foreground-accent-default')};\n    }\n\n    &:hover,\n    &:active {\n        color: ${getSemanticValue('foreground-accent-emphasized')};\n        text-decoration: underline;\n    }\n\n    ${compose(margin, fontSize, textAlign)}\n`;\n\nexport { Link, LinkProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}