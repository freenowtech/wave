{"version":3,"file":"src-components-RadioButton-docs-RadioButton-storybook-mdx.6afe9627.iframe.bundle.js","mappings":";;AAWA;;;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;AAIA;;;;;;;;;;;;;ACXA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;AAWA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;;;;;;;;;;;;;;ACtDA;;;;;;;;AC8CA;;AAEA;;;;;;AAnCA;;;AAKA;;;AAKA;;;AAGA;AACA;;;AAKA;;AAEA;AACA;;;;;AAsBA;;;;;;;ACtDA;AAGA;ACwBA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Link/Link.tsx","webpack://@freenow/wave/./src/components/RadioButton/components/Checkmark.tsx","webpack://@freenow/wave/./src/components/RadioButton/components/TapArea.tsx","webpack://@freenow/wave/./src/components/RadioButton/components/LabelWrapper.tsx","webpack://@freenow/wave/./src/components/RadioButton/RadioButton.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, fontSize, FontSizeProps, margin, MarginProps, textAlign, TextAlignProps } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'>, MarginProps, FontSizeProps, TextAlignProps {}\n\nconst Link = styled.a.attrs({ theme })<LinkProps>`\n    display: inline-block;\n    color: ${getSemanticValue('foreground-accent-default')};\n    cursor: pointer;\n    line-height: 1.4;\n    font-family: ${get('fonts.normal')};\n    font-size: ${get('fontSizes.2')};\n    font-weight: ${get('fontWeights.semibold')};\n    text-decoration: none;\n\n    &:link,\n    &:visited {\n        color: ${getSemanticValue('foreground-accent-default')};\n    }\n\n    &:hover,\n    &:active {\n        color: ${getSemanticValue('foreground-accent-emphasized')};\n        text-decoration: underline;\n    }\n\n    ${compose(margin, fontSize, textAlign)}\n`;\n\nexport { Link, LinkProps };\n","import styled from 'styled-components';\nimport { getSemanticValue } from '../../../utils/cssVariables';\n\ninterface CheckmarkProps {\n    error?: boolean;\n}\n\nconst Checkmark = styled.input<CheckmarkProps>`\n    appearance: none;\n    outline: none;\n    border: 0;\n\n    position: relative;\n\n    width: 1rem;\n    height: 1rem;\n    padding: 0;\n    margin: 0;\n\n    background-color: ${getSemanticValue('background-page-default')};\n    box-shadow: inset 0 0 0 0.125rem\n        ${props => getSemanticValue(props.error ? 'border-danger-default' : 'border-neutral-default')};\n    border-radius: 50%;\n    transition: background-color 100ms, box-shadow 100ms;\n    cursor: pointer;\n\n    vertical-align: text-bottom;\n\n    &::after {\n        content: ' ';\n\n        width: 1rem;\n        height: 1rem;\n\n        position: absolute;\n\n        opacity: 0;\n        visibility: hidden;\n        transform: scale(0.2);\n        transition: visibility 175ms, opacity 150ms, scale 175ms;\n    }\n\n    &:checked {\n        box-shadow: inset 0 0 0 0.3125rem\n            ${props => getSemanticValue(props.error ? 'border-danger-default' : 'border-info-default')};\n\n        &::after {\n            opacity: 1;\n            visibility: visible;\n            transform: scale(1);\n        }\n    }\n\n    &:disabled {\n        cursor: not-allowed;\n        background-color: ${getSemanticValue('background-element-disabled-faded')};\n        box-shadow: inset 0 0 0 0.125rem ${getSemanticValue('background-element-disabled-faded')};\n\n        &:hover {\n            box-shadow: inset 0 0 0 0.125rem ${getSemanticValue('background-element-disabled-faded')};\n        }\n\n        &:active {\n            background-color: ${getSemanticValue('background-element-disabled-faded')};\n        }\n\n        &:checked {\n            box-shadow: inset 0 0 0 0.3125rem ${getSemanticValue('background-element-disabled-faded')};\n            background-color: ${getSemanticValue('background-page-default')};\n        }\n    }\n`;\n\nexport { Checkmark };\n","import styled from 'styled-components';\nimport { getSemanticValue } from '../../../utils/cssVariables';\n\nconst TapArea = styled.div`\n    position: absolute;\n    width: 1.75rem;\n    height: 1.75rem;\n    border-radius: 50%;\n    background-color: transparent;\n    top: -0.375rem;\n    left: -0.375rem;\n    transition: background-color 125ms;\n\n    &:active {\n        background-color: ${getSemanticValue('background-element-neutral-emphasized')};\n    }\n`;\n\nexport { TapArea };\n","import styled, { css } from 'styled-components';\nimport { compose, margin, MarginProps, variant } from 'styled-system';\n\nimport { getSemanticValue } from '../../../utils/cssVariables';\nimport { theme } from '../../../essentials/theme';\nimport { get } from '../../../utils/themeGet';\nimport { RadioButtonProps } from '../RadioButtonProps';\nimport { Checkmark } from './Checkmark';\nimport { TapArea } from './TapArea';\n\ninterface LabelWrapperProps extends MarginProps, Pick<RadioButtonProps, 'textVerticalAlign'> {\n    disabled?: boolean;\n    error?: boolean;\n}\n\nconst textVerticalAlignVariant = variant({\n    prop: 'textVerticalAlign',\n    variants: {\n        top: {\n            alignItems: 'flex-start'\n        },\n        center: {\n            alignItems: 'center'\n        }\n    }\n});\n\nconst hoverStyle = ({ disabled, error }: LabelWrapperProps) => {\n    if (disabled) {\n        return css`\n            cursor: not-allowed;\n\n            & ${/* sc-selector */ TapArea}:active {\n                background-color: transparent;\n            }\n        `;\n    }\n    return css`\n        cursor: pointer;\n\n        & ${/* sc-selector */ TapArea}:not(:active) {\n            background-color: ${getSemanticValue(\n                error ? 'background-element-danger-faded' : 'background-element-info-default'\n            )};\n        }\n\n        & ${/* sc-selector */ Checkmark}:not(:checked) {\n            box-shadow: inset 0 0 0 0.125rem\n                ${getSemanticValue(error ? 'border-danger-default' : 'border-info-default')};\n            background-color: ${getSemanticValue('background-page-default')};\n        }\n    `;\n};\n\nconst LabelWrapper = styled.label.attrs({ theme })<LabelWrapperProps>`\n    display: inline-flex;\n    align-items: center;\n    position: relative;\n    user-select: none;\n\n    color: ${props => getSemanticValue(props.disabled ? 'foreground-disabled' : 'foreground-primary')};\n\n    font-family: ${get('fonts.normal')};\n    line-height: 1;\n\n    gap: 0.5rem;\n\n    &:hover {\n        ${hoverStyle}\n    }\n\n    ${compose(margin, textVerticalAlignVariant)}\n`;\n\nexport { LabelWrapper };\n","import React, { FC, ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport { extractClassNameProps, extractWrapperMarginProps } from '../../utils/extractProps';\nimport { Text } from '../Text/Text';\n\nimport { Checkmark } from './components/Checkmark';\nimport { LabelWrapper } from './components/LabelWrapper';\nimport { TapArea } from './components/TapArea';\nimport { RadioButtonProps } from './RadioButtonProps';\n\nconst WithTapAreaWrapper = styled.div<Pick<RadioButtonProps, 'textVerticalAlign'>>`\n    width: 1rem;\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n\n    ${({ textVerticalAlign }) => (textVerticalAlign === 'top' ? 'margin-top: 0.1875rem' : undefined)}\n`;\n\nconst RadioButton: FC<RadioButtonProps> = ({ textVerticalAlign = 'center', ...props }: RadioButtonProps) => {\n    const { classNameProps, restProps: withoutClassName } = extractClassNameProps(props);\n    const { marginProps, restProps } = extractWrapperMarginProps(withoutClassName);\n    const { disabled, error, label, ...rest } = restProps;\n\n    let dynamicLabel: ReactNode = label;\n\n    if (typeof label === 'string') {\n        dynamicLabel = <Text>{label}</Text>;\n    }\n\n    return (\n        <LabelWrapper\n            disabled={disabled}\n            error={error}\n            textVerticalAlign={textVerticalAlign}\n            {...marginProps}\n            {...classNameProps}\n        >\n            <WithTapAreaWrapper textVerticalAlign={textVerticalAlign}>\n                <TapArea />\n                <Checkmark type=\"radio\" disabled={disabled} error={error} {...rest} />\n            </WithTapAreaWrapper>\n            {dynamicLabel}\n        </LabelWrapper>\n    );\n};\n\nexport { RadioButton };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}