{"version":3,"file":"components-experimental-Select-docs-Select-stories.939270d9.iframe.bundle.js","mappings":";;AA6BA;;;AAGA;;AAEA;AACA;;;;AAIA;;AAQA;;;;;;;;;;;;;;;;;;;AC/BA;AACA;;;ACVA;;;AAGA;AACA;AACA;;AAIA;;;;AAIA;AACA;;;AAGA;AACA;;AAEA;;;AAGA;;;AAGA;;AAEA;AACA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;;;AAGA;;;;;;;;;;ACpCA;AACA;;AAEA;;;AAGA;;AAIA;AACA;;;;;;;AASA;AACA;;;AAGA;AAGA;;AAEA;;ACvCA;;AAEA;;AAEA;;;;;;;AAOA;;;;ACZA;;;;;;;;ACIA;AAGA;;;;;AAKA;;;AAGA;;;;;AAKA;;;AAGA;;;ACvBA;;;;;AAKA;;;;;;;ACAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;AAKA;AACA;;;;;;;;;;;;AAcA;AC1CA;AACA;;;AAGA;;;;;;;AASA;;AAIA;;;;AC4CA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/Select/Select.tsx","webpack://@freenow/wave/./src/components/experimental/Field/Button.ts","webpack://@freenow/wave/./src/components/experimental/Field/FakeInput.ts","webpack://@freenow/wave/./src/components/experimental/Field/Field.ts","webpack://@freenow/wave/./src/components/experimental/Field/Footer.ts","webpack://@freenow/wave/./src/components/experimental/Field/InnerWrapper.ts","webpack://@freenow/wave/./src/components/experimental/Field/Label.ts","webpack://@freenow/wave/./src/components/experimental/Field/Wrapper.ts","webpack://@freenow/wave/./src/components/experimental/ListBox/ListBox.tsx","webpack://@freenow/wave/./src/components/experimental/Popover/Popover.tsx","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import React, { ReactElement, useState } from 'react';\nimport {\n    Select as BaseSelect,\n    SelectProps as BaseSelectProps,\n    SelectValue,\n    SelectStateContext,\n    FieldError\n} from 'react-aria-components';\nimport { useIsSSR } from 'react-aria';\nimport { useResizeObserver } from '@react-aria/utils';\nimport styled from 'styled-components';\nimport { Popover } from '../Popover/Popover';\nimport { ListBox } from '../ListBox/ListBox';\nimport { FakeInput } from '../Field/FakeInput';\nimport { Label } from '../Field/Label';\nimport { InnerWrapper } from '../Field/InnerWrapper';\nimport { FieldProps } from '../Field/Props';\nimport { Button } from '../Field/Button';\nimport { Footer } from '../Field/Footer';\nimport { Wrapper } from '../Field/Wrapper';\nimport DropdownSelectIcon from '../../../icons/arrows/DropdownSelectIcon';\nimport DropupSelectIcon from '../../../icons/arrows/DropupSelectIcon';\nimport { VisuallyHidden } from '../../VisuallyHidden/VisuallyHidden';\nimport { fieldStyles, fieldTextStyles } from '../Field/Field';\n\nconst StyledPopover = styled(Popover)`\n    overflow: auto;\n`;\n\nconst FakeButton = styled(FakeInput)`\n    cursor: pointer;\n\n    ${Button} {\n        text-align: start;\n        height: ${fieldTextStyles.lineHeight};\n        ${fieldStyles};\n    }\n\n    [slot='label'] {\n        ${fieldTextStyles};\n    }\n`;\n\ninterface SelectFieldProps extends Pick<FieldProps, 'label' | 'description' | 'errorMessage' | 'leadingIcon'> {\n    placeholder?: string;\n}\n\nconst SelectTrigger = React.forwardRef<HTMLDivElement, SelectFieldProps>(\n    ({ label, leadingIcon, placeholder }, forwardedRef) => {\n        const state = React.useContext(SelectStateContext);\n        const buttonRef = React.useRef<HTMLButtonElement>(null);\n\n        return (\n            <FakeButton\n                $isVisuallyFocused={state?.isOpen}\n                ref={forwardedRef}\n                onClick={() => buttonRef.current?.click()}\n            >\n                {leadingIcon}\n                <InnerWrapper>\n                    <Label $flying={Boolean(placeholder || state?.selectedItem)}>{label}</Label>\n                    <Button ref={buttonRef}>\n                        <SelectValue>\n                            {({ defaultChildren, isPlaceholder }) =>\n                                isPlaceholder\n                                    ? placeholder || <VisuallyHidden>{defaultChildren}</VisuallyHidden>\n                                    : defaultChildren\n                            }\n                        </SelectValue>\n                    </Button>\n                </InnerWrapper>\n                {state?.isOpen ? <DropupSelectIcon /> : <DropdownSelectIcon />}\n            </FakeButton>\n        );\n    }\n);\n\ninterface SelectProps<T extends Record<string, unknown>>\n    extends SelectFieldProps,\n        Omit<BaseSelectProps<T>, 'children'> {\n    items?: Iterable<T>;\n    children: React.ReactNode | ((item: T) => React.ReactNode);\n}\n\nfunction Select<T extends Record<string, unknown>>({\n    label,\n    children,\n    leadingIcon,\n    errorMessage,\n    description,\n    placeholder,\n    ...props\n}: SelectProps<T>): ReactElement {\n    const [menuWidth, setMenuWidth] = useState<string | null>(null);\n    const triggerRef = React.useRef<HTMLDivElement>(null);\n    const isSSR = useIsSSR();\n\n    const onResize = React.useCallback(() => {\n        if (triggerRef.current) {\n            const rect = triggerRef.current.getBoundingClientRect();\n            setMenuWidth(`${rect.width}px`);\n        }\n    }, []);\n\n    useResizeObserver({\n        ref: triggerRef,\n        onResize\n    });\n\n    return (\n        <BaseSelect<T> aria-label={label} {...props}>\n            {({ isInvalid }) => (\n                <>\n                    <Wrapper>\n                        <SelectTrigger\n                            ref={isSSR ? null : triggerRef}\n                            label={label}\n                            leadingIcon={leadingIcon}\n                            placeholder={placeholder}\n                        />\n                        <Footer>{isInvalid ? <FieldError>{errorMessage}</FieldError> : description}</Footer>\n                    </Wrapper>\n                    <StyledPopover\n                        triggerRef={triggerRef}\n                        style={{ '--trigger-width': menuWidth } as React.CSSProperties}\n                    >\n                        <ListBox items={props.items}>{children}</ListBox>\n                    </StyledPopover>\n                </>\n            )}\n        </BaseSelect>\n    );\n}\n\nexport { Select };\n","import styled from 'styled-components';\nimport { Button as BaseButton } from 'react-aria-components';\nimport { getSemanticValue } from '../../../essentials/experimental/cssVariables';\nimport { get } from '../../../utils/experimental/themeGet';\n\nexport const Button = styled(BaseButton)`\n    appearance: none;\n    background: none;\n    border: none;\n    display: flex;\n    margin: 0;\n    padding: 0;\n    cursor: pointer;\n    outline: 0;\n\n    &[data-focused] {\n        outline: ${getSemanticValue('interactive')} solid 0.125rem;\n        border-radius: ${get('radii.2')};\n    }\n`;\n","import styled, { css } from 'styled-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { flyingLabelStyles, Label } from './Label';\nimport { InnerWrapper } from './InnerWrapper';\n\nconst focusStyles = css`\n    outline: ${getSemanticValue('interactive')} solid 0.125rem;\n    outline-offset: -0.125rem;\n\n    ${Label} {\n        color: ${getSemanticValue('interactive')};\n        ${flyingLabelStyles}\n    }\n`;\n\nexport const FakeInput = styled.div<{ $isVisuallyFocused: boolean }>`\n    box-sizing: content-box;\n    cursor: text;\n\n    color: ${getSemanticValue('on-surface-variant')};\n    background-color: ${getSemanticValue('surface')};\n    border-width: 0.0625rem;\n    border-style: solid;\n    border-color: ${getSemanticValue('outline-variant')};\n    border-radius: ${get('radii.4')};\n\n    padding: ${get('space.2')} ${get('space.3')} ${get('space.2')} ${get('space.4')};\n    display: flex;\n    align-items: start;\n    gap: ${get('space.3')};\n\n    /* stylelint-disable selector-type-case, selector-type-no-unknown */\n    & > :not(${InnerWrapper}) {\n        flex-shrink: 0;\n        margin-top: ${get('space.2')};\n        color: ${getSemanticValue('on-surface-variant')};\n    }\n\n    &:hover {\n        border-color: ${getSemanticValue('outline')};\n        color: ${getSemanticValue('on-surface')};\n    }\n\n    &:focus-within {\n        ${focusStyles}\n    }\n\n    [data-invalid] & {\n        border-color: ${getSemanticValue('negative')};\n    }\n\n    ${props => props.$isVisuallyFocused && focusStyles}\n`;\n","import styled, { css } from 'styled-components';\nimport { DateInput as BaseDateInput, Input as BaseInput, TextArea as BaseTextArea } from 'react-aria-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { textStyles } from '../Text/Text';\n\nexport const fieldTextStyles = textStyles.variants.body1;\n\nexport const fieldStyles = css`\n    border: none;\n    background-color: unset;\n    outline: none;\n\n    display: block;\n    width: 100%;\n    padding: 0;\n\n    caret-color: ${getSemanticValue('interactive')};\n    color: ${getSemanticValue('on-surface')};\n\n    ${fieldTextStyles}\n\n    [data-placeholder] {\n        color: ${getSemanticValue('on-surface-variant')};\n    }\n`;\n\nexport const Input = styled(BaseInput)`\n    ${fieldStyles}\n\n    &[type='search'] {\n        &::-webkit-search-cancel-button {\n            display: none;\n        }\n    }\n`;\n\nexport const TextArea = styled(BaseTextArea).attrs({ rows: 1 })`\n    ${fieldStyles};\n\n    resize: none;\n    min-height: ${fieldTextStyles.lineHeight};\n`;\n\nexport const DateInput = styled(BaseDateInput)`\n    display: flex;\n    ${fieldTextStyles}\n`;\n","import styled from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { textStyles } from '../Text/Text';\n\nexport const Footer = styled.footer`\n    padding: ${get('space.1')} ${get('space.3')} ${get('space.0')};\n\n    color: ${getSemanticValue('on-surface-variant')};\n\n    ${textStyles.variants.label2}\n\n    &:empty {\n        display: none;\n    }\n\n    [data-invalid] & {\n        color: ${getSemanticValue('negative')};\n    }\n`;\n","import styled from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\n\nexport const InnerWrapper = styled.div`\n    width: 100%;\n    padding-top: ${get('space.4')};\n\n    position: relative;\n    overflow: hidden;\n`;\n","import { Label as BaseLabel } from 'react-aria-components';\nimport styled, { css } from 'styled-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { textStyles } from '../Text/Text';\n\nexport const flyingLabelStyles = css`\n    top: 0;\n    transform: translate3d(0, 0, 0);\n\n    ${textStyles.variants.label2}\n`;\n\nexport const Label = styled(BaseLabel)<{ $flying: boolean }>`\n    position: absolute;\n    top: 50%;\n    color: currentColor;\n\n    ${textStyles.variants.body1}\n    white-space: nowrap;\n\n    transform: translate3d(0, calc(-${textStyles.variants.body1.lineHeight} / 2), 0);\n    transform-origin: 0;\n\n    transition: top 200ms ease, font-size 200ms ease, transform 200ms ease;\n\n    ${props => props.$flying && flyingLabelStyles}\n\n    [data-invalid] & {\n        color: ${getSemanticValue('negative')};\n    }\n`;\n","import styled from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { FakeInput } from './FakeInput';\n\nexport const Wrapper = styled.div`\n    padding: ${get('space.2')} 0;\n\n    &:has([data-disabled]) {\n        opacity: 0.38;\n\n        ${FakeInput} {\n            pointer-events: none;\n        }\n    }\n`;\n","import React, { ReactElement } from 'react';\nimport { ListBox, ListBoxItem as BaseListBoxItem, ListBoxItemProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { Text, TextProps } from '../Text/Text';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\nconst StyledListBoxItem = styled(BaseListBoxItem)`\n    position: relative;\n    display: block;\n    padding: ${get('space.3')} ${get('space.4')};\n    border-radius: ${get('radii.4')};\n    color: ${getSemanticValue('on-surface')};\n\n    cursor: pointer;\n\n    &::before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n        bottom: 0;\n        content: '';\n        border-radius: inherit;\n        opacity: 0;\n        transition: opacity ease 200ms;\n    }\n\n    &[data-focused] {\n        outline: 0;\n    }\n\n    &[data-focus-visible] {\n        outline: ${getSemanticValue('interactive')} solid 0.125rem;\n        outline-offset: -0.125rem;\n    }\n\n    &[data-selected] {\n        color: ${getSemanticValue('on-interactive-container')};\n        background: ${getSemanticValue('interactive-container')};\n    }\n\n    &[data-hovered]::before {\n        opacity: 0.08;\n        background-color: currentColor;\n    }\n\n    &[data-disabled] {\n        opacity: 0.38;\n        cursor: default;\n    }\n`;\n\nfunction LabelText(props: TextProps): ReactElement {\n    return <Text slot=\"label\" variant=\"title2\" as=\"div\" {...props} />;\n}\n\nfunction DescriptionText(props: TextProps): ReactElement {\n    return <Text slot=\"description\" variant=\"body2\" as=\"div\" {...props} />;\n}\n\nfunction ListBoxItem(props: ListBoxItemProps): ReactElement {\n    if (typeof props.children === 'string') {\n        return (\n            <StyledListBoxItem textValue={props.children} {...props}>\n                <LabelText>{props.children}</LabelText>\n            </StyledListBoxItem>\n        );\n    }\n\n    return <StyledListBoxItem {...props}>{props.children}</StyledListBoxItem>;\n}\n\nexport { ListBox, ListBoxItem, LabelText, DescriptionText };\n","import React, { ReactElement } from 'react';\nimport { Dialog, DialogTrigger, Popover as BasePopover, PopoverProps as BasePopoverProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { get } from '../../../utils/experimental/themeGet';\n\ninterface PopoverProps extends Omit<BasePopoverProps, 'children'> {\n    children: React.ReactNode;\n}\n\nconst StyledPopover = styled(BasePopover)`\n    background: ${getSemanticValue('surface')};\n    padding: ${get('space.4')};\n    box-shadow: 0 2px 4px -1px hsla(0, 0%, 0%, 0.2), 0 1px 10px 0 hsla(0, 0%, 0%, 0.12),\n        0 4px 5px 0 hsla(0, 0%, 0%, 0.14);\n    border-radius: ${get('radii.4')};\n\n    &[data-trigger='Select'],\n    &[data-trigger='ComboBox'] {\n        box-sizing: border-box;\n        width: var(--trigger-width);\n    }\n`;\n\nconst FocusTrap = styled(Dialog)`\n    outline: 0;\n`;\n\nfunction Popover({ children, placement = 'bottom', offset = 8, ...props }: PopoverProps): ReactElement {\n    return (\n        <StyledPopover placement={placement} offset={offset} {...props}>\n            {children}\n        </StyledPopover>\n    );\n}\n\nexport { Popover, DialogTrigger as PopoverTrigger, FocusTrap };\n","import React from 'react';\nimport { Text as BaseText, TextContext, useContextProps, TextProps as BaseTextProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../../essentials/experimental';\n\ninterface TextProps extends BaseTextProps {\n    as?: React.ElementType;\n    variant?: ResponsiveValue<'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2'>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst variantStyles = variant(textStyles);\n\nconst StyledText = styled(BaseText).attrs({ theme })<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(variantStyles)}\n`;\n\nconst Text = React.forwardRef((textProps: TextProps, forwardedRef: React.ForwardedRef<HTMLElement>) => {\n    const [props, ref] = useContextProps(textProps, forwardedRef, TextContext);\n\n    return <StyledText {...props} variant={textProps.variant || 'body1'} ref={ref} />;\n});\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}