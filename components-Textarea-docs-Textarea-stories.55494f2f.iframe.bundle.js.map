{"version":3,"file":"components-Textarea-docs-Textarea-stories.55494f2f.iframe.bundle.js","mappings":";;;AA+CA;;AAEA;AACA;AACA;AA7CA;;;;;;AAoDA;;;AAGA;;;AAGA;AACA;;;;;AAKA;;;;;;;;AAQA;;;;ACvEA;AAGA;;;;;;;;;AANA;AAAA;AAAA;;ACIA;AACA;;AAEA;AACA;;AAIA;AAuBA;AACA;AACA;AAXA;AAaA;AACA;;;AAMA;;AAEA;AACA;;;;;;;;AAQA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;AC7DA;;AAEA;AACA;AAGA;AAmBA;;;;;;;;ACNA;AAGA;;;;;AAOA;AAgCA","sources":["webpack://@freenow/wave/./src/components/Input/BaseInput.ts","webpack://@freenow/wave/./src/components/Input/BaseInputLabel.tsx","webpack://@freenow/wave/./src/components/Input/BoxedInput.ts","webpack://@freenow/wave/./src/components/Input/BoxedInputLabel.ts","webpack://@freenow/wave/./src/components/Textarea/Textarea.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { compose, variant, width } from 'styled-system';\nimport { get } from '../../utils/themeGet';\nimport { InputProps } from './InputProps';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\nconst ANIMATION_DURATION = 100;\n\nconst sizeVariant = variant<Record<string, unknown>, 'small' | 'medium'>({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1')\n        },\n        medium: {\n            fontSize: get('fontSizes.2')\n        }\n    }\n});\n\nconst inputVariants = variant({\n    variants: {\n        boxed: {\n            borderRadius: get('radii.2'),\n            border: `0.0625rem solid ${getSemanticValue('border-neutral-default')}`,\n            '&:active, &:focus': {\n                borderColor: getSemanticValue('border-focus'),\n                boxShadow: `inset 0 0 0 0.0625rem ${getSemanticValue('border-focus')}`\n            }\n        },\n        'bottom-lined': {\n            border: 'none',\n            borderTopLeftRadius: get('radii.1'),\n            borderTopRightRadius: get('radii.1'),\n            borderBottom: `0.0625rem solid ${getSemanticValue('border-neutral-default')}`,\n\n            '&:active, &:focus': {\n                borderColor: getSemanticValue('border-focus'),\n                boxShadow: `inset 0 -0.0625rem 0 0 ${getSemanticValue('border-focus')}`\n            }\n        }\n    }\n});\n\nconst BaseInput = styled.input<InputProps>`\n    margin: 0;\n    box-sizing: border-box;\n    background: ${getSemanticValue('background-page-default')};\n    border-radius: 0;\n    color: ${getSemanticValue('foreground-primary')};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    transition: box-shadow ${ANIMATION_DURATION}ms, border ${ANIMATION_DURATION}ms;\n    outline: none;\n    appearance: none;\n    width: 100%;\n\n    &::placeholder {\n        color: ${getSemanticValue('foreground-neutral-default')};\n    }\n\n    ${compose(width, sizeVariant, inputVariants)};\n\n    &:disabled {\n        color: ${getSemanticValue('foreground-disabled')};\n        border-color: ${getSemanticValue('border-disabled')};\n        box-shadow: none;\n        cursor: not-allowed;\n\n        &::placeholder {\n            color: ${getSemanticValue('foreground-disabled')};\n        }\n    }\n\n    &:-webkit-autofill,\n    &:-webkit-autofill:hover,\n    &:-webkit-autofill:focus,\n    &:-webkit-autofill:active {\n        -webkit-text-fill-color: ${getSemanticValue('foreground-primary')};\n        transition: background-color 99999999ms ease 99999999ms;\n    }\n`;\n\nexport { BaseInput };\n","import styled, { css } from 'styled-components';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\nconst ANIMATION_DURATION = 100;\n\nconst activePositionBaseStyles = css`\n    font-weight: ${get('fontWeights.semibold')};\n`;\n\nconst BaseInputLabel = styled.label.attrs({ theme })`\n    position: absolute;\n    pointer-events: none;\n    background-color: transparent;\n    line-height: 1.5;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    max-width: calc(100% - 2rem);\n    transition: top ${ANIMATION_DURATION}ms ease-out, left ${ANIMATION_DURATION}ms ease-out,\n        padding ${ANIMATION_DURATION}ms ease-out, font-size ${ANIMATION_DURATION}ms ease-out,\n        color ${ANIMATION_DURATION}ms ease-out, background ${ANIMATION_DURATION}ms ease-out;\n`;\n\nexport { BaseInputLabel, activePositionBaseStyles };\n","import styled, { css } from 'styled-components';\nimport { variant } from 'styled-system';\nimport { BaseInput } from './BaseInput';\nimport { activeBoxedPosition, BoxedInputLabel } from './BoxedInputLabel';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { InternalInputProps } from './InputProps';\n\nconst errorStyles = css`\n    box-shadow: inset 0 0 0 0.0625rem ${getSemanticValue('border-danger-default')};\n    border-color: ${getSemanticValue('border-danger-default')};\n\n    & ~ ${BoxedInputLabel} {\n        color: ${getSemanticValue('foreground-danger-default')};\n    }\n`;\n\nconst sizeVariant = variant({\n    prop: 'waveSize',\n    variants: {\n        small: {\n            height: '2rem',\n            padding: '0 0.5rem'\n        },\n        medium: {\n            height: '3rem',\n            padding: '0 0.75rem'\n        }\n    }\n});\n\nconst getLabelColor = ({ hasValue }: InternalInputProps) => {\n    if (hasValue) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    return getSemanticValue('foreground-neutral-default');\n};\n\nconst BoxedInput = styled(BaseInput)<InternalInputProps>`\n    ${sizeVariant}\n    & + ${BoxedInputLabel} {\n        ${p => (p.hasValue || p.placeholder ? activeBoxedPosition(p.waveSize) : undefined)};\n        color: ${getLabelColor};\n        background: ${getSemanticValue('background-page-default')};\n        background: ${p =>\n            `linear-gradient(0deg, \n            ${getSemanticValue('background-page-default')} \n            calc(50% + ${p.waveSize === 'small' ? '0.0825rem' : '0.0625rem'}), transparent 50%)`};\n    }\n\n    ${p => (p.error ? errorStyles : undefined)}\n    &:disabled {\n        & + ${BoxedInputLabel} {\n            color: ${getSemanticValue('foreground-disabled')};\n        }\n    }\n\n    &:-webkit-autofill,\n    &:-webkit-autofill:hover,\n    &:-webkit-autofill:focus,\n    &:-webkit-autofill:active {\n        & + ${BoxedInputLabel} {\n            ${p => activeBoxedPosition(p.waveSize)};\n        }\n    }\n\n    &:focus:not(:disabled) {\n        & + ${BoxedInputLabel} {\n            ${p => activeBoxedPosition(p.waveSize)};\n            color: ${getSemanticValue('foreground-focus')};\n            background: ${getSemanticValue('background-page-default')};\n            background: ${p =>\n                `linear-gradient(0deg, \n                ${getSemanticValue('background-page-default')} \n                calc(50% + ${p.waveSize === 'small' ? '0.0825rem' : '0.0625rem'}), transparent 50%)`};\n        }\n    }\n`;\n\nexport { BoxedInput };\n","import styled, { css, Interpolation, ThemeProps } from 'styled-components';\nimport { variant } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { activePositionBaseStyles, BaseInputLabel } from './BaseInputLabel';\nimport { InternalInputProps } from './InputProps';\n\nconst activeBoxedPosition = (\n    size: InternalInputProps['waveSize']\n): ReadonlyArray<Interpolation<ThemeProps<unknown>>> => css`\n    ${activePositionBaseStyles};\n\n    top: ${size === 'small' ? '-0.375rem' : '-0.5rem'};\n    font-size: ${size === 'small' ? '0.625rem' : get('fontSizes.0')};\n`;\n\nconst sizeVariant = variant({\n    prop: 'waveSize',\n    variants: {\n        small: {\n            top: '0.5rem',\n            left: '0.375rem',\n            padding: '0 0.125rem',\n            fontSize: get('fontSizes.1')\n        },\n        medium: {\n            top: '0.75rem',\n            left: '0.5rem',\n            padding: '0 0.25rem',\n            fontSize: get('fontSizes.2')\n        }\n    }\n});\n\nconst BoxedInputLabel = styled(BaseInputLabel).attrs({ theme })<Pick<InternalInputProps, 'waveSize'>>`\n    ${sizeVariant};\n`;\n\nexport { activeBoxedPosition, BoxedInputLabel };\n","import React, { ComponentPropsWithoutRef, FC, useEffect, useState } from 'react';\nimport styled, { CSSProperties } from 'styled-components';\n\nimport { compose, height, HeightProps, margin, MarginProps, ResponsiveValue, width, WidthProps } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport {\n    extractClassNameProps,\n    extractHeightProps,\n    extractWidthProps,\n    extractWrapperMarginProps\n} from '../../utils/extractProps';\nimport { useGeneratedId } from '../../utils/hooks/useGeneratedId';\nimport { BoxedInput } from '../Input/BoxedInput';\nimport { BoxedInputLabel } from '../Input/BoxedInputLabel';\nimport { InternalInputProps } from '../Input/InputProps';\n\ntype WrapperProps = MarginProps &\n    WidthProps &\n    HeightProps & {\n        className?: string;\n    };\n\nconst TextAreaWrapper: FC<WrapperProps> = styled.div.attrs({ theme })`\n    display: inline-block;\n    position: relative;\n    box-sizing: border-box;\n    width: 21.5rem;\n    height: 7.25rem;\n\n    ${compose(margin, height, width)}\n`;\n\nconst TextareaField: FC<TextAreaProps & Pick<InternalInputProps, 'hasValue'>> = styled(BoxedInput).attrs({\n    as: 'textarea'\n})<TextAreaProps>`\n    height: 100%;\n    padding: 0.75rem;\n    overflow: auto;\n\n    resize: ${p => p.resize};\n`;\n\n// TODO looks like neither variant nor size props are used\ninterface TextAreaProps\n    extends WrapperProps,\n        Omit<ComponentPropsWithoutRef<'textarea'>, 'size' | 'width'>,\n        Pick<CSSProperties, 'resize'> {\n    /**\n     * Sets the variant of the textarea\n     * @default 'boxed'\n     */\n    variant?: ResponsiveValue<'boxed' | 'bottom-lined'>;\n    /**\n     * Sets the size of the input\n     * @default 'medium'\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n    /**\n     * Sets the input label\n     */\n    label?: string;\n    /**\n     * Sets the input placeholder\n     */\n    placeholder?: string;\n    /**\n     * Shows the error state\n     */\n    error?: boolean;\n}\n\nconst Textarea: FC<WrapperProps & TextAreaProps> = ({ resize = 'both', ...props }: TextAreaProps) => {\n    const { classNameProps, restProps: withoutClassName } = extractClassNameProps(props);\n    const { marginProps, restProps: withoutMargin } = extractWrapperMarginProps(withoutClassName);\n    const { widthProps, restProps: withoutWidth } = extractWidthProps(withoutMargin);\n    const { heightProps, restProps } = extractHeightProps(withoutWidth);\n\n    const { label, onChange, ...rest } = restProps;\n    const id = useGeneratedId(props.id);\n\n    const [hasValue, setHasValue] = useState(rest.value && rest.value.toString().length > 0);\n\n    const handleChange = event => {\n        if (onChange) {\n            onChange(event);\n        }\n    };\n\n    useEffect(() => {\n        setHasValue(rest.value && rest.value.toString().length > 0);\n    }, [rest.value]);\n\n    return (\n        <TextAreaWrapper {...classNameProps} {...marginProps} {...widthProps} {...heightProps}>\n            <TextareaField\n                {...rest}\n                resize={resize}\n                id={id}\n                variant=\"boxed\"\n                size=\"medium\"\n                hasValue={hasValue}\n                onChange={handleChange}\n            />\n            {label && (\n                <BoxedInputLabel htmlFor={id} waveSize=\"medium\">\n                    {label}\n                </BoxedInputLabel>\n            )}\n        </TextAreaWrapper>\n    );\n};\n\nexport { Textarea, TextAreaProps };\n"],"names":[],"sourceRoot":""}