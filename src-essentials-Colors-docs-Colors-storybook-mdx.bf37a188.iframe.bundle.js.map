{"version":3,"file":"src-essentials-Colors-docs-Colors-storybook-mdx.bf37a188.iframe.bundle.js","mappings":";AAmCA;AACA;;;;;;;;;AASA;AAGA;ACpCA;AACA;;;;;AAKA;;;;AAIA;;;AAGA;AAGA;ACbA;AACA;AACA;AACA;;;;;;AAMA;;;;AAIA;;;AAGA;AAGA;;ACbA;;;;AAIA;;;AAGA;AA0BA;;;AApBA;;;;;AAKA;;;;;AAKA;;;AAGA;AASA;;AAKA;;;AAGA;AAIA;;;;;;;ACzCA;;;AAKA;AACA;AACA;;AAIA","sources":["webpack://@freenow/wave/./src/components/Table/components/Table.tsx","webpack://@freenow/wave/./src/components/Table/components/TableCell.tsx","webpack://@freenow/wave/./src/components/Table/components/TableHeaderCell.tsx","webpack://@freenow/wave/./src/components/Table/components/TableRow.tsx","webpack://@freenow/wave/./src/essentials/Colors/docs/SemanticColorsTable.tsx"],"sourcesContent":["import React, { ComponentPropsWithoutRef, FC } from 'react';\nimport styled, { StyledComponent } from 'styled-components';\nimport { compose, height, HeightProps, margin, MarginProps, width, WidthProps } from 'styled-system';\nimport { theme } from '../../../essentials/theme';\nimport { get } from '../../../utils/themeGet';\nimport { TableContext } from '../context/TableContext';\nimport { getColumnSpace } from '../util/getColumnSpace';\nimport { getRowSize } from '../util/getRowSize';\n\ninterface TableElementProps\n    extends MarginProps,\n        HeightProps,\n        WidthProps,\n        // do not include width property from the `<table>` tag type because styled-system provides its own\n        Omit<ComponentPropsWithoutRef<'table'>, 'width'> {}\n\ninterface TableProps extends TableElementProps {\n    /**\n     * Row style (background colors, borders, etc.)\n     * @default lines\n     */\n    rowStyle: 'lines' | 'zebra' | 'blank';\n    /**\n     * The height of the table rows. More info on [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/height)\n     */\n    rowSize?: 'large' | 'normal' | 'small' | string;\n    /**\n     * The space between columns of the table (any CSS value will be divided by 2 using `calc`)\n     */\n    columnSpace?: 'normal' | 'small' | string;\n}\n\nconst TableElement: StyledComponent<FC<TableElementProps>, typeof theme> = styled.table.attrs({\n    theme\n})<TableElementProps>`\n    font-size: ${get('fontSizes.1')};\n    font-family: ${get('fonts.normal')};\n    border-collapse: collapse;\n    border-spacing: 0;\n    box-sizing: border-box;\n\n    thead tr:hover {\n        background-color: inherit;\n    }\n\n    ${compose(margin, width, height)}\n`;\n\nconst Table: FC<TableProps> = ({\n    children,\n    rowStyle,\n    rowSize = 'normal',\n    columnSpace = 'normal',\n    ...props\n}: TableProps) => {\n    const context = {\n        columnSpace: getColumnSpace(columnSpace),\n        rowSize: getRowSize(rowSize),\n        rowStyle\n    };\n\n    return (\n        <TableElement {...props}>\n            <TableContext.Provider value={context}>{children}</TableContext.Provider>\n        </TableElement>\n    );\n};\n\nexport { Table, TableElement, TableProps };\n","import React, { ComponentPropsWithoutRef, FC, useContext } from 'react';\nimport styled from 'styled-components';\nimport { compose, LayoutProps, textAlign, TextAlignProps, layout } from 'styled-system';\nimport { TableContext } from '../context/TableContext';\nimport { TableProps } from './Table';\n\ntype TableCellProps = Pick<TableProps, 'rowSize' | 'columnSpace'> &\n    ComponentPropsWithoutRef<'td'> &\n    TextAlignProps &\n    LayoutProps;\n\nconst TableCellElement = styled.td<TableCellProps>`\n    height: ${p => p.rowSize};\n    padding: 0 calc(${p => p.columnSpace} / 2);\n    vertical-align: middle;\n    white-space: nowrap;\n\n    &:first-child {\n        padding-left: ${p => p.columnSpace};\n    }\n\n    &:last-child {\n        padding-right: ${p => p.columnSpace};\n    }\n\n    ${compose(textAlign, layout)}\n`;\n\nconst TableCell: FC<TableCellProps> = (props: TableCellProps) => {\n    const { rowSize, columnSpace } = useContext(TableContext);\n\n    return <TableCellElement rowSize={rowSize} columnSpace={columnSpace} {...props} />;\n};\n\nexport { TableCell, TableCellProps };\n","import React, { ComponentPropsWithoutRef, FC, useContext } from 'react';\nimport styled from 'styled-components';\nimport { compose, LayoutProps, textAlign, TextAlignProps, layout } from 'styled-system';\nimport { getSemanticValue } from '../../../utils/cssVariables';\nimport { theme } from '../../../essentials/theme';\nimport { get } from '../../../utils/themeGet';\nimport { TableContext } from '../context/TableContext';\nimport { TableProps } from './Table';\n\ntype TableHeaderCellProps = Pick<TableProps, 'rowSize' | 'columnSpace'> &\n    ComponentPropsWithoutRef<'th'> &\n    TextAlignProps &\n    LayoutProps;\n\nconst TableHeaderCellElement = styled.th.attrs({ theme })<TableHeaderCellProps>`\n    border-bottom: 0.0625rem solid ${getSemanticValue('border-neutral-emphasized')} !important;\n    font-weight: ${get('fontWeights.bold')};\n    height: ${p => p.rowSize};\n    padding: 0 calc(${p => p.columnSpace} / 2);\n    text-align: left;\n    vertical-align: middle;\n    white-space: nowrap;\n\n    &:first-child {\n        padding-left: ${p => p.columnSpace};\n    }\n\n    &:last-child {\n        padding-right: ${p => p.columnSpace};\n    }\n\n    ${compose(textAlign, layout)}\n`;\n\nconst TableHeaderCell: FC<TableHeaderCellProps> = (props: TableHeaderCellProps) => {\n    const { rowSize, columnSpace } = useContext(TableContext);\n\n    return <TableHeaderCellElement rowSize={rowSize} columnSpace={columnSpace} {...props} />;\n};\n\nexport { TableHeaderCell, TableHeaderCellProps };\n","import React, { ComponentPropsWithoutRef, FC, useContext } from 'react';\nimport styled, { css } from 'styled-components';\nimport { TableContext } from '../context/TableContext';\nimport { TableProps } from './Table';\nimport { getSemanticValue } from '../../../utils/cssVariables';\n\ntype TableRowProps = ComponentPropsWithoutRef<'tr'> & {\n    /**\n     * Show active state styling on the row\n     * @default false\n     */\n    active?: boolean;\n    /**\n     * Show the hover state styling on the row\n     * @default true\n     */\n    hover?: boolean;\n};\n\nconst zebraStyles = (active, hover) => css`\n    &:nth-child(even) {\n        background-color: hsla(${getSemanticValue('background-surface-neutral-faded-hsl')}, 0.3);\n    }\n\n    &:hover {\n        ${hover ? `background-color: ${getSemanticValue('background-surface-info-faded')}` : ''};\n    }\n\n    ${active ? `background-color: ${getSemanticValue('background-surface-info-active')} !important` : ''};\n`;\n\nconst linesStyles = (active, hover) => css`\n    td,\n    th {\n        border-bottom: 0.0625rem solid ${getSemanticValue('border-neutral-default')};\n    }\n\n    &:first-of-type {\n        th {\n            border-bottom: 0.0625rem solid ${getSemanticValue('border-neutral-emphasized')};\n        }\n    }\n\n    &:hover {\n        ${hover ? `background-color: ${getSemanticValue('background-surface-neutral-faded')};` : ''}\n    }\n\n    ${active ? `background-color: ${getSemanticValue('background-surface-info-faded')} !important` : ''};\n`;\n\nconst TableRowElement = styled.tr<TableRowProps & Pick<TableProps, 'rowStyle'>>(\n    ({ rowStyle, active, hover = true }) => {\n        switch (rowStyle) {\n            case 'zebra':\n                return zebraStyles(active, hover);\n            case 'lines':\n                return linesStyles(active, hover);\n            case 'blank':\n            default:\n                return css`\n                    &:hover {\n                        ${hover ? `background-color: ${getSemanticValue('background-surface-neutral-faded')}` : ''};\n                    }\n\n                    ${active\n                        ? `background-color: ${getSemanticValue('background-surface-info-faded')} !important`\n                        : ''};\n                `;\n        }\n    }\n);\n\nconst TableRow: FC<TableRowProps> = (props: TableRowProps) => {\n    const { rowStyle } = useContext(TableContext);\n\n    return <TableRowElement rowStyle={rowStyle} {...props} />;\n};\n\nexport { TableRow, TableRowProps };\n","import { DocsContext } from '@storybook/blocks';\n\nimport React, { FC, useContext, useMemo, useState } from 'react';\nimport { useDarkMode } from 'storybook-dark-mode';\nimport styled from 'styled-components';\nimport { Box, DarkScheme, Input, LightScheme, Table, TableCell, TableHeaderCell, TableRow } from '../../../components';\nimport { applyPrefix, generateCssVariableEntries, getSemanticValue } from '../../../utils/cssVariables';\nimport {\n    Colors as ClassicColors,\n    SemanticColors as ClassicSemanticTokens,\n    SemanticColorsDarkSchema as ClassicDarkSemanticTokens\n} from '../Colors';\nimport {\n    Colors as ModernColors,\n    SemanticColors as ModernSemanticTokens,\n    SemanticColorsDarkSchema as ModernDarkSemanticTokens\n} from '../ModernColors';\n\nconst CenteredTableCell = styled(TableCell)`\n    text-align: center;\n    width: 1%; /* Hack to make width as small as possible while respecting table-layout: auto */\n\n    &:first-child {\n        padding-left: 1rem;\n    }\n`;\n\nconst BlockContainer = styled.div`\n    width: 4rem;\n    margin: auto !important;\n`;\n\nconst ColorBlock = styled.div<{ token: string }>`\n    background-color: var(${p => p.token});\n    border: 0.0625rem solid ${getSemanticValue('border-neutral-default')};\n    height: 1.5rem;\n`;\n\nconst Tokens = {\n    s: {\n        light: {\n            classic: ClassicSemanticTokens,\n            modern: ModernSemanticTokens\n        },\n        dark: {\n            classic: ClassicDarkSemanticTokens,\n            modern: ModernDarkSemanticTokens\n        }\n    },\n    b: {\n        light: {\n            classic: ClassicColors,\n            modern: ModernColors\n        },\n        dark: {\n            classic: ClassicColors,\n            modern: ModernColors\n        }\n    }\n} as const;\n\nexport const CssVariablesTable: FC<{ tier: 'b' | 's' }> = ({ tier }) => {\n    const [nameSearchInput, setNameSearchInput] = useState('');\n    const isDark = useDarkMode();\n    const {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        store: { globals }\n    } = useContext(DocsContext);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    const { theme } = globals.get();\n    const tokens = Tokens[tier][isDark ? 'dark' : 'light'][theme];\n    const invertedSchemeTokens = Tokens[tier][isDark ? 'light' : 'dark'][theme];\n\n    const entries = useMemo(() => {\n        const schemeEntries = generateCssVariableEntries(tokens);\n        const invertedSchemeEntries = generateCssVariableEntries(invertedSchemeTokens);\n\n        return schemeEntries.map(({ value, variable }, i) => ({\n            value,\n            variable,\n            invertedValue: invertedSchemeEntries[i].value\n        }));\n    }, [tokens, invertedSchemeTokens]);\n\n    const filteredTokens = !nameSearchInput\n        ? entries\n        : entries.filter(({ variable }) => variable.includes(nameSearchInput.toLowerCase().trim()));\n\n    return (\n        <Table rowStyle=\"lines\" width=\"100%\" rowSize=\"small\">\n            <thead>\n                <TableRow>\n                    <TableHeaderCell>Color</TableHeaderCell>\n                    <TableHeaderCell>Inverted Color</TableHeaderCell>\n                    <TableHeaderCell>\n                        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                            Name\n                            <Input\n                                placeholder=\"Filter\"\n                                size=\"small\"\n                                value={nameSearchInput}\n                                onChange={e => setNameSearchInput(e.target.value)}\n                            />\n                        </Box>\n                    </TableHeaderCell>\n                </TableRow>\n            </thead>\n            <tbody>\n                {filteredTokens.map(({ variable, value, invertedValue }) => {\n                    const token = applyPrefix(variable, tier);\n\n                    return (\n                        <TableRow key={variable}>\n                            <CenteredTableCell>\n                                <BlockContainer>\n                                    <ColorBlock token={token} />\n                                </BlockContainer>\n                                <code>{value}</code>\n                            </CenteredTableCell>\n                            <CenteredTableCell>\n                                <BlockContainer>\n                                    {isDark ? (\n                                        <LightScheme>\n                                            <ColorBlock token={token} />\n                                        </LightScheme>\n                                    ) : (\n                                        <DarkScheme>\n                                            <ColorBlock token={token} />\n                                        </DarkScheme>\n                                    )}\n                                </BlockContainer>\n                                <code>{invertedValue}</code>\n                            </CenteredTableCell>\n                            <TableCell>\n                                <code>{variable}</code>\n                            </TableCell>\n                        </TableRow>\n                    );\n                })}\n            </tbody>\n        </Table>\n    );\n};\n"],"names":[],"sourceRoot":""}