{"version":3,"file":"src-components-Skeleton-docs-Skeleton-storybook-mdx.1a490746.iframe.bundle.js","mappings":";;AAWA;;;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;AAIA;;;;;ACnBA;;;;;;;;;;;;;;;;;AAiBA;;;AAaA;;;;;;AAMA;AACA;;AAEA;;AAEA;;ACRA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Link/Link.tsx","webpack://@freenow/wave/./src/components/Skeleton/Skeleton.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, fontSize, FontSizeProps, margin, MarginProps, textAlign, TextAlignProps } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'>, MarginProps, FontSizeProps, TextAlignProps {}\n\nconst Link = styled.a.attrs({ theme })<LinkProps>`\n    display: inline-block;\n    color: ${getSemanticValue('foreground-accent-default')};\n    cursor: pointer;\n    line-height: 1.4;\n    font-family: ${get('fonts.normal')};\n    font-size: ${get('fontSizes.2')};\n    font-weight: ${get('fontWeights.semibold')};\n    text-decoration: none;\n\n    &:link,\n    &:visited {\n        color: ${getSemanticValue('foreground-accent-default')};\n    }\n\n    &:hover,\n    &:active {\n        color: ${getSemanticValue('foreground-accent-emphasized')};\n        text-decoration: underline;\n    }\n\n    ${compose(margin, fontSize, textAlign)}\n`;\n\nexport { Link, LinkProps };\n","import styled, { css, keyframes } from 'styled-components';\nimport { borderRadius, BorderRadiusProps, compose, layout, LayoutProps, margin, MarginProps } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { get } from '../../utils/themeGet';\n\nconst shimmerAnimation = keyframes`\n    100% {\n        transform: translateX(100%);\n    }\n`;\n\nconst animationStyles = css`\n    &::after {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        transform: translateX(-75%);\n        background-image: linear-gradient(\n            90deg,\n            rgba(255, 255, 255, 0) 25%,\n            rgba(255, 255, 255, 0.5) 37%,\n            rgba(255, 255, 255, 0) 63%\n        );\n        background-repeat: no-repeat;\n        content: '';\n\n        animation: ${shimmerAnimation} 1600ms ease infinite;\n        animation-delay: 200ms;\n    }\n`;\n\nexport interface SkeletonProps extends LayoutProps, MarginProps, BorderRadiusProps {\n    /**\n     * Show skeleton animation\n     * @default false\n     */\n    animated?: boolean;\n}\n\nexport const Skeleton = styled.span<SkeletonProps>`\n    display: inline-block;\n    height: 1rem;\n    width: 100%;\n    position: relative;\n    overflow: hidden;\n    border-radius: ${get('radii.2')};\n    background-color: ${getSemanticValue('background-surface-neutral-faded')};\n\n    ${compose(layout, margin, borderRadius)};\n\n    ${p => (p.animated ? animationStyles : undefined)}\n`;\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}