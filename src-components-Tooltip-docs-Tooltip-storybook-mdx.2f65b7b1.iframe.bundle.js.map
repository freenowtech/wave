{"version":3,"file":"src-components-Tooltip-docs-Tooltip-storybook-mdx.2f65b7b1.iframe.bundle.js","mappings":";;;;;;;;;;;;AAmBA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;AAWA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;;;;;;;;;;;;;;ACtDA;;;;;;;;AC8CA;;AAEA;;;;;;AAnCA;;;AAKA;;;AAKA;;;AAGA;AACA;;;AAKA;;AAEA;AACA;;;;;AAsBA;;;;;;;ACtDA;AAGA;ACwBA;AAoBA;AACA;;;;AAIA;;;;;;;;;AC9CA;;AAmEA;AACA;AACA;;AAEA;;AAEA;;;;;;;AAOA;;;;;;;;;;;;AAcA;;;AAGA;;AAoBA;ACnIA;AACA;;;;;;;;AAUA;;;;AAMA;;;;AAIA;;;AAGA;;;AAKA","sources":["webpack://@freenow/wave/./src/components/RadioButton/components/Checkmark.tsx","webpack://@freenow/wave/./src/components/RadioButton/components/TapArea.tsx","webpack://@freenow/wave/./src/components/RadioButton/components/LabelWrapper.tsx","webpack://@freenow/wave/./src/components/RadioButton/RadioButton.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx","webpack://@freenow/wave/./src/components/Tooltip/Tooltip.tsx","webpack://@freenow/wave/./src/components/Tooltip/docs/TooltipPlacementExample.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { getSemanticValue } from '../../../utils/cssVariables';\n\ninterface CheckmarkProps {\n    error?: boolean;\n}\n\nconst Checkmark = styled.input<CheckmarkProps>`\n    appearance: none;\n    outline: none;\n    border: 0;\n\n    position: relative;\n\n    width: 1rem;\n    height: 1rem;\n    padding: 0;\n    margin: 0;\n\n    background-color: ${getSemanticValue('background-page-default')};\n    box-shadow: inset 0 0 0 0.125rem\n        ${props => getSemanticValue(props.error ? 'border-danger-default' : 'border-neutral-default')};\n    border-radius: 50%;\n    transition: background-color 100ms, box-shadow 100ms;\n    cursor: pointer;\n\n    vertical-align: text-bottom;\n\n    &::after {\n        content: ' ';\n\n        width: 1rem;\n        height: 1rem;\n\n        position: absolute;\n\n        opacity: 0;\n        visibility: hidden;\n        transform: scale(0.2);\n        transition: visibility 175ms, opacity 150ms, scale 175ms;\n    }\n\n    &:checked {\n        box-shadow: inset 0 0 0 0.3125rem\n            ${props => getSemanticValue(props.error ? 'border-danger-default' : 'border-info-default')};\n\n        &::after {\n            opacity: 1;\n            visibility: visible;\n            transform: scale(1);\n        }\n    }\n\n    &:disabled {\n        cursor: not-allowed;\n        background-color: ${getSemanticValue('background-element-disabled-faded')};\n        box-shadow: inset 0 0 0 0.125rem ${getSemanticValue('background-element-disabled-faded')};\n\n        &:hover {\n            box-shadow: inset 0 0 0 0.125rem ${getSemanticValue('background-element-disabled-faded')};\n        }\n\n        &:active {\n            background-color: ${getSemanticValue('background-element-disabled-faded')};\n        }\n\n        &:checked {\n            box-shadow: inset 0 0 0 0.3125rem ${getSemanticValue('background-element-disabled-faded')};\n            background-color: ${getSemanticValue('background-page-default')};\n        }\n    }\n`;\n\nexport { Checkmark };\n","import styled from 'styled-components';\nimport { getSemanticValue } from '../../../utils/cssVariables';\n\nconst TapArea = styled.div`\n    position: absolute;\n    width: 1.75rem;\n    height: 1.75rem;\n    border-radius: 50%;\n    background-color: transparent;\n    top: -0.375rem;\n    left: -0.375rem;\n    transition: background-color 125ms;\n\n    &:active {\n        background-color: ${getSemanticValue('background-element-neutral-emphasized')};\n    }\n`;\n\nexport { TapArea };\n","import styled, { css } from 'styled-components';\nimport { compose, margin, MarginProps, variant } from 'styled-system';\n\nimport { getSemanticValue } from '../../../utils/cssVariables';\nimport { theme } from '../../../essentials/theme';\nimport { get } from '../../../utils/themeGet';\nimport { RadioButtonProps } from '../RadioButtonProps';\nimport { Checkmark } from './Checkmark';\nimport { TapArea } from './TapArea';\n\ninterface LabelWrapperProps extends MarginProps, Pick<RadioButtonProps, 'textVerticalAlign'> {\n    disabled?: boolean;\n    error?: boolean;\n}\n\nconst textVerticalAlignVariant = variant({\n    prop: 'textVerticalAlign',\n    variants: {\n        top: {\n            alignItems: 'flex-start'\n        },\n        center: {\n            alignItems: 'center'\n        }\n    }\n});\n\nconst hoverStyle = ({ disabled, error }: LabelWrapperProps) => {\n    if (disabled) {\n        return css`\n            cursor: not-allowed;\n\n            & ${/* sc-selector */ TapArea}:active {\n                background-color: transparent;\n            }\n        `;\n    }\n    return css`\n        cursor: pointer;\n\n        & ${/* sc-selector */ TapArea}:not(:active) {\n            background-color: ${getSemanticValue(\n                error ? 'background-element-danger-faded' : 'background-element-info-default'\n            )};\n        }\n\n        & ${/* sc-selector */ Checkmark}:not(:checked) {\n            box-shadow: inset 0 0 0 0.125rem\n                ${getSemanticValue(error ? 'border-danger-default' : 'border-info-default')};\n            background-color: ${getSemanticValue('background-page-default')};\n        }\n    `;\n};\n\nconst LabelWrapper = styled.label.attrs({ theme })<LabelWrapperProps>`\n    display: inline-flex;\n    align-items: center;\n    position: relative;\n    user-select: none;\n\n    color: ${props => getSemanticValue(props.disabled ? 'foreground-disabled' : 'foreground-primary')};\n\n    font-family: ${get('fonts.normal')};\n    line-height: 1;\n\n    gap: 0.5rem;\n\n    &:hover {\n        ${hoverStyle}\n    }\n\n    ${compose(margin, textVerticalAlignVariant)}\n`;\n\nexport { LabelWrapper };\n","import React, { FC, ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport { extractClassNameProps, extractWrapperMarginProps } from '../../utils/extractProps';\nimport { Text } from '../Text/Text';\n\nimport { Checkmark } from './components/Checkmark';\nimport { LabelWrapper } from './components/LabelWrapper';\nimport { TapArea } from './components/TapArea';\nimport { RadioButtonProps } from './RadioButtonProps';\n\nconst WithTapAreaWrapper = styled.div<Pick<RadioButtonProps, 'textVerticalAlign'>>`\n    width: 1rem;\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n\n    ${({ textVerticalAlign }) => (textVerticalAlign === 'top' ? 'margin-top: 0.1875rem' : undefined)}\n`;\n\nconst RadioButton: FC<RadioButtonProps> = ({ textVerticalAlign = 'center', ...props }: RadioButtonProps) => {\n    const { classNameProps, restProps: withoutClassName } = extractClassNameProps(props);\n    const { marginProps, restProps } = extractWrapperMarginProps(withoutClassName);\n    const { disabled, error, label, ...rest } = restProps;\n\n    let dynamicLabel: ReactNode = label;\n\n    if (typeof label === 'string') {\n        dynamicLabel = <Text>{label}</Text>;\n    }\n\n    return (\n        <LabelWrapper\n            disabled={disabled}\n            error={error}\n            textVerticalAlign={textVerticalAlign}\n            {...marginProps}\n            {...classNameProps}\n        >\n            <WithTapAreaWrapper textVerticalAlign={textVerticalAlign}>\n                <TapArea />\n                <Checkmark type=\"radio\" disabled={disabled} error={error} {...rest} />\n            </WithTapAreaWrapper>\n            {dynamicLabel}\n        </LabelWrapper>\n    );\n};\n\nexport { RadioButton };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n","import * as React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { createPortal } from 'react-dom';\nimport { usePopper } from 'react-popper';\nimport { Placement } from '@popperjs/core';\nimport { variant } from 'styled-system';\nimport { Elevation, MediaQueries } from '../../essentials';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { get } from '../../utils/themeGet';\nimport { Text } from '../Text/Text';\nimport { DarkScheme, LightScheme } from '../ColorScheme';\nimport { useClosestColorScheme } from '../../utils/hooks/useClosestColorScheme';\n\nconst fadeAnimation = keyframes`\n    from {\n        opacity: 0;\n    }\n\n    to {\n        opacity: 1;\n    }\n`;\n\nconst arrowPlacementStyles = variant({\n    variants: {\n        bottom: {\n            right: 'calc(50% - 0.25rem)'\n        },\n        'bottom-end': {\n            right: '0.3rem'\n        },\n        'top-start': {\n            bottom: '-0.5rem',\n            transform: 'rotate(-180deg)'\n        },\n        top: {\n            bottom: '-0.5rem',\n            transform: 'rotate(-180deg)',\n            right: 'calc(50% - 0.25rem)'\n        },\n        'top-end': {\n            bottom: '-0.5rem',\n            transform: 'rotate(-180deg)',\n            right: '0.3rem'\n        },\n        left: {\n            top: 'calc(50% - 0.25rem)',\n            left: 'auto',\n            right: '-0.5rem',\n            transform: 'rotate(90deg)'\n        },\n        'left-end': {\n            bottom: '0.5rem',\n            left: 'auto',\n            right: '-0.5rem',\n            transform: 'rotate(90deg)'\n        },\n        'left-start': {\n            top: '0.5rem',\n            left: 'auto',\n            right: '-0.5rem',\n            transform: 'rotate(90deg)'\n        },\n        right: {\n            top: 'calc(50% - 0.25rem)',\n            left: '-0.25rem',\n            right: 'auto',\n            transform: 'rotate(-90deg)'\n        },\n        'right-end': {\n            bottom: '0.5rem',\n            left: '-0.25rem',\n            right: 'auto',\n            transform: 'rotate(-90deg)'\n        },\n        'right-start': {\n            top: '0.5rem',\n            left: '-0.25rem',\n            right: 'auto',\n            transform: 'rotate(-90deg)'\n        }\n    }\n});\n\ninterface TooltipBodyProps {\n    variant: string;\n}\n\nconst TooltipBody = styled.div<TooltipBodyProps>`\n    position: relative;\n    z-index: ${Elevation.TOOLTIP};\n    background-color: ${getSemanticValue('background-backdrop')};\n    color: ${getSemanticValue('background-page-default')};\n    padding: 0.25rem 0.5rem;\n    border-radius: ${get('radii.2')};\n    opacity: 0;\n    animation-name: ${fadeAnimation};\n    animation-duration: 100ms;\n    animation-fill-mode: forwards;\n    animation-timing-function: ease-in;\n    animation-delay: 400ms;\n    max-width: 10rem;\n\n    ${MediaQueries.small} {\n        max-width: 18.75rem;\n    }\n\n    &::after {\n        bottom: 100%;\n        content: ' ';\n        height: 0;\n        width: 0;\n        position: absolute;\n        pointer-events: none;\n        border: 0.25rem solid rgba(0, 0, 0, 0);\n        border-bottom-color: ${\n            // background colors are used because this border is used to create the arrow\n            getSemanticValue('background-backdrop')\n        };\n        margin-left: -0.25rem;\n\n        ${arrowPlacementStyles}\n    }\n`;\n\ninterface TooltipProps {\n    /**\n     * The content that will be shown inside the tooltip body\n     */\n    content: React.ReactNode;\n    /**\n     * Set the position of where the tooltip is attached to the target, defaults to \"top\"\n     */\n    placement?: Placement;\n    /**\n     * Force the tooltip to always be visible, regardless of user interaction\n     */\n    alwaysVisible?: boolean;\n}\n\nconst Tooltip: React.FC<React.PropsWithChildren<TooltipProps>> = ({\n    content,\n    children,\n    placement = 'top',\n    alwaysVisible = false\n}) => {\n    const [isVisible, setIsVisible] = React.useState(alwaysVisible);\n    /**\n     * triggerReference and contentReference are used with the Popper library in order to get the tooltip styles and attributes\n     */\n    const [triggerReference, setTriggerReference] = React.useState(undefined);\n    const [contentReference, setContentReference] = React.useState(undefined);\n\n    const { styles, attributes } = usePopper(triggerReference, contentReference, {\n        placement,\n        modifiers: [\n            {\n                name: 'offset',\n                enabled: true,\n                options: {\n                    offset: [0, 5]\n                }\n            }\n        ]\n    });\n\n    const enforcedColorScheme = useClosestColorScheme(triggerReference);\n\n    const PortalWrapper = React.useMemo(() => {\n        if (!enforcedColorScheme) return React.Fragment;\n        return enforcedColorScheme === 'light' ? LightScheme : DarkScheme;\n    }, [enforcedColorScheme]);\n\n    let dynamicContent = content;\n\n    if (typeof content === 'string') {\n        dynamicContent = (\n                <Text as=\"p\" fontSize={0}>\n                    {content}\n                </Text>\n        );\n    }\n\n    const handleVisibilityChange = (nextState: React.SetStateAction<boolean>) => {\n        if (!alwaysVisible) {\n            setIsVisible(nextState);\n        }\n    };\n\n    return (\n        <>\n            {React.cloneElement(children as React.ReactElement, {\n                onMouseOver: () => handleVisibilityChange(true),\n                onMouseOut: () => handleVisibilityChange(false),\n                ref: setTriggerReference\n            })}\n            {content &&\n                isVisible &&\n                createPortal(\n                    <PortalWrapper>\n                        <TooltipBody\n                            ref={setContentReference}\n                            style={{ ...styles.popper }}\n                            variant={attributes.popper?.['data-popper-placement']}\n                            {...attributes.popper}\n                        >\n                            {dynamicContent}\n                        </TooltipBody>\n                    </PortalWrapper>,\n                    document.body\n                )}\n        </>\n    );\n};\n\nexport { Tooltip, TooltipProps };\n","import { FC } from 'react';\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { Placement } from '@popperjs/core/lib/enums';\nimport { RadioButton, Tooltip } from '../..';\nimport { MediaQueries } from '../../../essentials';\nimport { getSemanticValue } from '../../../utils/cssVariables';\n\nconst TargetSquare = styled.div`\n    background: ${getSemanticValue('background-surface-info-emphasized')};\n    color: ${getSemanticValue('foreground-on-background-info')};\n    font-size: 0.75rem;\n    cursor: default;\n    width: 7rem;\n    height: 7rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst TargetSquareContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst ExampleContainer = styled.div`\n    display: grid;\n    grid-template-columns: auto;\n    grid-row-gap: 1rem;\n    background-color: ${getSemanticValue('background-page-default')};\n    padding: 1rem;\n\n    ${MediaQueries.small} {\n        grid-template-columns: 20rem auto;\n    }\n`;\n\nconst TooltipPlacementExample: FC = () => {\n    const [placement, setPlacement] = React.useState<Placement>('top');\n\n    const availablePlacements: Placement[] = [\n        'top-start',\n        'top-end',\n        'bottom-start',\n        'bottom-end',\n        'right-start',\n        'right-end',\n        'left-start',\n        'left-end',\n        'top',\n        'bottom',\n        'right',\n        'left',\n        'auto',\n        'auto-start',\n        'auto-end'\n    ];\n\n    return (\n        <ExampleContainer>\n            <div>\n                {availablePlacements.map(p => (\n                    <div key={p}>\n                        <RadioButton\n                            name=\"tooltip-placement\"\n                            checked={placement === p}\n                            onChange={() => setPlacement(p)}\n                            label={<code style={{ fontSize: '1rem' }}>{p}</code>}\n                        />\n                        <br />\n                    </div>\n                ))}\n            </div>\n\n            <TargetSquareContainer>\n                <Tooltip content=\"This is a very long explanation for the function\" placement={placement}>\n                    <TargetSquare>Hover me!</TargetSquare>\n                </Tooltip>\n            </TargetSquareContainer>\n        </ExampleContainer>\n    );\n};\n\nexport { TooltipPlacementExample };\n"],"names":[],"sourceRoot":""}