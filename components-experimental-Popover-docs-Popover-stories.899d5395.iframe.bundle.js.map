{"version":3,"file":"components-experimental-Popover-docs-Popover-stories.899d5395.iframe.bundle.js","mappings":";;;;;AAoBA;AACA;AACA;AACA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;AAOA;AAGA;ACjDA;AACA;;;AAGA;;;;;;;AASA;;AAIA;;;;ACwCA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/Chip/Chip.tsx","webpack://@freenow/wave/./src/components/experimental/Popover/Popover.tsx","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import React, { forwardRef, type ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { Button as BaseButton, ButtonProps as ButtonBaseProps } from 'react-aria-components';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\nimport { textStyles } from '../Text/Text';\n\ninterface ChipProps extends ButtonBaseProps {\n    /**\n     * Toggle active state\n     */\n    isActive?: boolean;\n}\n\nconst Button = styled(BaseButton)<{ isActive: boolean }>`\n    position: relative;\n\n    border: none;\n    outline: none;\n    border-radius: ${get('radii.4')};\n    padding: ${get('space.2')} ${get('space.3')};\n    color: ${props => (props.isActive ? getSemanticValue('on-interactive-container') : getSemanticValue('on-surface'))};\n    background-color: ${props =>\n        props.isActive ? getSemanticValue('interactive-container') : getSemanticValue('surface-variant')};\n\n    display: inline-flex;\n    align-items: center;\n    gap: ${get('space.1')};\n\n    cursor: pointer;\n\n    &::before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n        bottom: 0;\n        content: '';\n        border-radius: inherit;\n        opacity: 0;\n        transition: opacity ease 200ms;\n    }\n\n    &[data-hovered]::before {\n        opacity: 0.16;\n        background-color: currentColor;\n    }\n\n    &[data-focused] {\n        outline: ${getSemanticValue('accent')} solid 0.125rem;\n    }\n\n    &[data-disabled] {\n        opacity: 0.38;\n    }\n\n    ${textStyles.variants.label1}\n`;\n\nconst Chip = forwardRef<HTMLButtonElement, ChipProps>(\n    ({ children, isActive = false, ...props }, ref): ReactElement => (\n        <Button isActive={isActive} ref={ref} {...props}>\n            {/* Button expects a single child */}\n            <>{children}</>\n        </Button>\n    )\n);\n\nexport { Chip, ChipProps };\n","import React, { ReactElement } from 'react';\nimport { Dialog, DialogTrigger, Popover as BasePopover, PopoverProps as BasePopoverProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { get } from '../../../utils/experimental/themeGet';\n\ninterface PopoverProps extends Omit<BasePopoverProps, 'children'> {\n    children: React.ReactNode;\n}\n\nconst StyledPopover = styled(BasePopover)`\n    background: ${getSemanticValue('surface')};\n    padding: ${get('space.4')};\n    box-shadow: 0 2px 4px -1px hsla(0, 0%, 0%, 0.2), 0 1px 10px 0 hsla(0, 0%, 0%, 0.12),\n        0 4px 5px 0 hsla(0, 0%, 0%, 0.14);\n    border-radius: ${get('radii.4')};\n\n    &[data-trigger='Select'],\n    &[data-trigger='ComboBox'] {\n        box-sizing: border-box;\n        width: var(--trigger-width);\n    }\n`;\n\nconst FocusTrap = styled(Dialog)`\n    outline: 0;\n`;\n\nfunction Popover({ children, placement = 'bottom', offset = 8, ...props }: PopoverProps): ReactElement {\n    return (\n        <StyledPopover placement={placement} offset={offset} {...props}>\n            {children}\n        </StyledPopover>\n    );\n}\n\nexport { Popover, DialogTrigger as PopoverTrigger, FocusTrap };\n","import { Text as BaseText, TextProps as BaseTextProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../../essentials/experimental';\n\ninterface TextProps extends BaseTextProps {\n    variant?: ResponsiveValue<'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2'>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst Text = styled(BaseText)<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(variant(textStyles))}\n`;\n\nText.defaultProps = {\n    variant: 'body1'\n};\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}