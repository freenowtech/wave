{"version":3,"file":"src-components-Pagination-docs-Pagination-storybook-mdx.b6eb9938.iframe.bundle.js","mappings":";;AAYA;;;AAGA;AAGA;;AAEA;AACA;;;;;;;AAOA;;;;AAIA;;;;AAIA;;;;AAIA;AACA;;;AAKA;AACA;AAsEA;ACzEA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Pagination/Pagination.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\nimport { Spaces } from '../../essentials/Spaces/Spaces';\nimport { BackwardIcon, BackwardLastIcon, ForwardIcon, ForwardLastIcon } from '../../icons';\nimport { Box } from '../Box/Box';\nimport { SelectList } from '../SelectList/SelectList';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\nconst Container = styled.div`\n    text-align: center;\n`;\n\nconst ButtonsContainer = styled(Box)`\n    display: flex;\n    align-items: center;\n    gap: ${Spaces[1]};\n`;\n\nconst IconButton = styled.button`\n    align-items: center;\n    background-color: ${getSemanticValue('background-page-default')};\n    border: 0.0625rem solid ${getSemanticValue('border-neutral-faded')};\n    border-radius: 0.25rem;\n    display: inline-flex;\n    height: 2.5rem;\n    justify-content: center;\n    padding: 0;\n    width: 2.5rem;\n    color: ${getSemanticValue('foreground-primary')};\n    fill: currentColor;\n\n    &:not(:last-child) {\n        margin-right: ${Spaces[1]};\n    }\n\n    &:disabled {\n        color: ${getSemanticValue('foreground-disabled')};\n    }\n\n    &:hover:not(:disabled) {\n        color: ${getSemanticValue('foreground-on-background-neutral')};\n        background-color: ${getSemanticValue('background-element-neutral-emphasized')};\n        cursor: pointer;\n    }\n`;\n\nconst LabelContainer = styled.div`\n    margin-top: ${Spaces[2]};\n`;\n\ninterface PaginationProps {\n    /**\n     * Define the size of the component, defaults to normal.\n     */\n    size?: 'normal' | 'small';\n    /**\n     * Value of the current page. The first page is assumed to be 1.\n     */\n    value: number;\n    /**\n     * Number of items per page.\n     */\n    pageSize: number;\n    /**\n     * Allow the user to select between the given page sizes.\n     */\n    pageSizes?: { label: string; value: string }[];\n    /**\n     * Total number of items.\n     */\n    totalItems: number;\n    /**\n     * Label to display current page and total pages.\n     */\n    label?: ReactNode;\n    /**\n     * Aria label for the skip backward button.\n     */\n    ariaLabelFirst?: string;\n    /**\n     * Aria label for the previous button.\n     */\n    ariaLabelPrevious?: string;\n    /**\n     * Aria label for the next button.\n     */\n    ariaLabelNext?: string;\n    /**\n     * Aria label for the skip forward button.\n     */\n    ariaLabelLast?: string;\n    /**\n     * Aria label for the container of the page size `SelectList`.\n     */\n    ariaLabelSelectPageSizeContainer?: string;\n    /**\n     * Callback when the next button was pressed.\n     */\n    onNextPage?: () => void;\n    /**\n     * Callback when the previous button was pressed.\n     */\n    onPrevPage?: () => void;\n    /**\n     * Callback when a different page size was selected. Can only be used when `pageSizes` is passed.\n     */\n    onSelectPageSize?: (selected: { label: string; value: string }) => void;\n    /**\n     * Callback when the skip forward button was pressed.\n     */\n    onSkipForward?: () => void;\n    /**\n     * Callback when the skip backward button was pressed.\n     */\n    onSkipBackward?: () => void;\n}\n\nconst Pagination: React.FC<PaginationProps> = ({\n    size = 'normal',\n    value,\n    pageSize,\n    pageSizes = [],\n    totalItems,\n    label,\n    ariaLabelFirst = 'First',\n    ariaLabelPrevious = 'Previous',\n    ariaLabelNext = 'Next',\n    ariaLabelLast = 'Last',\n    ariaLabelSelectPageSizeContainer = 'Select page size container',\n    onNextPage,\n    onPrevPage,\n    onSelectPageSize,\n    onSkipForward,\n    onSkipBackward\n}: PaginationProps) => {\n    const isFirstPage = value === 1;\n    const isLastPage = totalItems > 0 ? value === Math.ceil(totalItems / pageSize) : true;\n    const hasMultiplePageSizes = pageSizes.length > 0;\n\n    return (\n        <Container>\n            <ButtonsContainer>\n                <Box flex=\"1\">\n                    {hasMultiplePageSizes && (\n                        <Box aria-label={ariaLabelSelectPageSizeContainer} width=\"fit-content\" minWidth=\"5em\">\n                            <SelectList\n                                options={pageSizes}\n                                onChange={onSelectPageSize}\n                                value={pageSizes.find(sizeOption => sizeOption.value === pageSize.toString())}\n                            />\n                        </Box>\n                    )}\n                </Box>\n                <Box>\n                    {size !== 'small' && (\n                        <IconButton aria-label={ariaLabelFirst} disabled={isFirstPage} onClick={onSkipBackward}>\n                            <BackwardLastIcon size=\"small\" color=\"inherit\" />\n                        </IconButton>\n                    )}\n\n                    <IconButton aria-label={ariaLabelPrevious} disabled={isFirstPage} onClick={onPrevPage}>\n                        <BackwardIcon size=\"small\" color=\"inherit\" />\n                    </IconButton>\n\n                    <IconButton aria-label={ariaLabelNext} disabled={isLastPage} onClick={onNextPage}>\n                        <ForwardIcon size=\"small\" color=\"inherit\" />\n                    </IconButton>\n\n                    {size !== 'small' && (\n                        <IconButton aria-label={ariaLabelLast} disabled={isLastPage} onClick={onSkipForward}>\n                            <ForwardLastIcon size=\"small\" color=\"inherit\" />\n                        </IconButton>\n                    )}\n                </Box>\n                <Box flex=\"1\" />\n            </ButtonsContainer>\n\n            {label && <LabelContainer>{label}</LabelContainer>}\n        </Container>\n    );\n};\n\nexport { Pagination, PaginationProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}