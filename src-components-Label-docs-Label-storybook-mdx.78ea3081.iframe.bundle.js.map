{"version":3,"file":"src-components-Label-docs-Label-storybook-mdx.78ea3081.iframe.bundle.js","mappings":";;;;AAqFA;AACA;;;;;;AAMA;AAGA;;ACpFA;;;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;AAIA;;ACcA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Label/Label.tsx","webpack://@freenow/wave/./src/components/Link/Link.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant } from 'styled-system';\nimport { ComponentPropsWithoutRef } from 'react';\nimport { Text } from '../Text/Text';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface LabelProps extends ComponentPropsWithoutRef<'span'>, MarginProps {\n    /**\n     * Set the appropriate colors for the component with 'default' as a default\n     */\n    variant?: ResponsiveValue<'default' | 'info' | 'success' | 'warning' | 'danger'>;\n\n    /**\n     * Use the alternative version of the label for critical status and extra emphasis\n     * @default false\n     */\n    filled?: boolean;\n}\n\nconst normalVariantStyles = variant({\n    variants: {\n        default: {\n            color: getSemanticValue('foreground-on-background-neutral'),\n            borderColor: getSemanticValue('border-neutral-default'),\n            backgroundColor: getSemanticValue('background-element-neutral-emphasized')\n        },\n        info: {\n            color: getSemanticValue('foreground-info-default'),\n            borderColor: getSemanticValue('border-info-faded'),\n            backgroundColor: getSemanticValue('background-element-info-default')\n        },\n        success: {\n            color: getSemanticValue('foreground-success-default'),\n            borderColor: getSemanticValue('border-success-faded'),\n            backgroundColor: getSemanticValue('background-element-success-default')\n        },\n        warning: {\n            color: getSemanticValue('foreground-on-background-warning'),\n            borderColor: getSemanticValue('border-warning-default'),\n            backgroundColor: getSemanticValue('background-element-warning-default')\n        },\n        danger: {\n            color: getSemanticValue('foreground-danger-emphasized'),\n            borderColor: getSemanticValue('border-danger-faded'),\n            backgroundColor: getSemanticValue('background-surface-danger-faded')\n        }\n    }\n});\n\nconst filledVariantStyles = variant({\n    variants: {\n        default: {\n            color: getSemanticValue('foreground-on-background-primary'),\n            borderColor: getSemanticValue('transparent'),\n            backgroundColor: getSemanticValue('background-surface-primary-emphasized')\n        },\n        info: {\n            color: getSemanticValue('foreground-on-background-info'),\n            borderColor: getSemanticValue('transparent'),\n            backgroundColor: getSemanticValue('background-surface-info-emphasized')\n        },\n        success: {\n            color: getSemanticValue('foreground-on-background-success'),\n            borderColor: getSemanticValue('transparent'),\n            backgroundColor: getSemanticValue('background-surface-success-emphasized')\n        },\n        warning: {\n            color: getSemanticValue('foreground-on-background-warning'),\n            borderColor: getSemanticValue('transparent'),\n            backgroundColor: getSemanticValue('background-surface-warning-emphasized')\n        },\n        danger: {\n            color: getSemanticValue('foreground-on-background-danger'),\n            borderColor: getSemanticValue('transparent'),\n            backgroundColor: getSemanticValue('background-surface-danger-emphasized')\n        }\n    }\n});\n\nconst Label = styled(Text).attrs({ theme })<LabelProps>`\n    display: inline-block;\n    box-sizing: border-box;\n    font-size: 0.625rem;\n    border-radius: ${get('radii.1')};\n    font-weight: ${get('fontWeights.semibold')};\n    padding: 0.1875rem 0.5rem;\n\n    border-width: 0.0625rem;\n    border-style: solid;\n\n    ${props => compose(props.filled ? filledVariantStyles : normalVariantStyles, margin)(props)}\n`;\n\nLabel.defaultProps = {\n    variant: 'default'\n};\n\nexport { Label, LabelProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, fontSize, FontSizeProps, margin, MarginProps, textAlign, TextAlignProps } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'>, MarginProps, FontSizeProps, TextAlignProps {}\n\nconst Link = styled.a.attrs({ theme })<LinkProps>`\n    display: inline-block;\n    color: ${getSemanticValue('foreground-accent-default')};\n    cursor: pointer;\n    line-height: 1.4;\n    font-family: ${get('fonts.normal')};\n    font-size: ${get('fontSizes.2')};\n    font-weight: ${get('fontWeights.semibold')};\n    text-decoration: none;\n\n    &:link,\n    &:visited {\n        color: ${getSemanticValue('foreground-accent-default')};\n    }\n\n    &:hover,\n    &:active {\n        color: ${getSemanticValue('foreground-accent-emphasized')};\n        text-decoration: underline;\n    }\n\n    ${compose(margin, fontSize, textAlign)}\n`;\n\nexport { Link, LinkProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}