{"version":3,"file":"components-InfoBanner-docs-InfoBanner-stories.605a64d2.iframe.bundle.js","mappings":";;AAyDA;AACA;;;AAGA;AACA;;;;;AC2EA;;AAEA;AACA;;AAEA;AAIA;AAIA;AACA;AAGA;;AC/IA;;;AAGA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;AAIA;;ACcA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Headline/Headline.tsx","webpack://@freenow/wave/./src/components/InfoBanner/InfoBanner.tsx","webpack://@freenow/wave/./src/components/Link/Link.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, system, MarginProps, textAlign, TextAlignProps, ResponsiveValue } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface HeadlineProps extends ComponentPropsWithoutRef<'h1'>, MarginProps, TextAlignProps {\n    /**\n     * Set the html tag for the headline including the appropriate styles\n     */\n    as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n    /**\n     * Set the style of the headline\n     */\n    size?: ResponsiveValue<'xxl' | 'xl' | 'l' | 'm' | 's' | 'xs'>;\n}\n\nexport const DEFAULT_HEADLINE_SIZE = {\n    h1: 'xxl',\n    h2: 'xl',\n    h3: 'l',\n    h4: 'm',\n    h5: 's',\n    h6: 'xs'\n} as const;\n\nconst parser = system({\n    fontSize: {\n        property: 'fontSize',\n        defaultScale: {\n            xs: '0.75rem',\n            s: '0.875rem',\n            m: '1rem',\n            l: '1.5rem',\n            xl: '2rem',\n            xxl: '3rem'\n        }\n    },\n    lh: {\n        property: 'lineHeight',\n        defaultScale: {\n            xs: '1.125rem',\n            s: '1.25rem',\n            m: '1.375rem',\n            l: '2rem',\n            xl: '2.5rem',\n            xxl: '3.75rem'\n        }\n    }\n});\n\nconst getSize = ({ as = 'h1', size }: HeadlineProps): ResponsiveValue<'xxl' | 'xl' | 'l' | 'm' | 's' | 'xs'> =>\n    size || DEFAULT_HEADLINE_SIZE[as];\n\nconst Headline: React.FC<HeadlineProps> = styled.h1.attrs({ theme })<HeadlineProps>`\n    color: inherit;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.bold')};\n    margin: 0;\n\n    ${props => parser({ fontSize: getSize(props), lh: getSize(props), ...props })}\n    ${compose(margin, textAlign)}\n`;\n\nexport { Headline, HeadlineProps };\n","import React from 'react';\nimport styled from 'styled-components';\nimport { variant as styledVariant } from 'styled-system';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport {\n    CheckCircleFilledIcon,\n    XCrossCircleFilledIcon,\n    InfoCircleFilledIcon,\n    WarningFilledIcon,\n    IconProps\n} from '../../icons';\nimport { BoxProps, Box } from '../Box/Box';\nimport { Link } from '../Link/Link';\nimport { Text } from '../Text/Text';\nimport { Headline } from '../Headline/Headline';\nimport { Spaces } from '../../essentials';\nimport { theme } from '../../essentials/theme';\nimport { InfoBannerVariants, BoxWithVariant } from './types';\n\ninterface InfoBannerProps extends BoxProps {\n    /**\n     * The title of the banner\n     */\n    title: string;\n    /**\n     * The description of the banner\n     */\n    description: string;\n    /**\n     * Color and message type for the component\n     * @default info\n     */\n    variant?: InfoBannerVariants;\n    /**\n     * Adds additional emphasis or highlights critical status of the message\n     * @default false\n     */\n    emphasized?: boolean;\n    /**\n     * Sets the text of the link contained in the banner\n     */\n    linkText?: string;\n    /**\n     * Sets the url where the user will be redirected when clicking on the link\n     */\n    linkUrl?: string;\n}\n\nconst bannerVariants = styledVariant({\n    variants: {\n        info: {\n            background: getSemanticValue('background-surface-info-default'),\n            borderColor: getSemanticValue('border-info-banner'),\n            color: getSemanticValue('foreground-primary')\n        },\n        success: {\n            background: getSemanticValue('background-surface-success-default'),\n            borderColor: getSemanticValue('border-success-banner'),\n            color: getSemanticValue('foreground-primary')\n        },\n        warning: {\n            background: getSemanticValue('background-surface-warning-default'),\n            borderColor: getSemanticValue('border-warning-banner'),\n            color: getSemanticValue('foreground-primary')\n        },\n        error: {\n            background: getSemanticValue('background-surface-danger-default'),\n            borderColor: getSemanticValue('border-danger-banner'),\n            color: getSemanticValue('foreground-primary')\n        }\n    }\n});\n\nconst emphasizedBannerVariants = styledVariant({\n    variants: {\n        info: {\n            background: getSemanticValue('background-surface-info-emphasized'),\n            borderColor: getSemanticValue('transparent'),\n            color: getSemanticValue('foreground-on-background-info')\n        },\n        success: {\n            background: getSemanticValue('background-surface-success-emphasized'),\n            borderColor: getSemanticValue('transparent'),\n            color: getSemanticValue('foreground-on-background-success')\n        },\n        warning: {\n            background: getSemanticValue('background-surface-warning-emphasized'),\n            borderColor: getSemanticValue('transparent'),\n            color: getSemanticValue('foreground-on-background-warning')\n        },\n        error: {\n            background: getSemanticValue('background-surface-danger-emphasized'),\n            borderColor: getSemanticValue('transparent'),\n            color: getSemanticValue('foreground-on-background-danger')\n        }\n    }\n});\n\nconst iconColorVariants = styledVariant({\n    variants: {\n        info: {\n            color: getSemanticValue('foreground-info-default')\n        },\n        success: {\n            color: getSemanticValue('foreground-success-default')\n        },\n        warning: {\n            color: getSemanticValue('foreground-warning-default')\n        },\n        error: {\n            color: getSemanticValue('foreground-danger-default')\n        }\n    }\n});\n\nconst emphasizedIconColorVariants = styledVariant({\n    variants: {\n        info: {\n            color: getSemanticValue('foreground-on-background-info')\n        },\n        success: {\n            color: getSemanticValue('foreground-on-background-success')\n        },\n        warning: {\n            color: getSemanticValue('foreground-on-background-warning')\n        },\n        error: {\n            color: getSemanticValue('foreground-on-background-danger')\n        }\n    }\n});\n\nexport const RoundedBox = styled(Box).attrs({ theme })<BoxWithVariant>`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    border-radius: ${get('radii.3')};\n    border: 0.0625rem solid;\n    padding: ${Spaces[2]};\n    ${({ emphasized }) => (emphasized ? emphasizedBannerVariants : bannerVariants)};\n\n    --info-banner-link-color: ${({ emphasized }) =>\n        emphasized\n            ? getSemanticValue('foreground-on-background-primary')\n            : getSemanticValue('foreground-accent-default')};\n    --info-banner-link-hover-color: ${({ emphasized }) =>\n        emphasized ? getSemanticValue('foreground-neutral-default') : getSemanticValue('foreground-accent-emphasized')};\n`;\n\nexport const IconBox = styled(Box)<BoxWithVariant>`\n    ${({ emphasized }) => (emphasized ? emphasizedIconColorVariants : iconColorVariants)};\n`;\n\nexport const ICON_VARIANTS: {\n    [key in InfoBannerVariants]: React.FC<IconProps>;\n} = {\n    warning: WarningFilledIcon,\n    info: InfoCircleFilledIcon,\n    success: CheckCircleFilledIcon,\n    error: XCrossCircleFilledIcon\n};\n\nexport const ROLE_VARIANTS: {\n    [key in InfoBannerVariants]: string;\n} = {\n    error: 'alert',\n    info: 'status',\n    success: 'alert',\n    warning: 'status'\n};\n\nconst InfoBanner: React.FC<InfoBannerProps> = ({\n    title,\n    description,\n    variant = 'info',\n    linkText,\n    linkUrl,\n    emphasized,\n    ...props\n}) => {\n    const BannerIcon = ICON_VARIANTS[variant];\n\n    return (\n        <RoundedBox variant={variant} emphasized={emphasized} role={ROLE_VARIANTS[variant]} {...props}>\n            <IconBox mr={1} variant={variant} emphasized={emphasized} data-testid=\"infobanner-icon-container\">\n                <BannerIcon size={20} color=\"inherit\" />\n            </IconBox>\n            <Box display=\"flex\" flexDirection=\"column\">\n                <Headline as=\"h4\" textAlign=\"left\">\n                    {title}\n                </Headline>\n                <Text fontSize=\"small\" textAlign=\"left\">\n                    {description}\n                </Text>\n                {linkText && linkUrl && (\n                    <Link fontSize=\"0\" textAlign=\"left\" href={linkUrl} target=\"_blank\" mt=\"0.25rem\">\n                        {linkText}\n                    </Link>\n                )}\n            </Box>\n        </RoundedBox>\n    );\n};\n\nexport { InfoBanner, InfoBannerProps, InfoBannerVariants };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, fontSize, FontSizeProps, margin, MarginProps, textAlign, TextAlignProps } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface LinkProps extends ComponentPropsWithoutRef<'a'>, MarginProps, FontSizeProps, TextAlignProps {}\n\nconst Link = styled.a.attrs({ theme })<LinkProps>`\n    display: inline-block;\n    color: ${getSemanticValue('foreground-accent-default')};\n    cursor: pointer;\n    line-height: 1.4;\n    font-family: ${get('fonts.normal')};\n    font-size: ${get('fontSizes.2')};\n    font-weight: ${get('fontWeights.semibold')};\n    text-decoration: none;\n\n    &:link,\n    &:visited {\n        color: ${getSemanticValue('foreground-accent-default')};\n    }\n\n    &:hover,\n    &:active {\n        color: ${getSemanticValue('foreground-accent-emphasized')};\n        text-decoration: underline;\n    }\n\n    ${compose(margin, fontSize, textAlign)}\n`;\n\nexport { Link, LinkProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}