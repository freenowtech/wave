{"version":3,"file":"components-Offcanvas-docs-Offcanvas-stories.fc438a66.iframe.bundle.js","mappings":";;;AAoCA;;;;AAIA;AACA;;;;;;;;;;;;;AAaA;;;;ACkBA;AAGA;;;AClBA;AACA;;AAEA;;ACtDA;;;;;;;AAOA;;ACFA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;AAKA;AACA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;AAOA;;;;;AAOA;;;;;AAQA;;;AAGA;AACA;;AAEA;;;AArEA;;AA0EA;AACA;;AAEA;;;AAUA;ACtFA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;AAwBA;AAxBA;;;;;AAAA;;;;;AAAA;;;;;AAAA;;;;AA+CA;;;;;AAOA;;;;;AAQA;;;AAGA;AACA;;AAEA;;;AArEA;;AA0EA;AACA;;AAEA;;;AAUA;ACtFA;;AADA;;;;AAAA;AAWA;;;AAXA;AAeA;;;AAfA;;;AAuBA;AACA;;AAIA;;;AAGA;AACA;AASA;;ACzCA;AACA;;AAEA;;;;;ACwCA","sources":["webpack://@freenow/wave/./src/components/Button/BaseButton.tsx","webpack://@freenow/wave/./src/components/Button/Button.tsx","webpack://@freenow/wave/./src/components/Card/Card.tsx","webpack://@freenow/wave/./src/components/Dimming/Dimming.tsx","webpack://@freenow/wave/./src/components/Offcanvas/components/CenteredCard.tsx","webpack://@freenow/wave/./src/components/Offcanvas/components/SideCard.tsx","webpack://@freenow/wave/./src/components/Offcanvas/components/DimmingFade.tsx","webpack://@freenow/wave/./src/components/Offcanvas/components/TopRightXIcon.tsx","webpack://@freenow/wave/./src/components/Offcanvas/Offcanvas.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant, width, WidthProps } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface BaseButtonProps extends ComponentPropsWithoutRef<'button'>, MarginProps, WidthProps {\n    /**\n     * Adjusts the size of the button\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            minWidth: '5rem',\n            padding: '0 0.75rem'\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            minWidth: '6.25rem',\n            padding: '0 1rem'\n        }\n    }\n});\n\n// \"svg path\" fill set to \"inherit\" to being able to transition using button variants\nconst BaseButton = styled.button.attrs({ theme })<BaseButtonProps>`\n    align-items: center;\n    background: transparent;\n    border-radius: ${get('radii.2')};\n    border: 0.0625rem solid transparent;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.semibold')};\n    justify-content: center;\n    text-align: center;\n    text-decoration: none;\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    svg path {\n        fill: inherit;\n    }\n\n    ${compose(margin, sizeVariant, width)}\n`;\n\nexport { BaseButton, BaseButtonProps };\n","import styled from 'styled-components';\nimport { ButtonStyleProps, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../essentials/theme';\n\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { BaseButton, BaseButtonProps } from './BaseButton';\nimport { ComponentSemanticTokens } from '../../essentials/Colors/types';\n\ntype Variant = 'primary' | 'secondary' | 'danger';\n\ninterface ButtonProps extends BaseButtonProps, ButtonStyleProps {\n    /**\n     * Define style of the button component, defaults to primary\n     */\n    variant?: ResponsiveValue<Variant>;\n}\n\nconst variantStyles = variant<ComponentSemanticTokens, Variant>({\n    variants: {\n        primary: {\n            color: getSemanticValue('foreground-on-background-primary'),\n            fill: getSemanticValue('foreground-on-background-primary'),\n            background: getSemanticValue('background-element-primary-default'),\n\n            '&:hover': {\n                color: getSemanticValue('foreground-on-background-accent'),\n                background: getSemanticValue('background-element-primary-emphasized')\n            },\n\n            '&:disabled': {\n                color: getSemanticValue('foreground-on-background-disabled'),\n                background: getSemanticValue('background-element-disabled-default')\n            }\n        },\n        secondary: {\n            color: getSemanticValue('foreground-primary'),\n            fill: getSemanticValue('foreground-primary'),\n            background: getSemanticValue('background-page-default'),\n            borderColor: getSemanticValue('border-neutral-default'),\n\n            '&:hover': {\n                color: getSemanticValue('foreground-on-background-neutral'),\n                background: getSemanticValue('background-element-neutral-emphasized')\n            },\n\n            '&:disabled': {\n                color: getSemanticValue('foreground-disabled'),\n                fill: getSemanticValue('foreground-disabled'),\n                background: getSemanticValue('transparent'),\n                borderColor: getSemanticValue('border-disabled')\n            }\n        },\n        danger: {\n            color: getSemanticValue('foreground-on-background-danger'),\n            fill: getSemanticValue('foreground-on-background-danger'),\n            background: getSemanticValue('background-element-danger-default'),\n\n            '&:hover': {\n                background: getSemanticValue('background-element-danger-emphasized')\n            },\n\n            '&:disabled': {\n                background: getSemanticValue('background-element-disabled-default'),\n                borderColor: getSemanticValue('border-disabled')\n            }\n        }\n    }\n});\n\nconst Button = styled(BaseButton).attrs({ theme })<ButtonProps>`\n    transition: background ease 200ms, border-color ease 200ms, color ease 200ms, fill ease 200ms;\n\n    ${variantStyles};\n`;\n\nButton.defaultProps = {\n    size: 'medium',\n    variant: 'primary'\n};\n\nexport { Button, ButtonProps };\n","import styled, { StyledComponent } from 'styled-components';\nimport {\n    borderRadius,\n    BorderRadiusProps,\n    compose,\n    height,\n    HeightProps,\n    padding,\n    PaddingProps,\n    ResponsiveValue,\n    space,\n    SpaceProps,\n    variant,\n    width,\n    WidthProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ntype CardProps = BorderRadiusProps &\n    HeightProps &\n    SpaceProps &\n    WidthProps &\n    PaddingProps & {\n        /**\n         * Set the visual depth of the card by adding a shadow (available values: 0, 100, 200, 300)\n         * @default 0\n         */\n        level?: ResponsiveValue<0 | 100 | 200 | 300>;\n    };\n\nconst levelVariant = variant({\n    prop: 'level',\n    variants: {\n        0: {\n            backgroundColor: getSemanticValue('background-page-default'),\n            boxShadow: 'none'\n        },\n        100: {\n            backgroundColor: getSemanticValue('background-page-elevation-1'),\n            boxShadow: theme.shadows.small\n        },\n        200: {\n            backgroundColor: getSemanticValue('background-page-elevation-2'),\n            boxShadow: theme.shadows.medium\n        },\n        300: {\n            backgroundColor: getSemanticValue('background-page-elevation-3'),\n            boxShadow: theme.shadows.large\n        }\n    }\n});\n\nconst Card: StyledComponent<'div', typeof theme, CardProps, 'theme'> = styled.div.attrs({ theme })`\n    overflow: auto;\n    box-sizing: border-box;\n    border-radius: ${get('radii.1')};\n    padding: ${get('space.5')};\n\n    ${compose(levelVariant, borderRadius, height, space, width, padding)}\n`;\n\nexport { Card, CardProps };\n","import styled from 'styled-components';\n\nimport { Elevation } from '../../essentials';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\nconst Dimming = styled.div`\n    background-color: ${getSemanticValue('background-backdrop')};\n    height: 100%;\n    left: 0;\n    opacity: 0.6;\n    position: fixed;\n    top: 0;\n    width: 100%;\n    z-index: ${Elevation.DIMMING};\n`;\n\nexport { Dimming };\n","import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { Elevation } from '../../../essentials';\nimport { Card, CardProps } from '../../Card/Card';\n\nconst ANIMATION_DURATION = 150;\nconst TRANSITION_KEY = 'centered-card-animation';\n\nconst inFrom = {\n    top: css`\n        &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n            opacity: 0;\n            transform: translate(0%, calc(-50% - 1rem));\n        }\n\n        &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n            opacity: 0;\n            transform: translate(-0%, -50%);\n        }\n    `,\n    bottom: css`\n        &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n            opacity: 0;\n            transform: translate(0%, calc(50% + 1rem));\n        }\n\n        &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n            opacity: 0;\n            transform: translate(0%, 10%);\n        }\n    `\n};\n\nconst position = {\n    top: css`\n        left: 0;\n        right: 0;\n        top: 0;\n        bottom: unset;\n    `,\n    bottom: css`\n        left: 0;\n        right: 0;\n        top: unset;\n        bottom: 0;\n    `\n};\n\nconst StyledCard = styled(Card)<{ side?: string }>`\n    position: fixed;\n\n    left: ${p => (p.side === 'right' ? 'unset' : 0)};\n    right: ${p => (p.side === 'right' ? 0 : 'unset')};\n    transform: translate(0%, 0%);\n    z-index: ${Elevation.CARD_ON_DIMMING};\n    width: 100%;\n    will-change: transform, opacity;\n    transition: transform ${ANIMATION_DURATION}ms ease-out, opacity ${ANIMATION_DURATION}ms ease-out;\n\n    ${p => inFrom[p.side]};\n    ${p => position[p.side]};\n\n    @media (max-width: calc(${p => p.width} + 2rem)) {\n        width: calc(100% - 2rem);\n    }\n`;\n\ninterface CenteredCardProps extends CardProps {\n    visible: boolean;\n    side: string;\n}\n\nconst CenteredCard: React.FC<React.PropsWithChildren<CenteredCardProps>> = ({\n    visible,\n    height = '28.375rem',\n    ...rest\n}: CenteredCardProps) => (\n    <CSSTransition in={visible} classNames={TRANSITION_KEY} timeout={ANIMATION_DURATION} unmountOnExit appear>\n        <StyledCard {...rest} height={height} level={300} />\n    </CSSTransition>\n);\n\nexport { CenteredCard, ANIMATION_DURATION };\n","import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { Elevation } from '../../../essentials';\nimport { Card, CardProps } from '../../Card/Card';\n\nconst ANIMATION_DURATION = 150;\nconst TRANSITION_KEY = 'centered-card-animation';\n\nconst inFrom = {\n    right: css`\n        &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n            opacity: 0;\n            transform: translate(calc(50% + 1rem), 0%);\n        }\n\n        &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n            opacity: 0;\n            transform: translate(+10%, 0%);\n        }\n    `,\n    left: css`\n        &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n            opacity: 0;\n            transform: translate(calc(-50% - 1rem), 0%);\n        }\n\n        &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit {\n            opacity: 1;\n            transform: translate(0%, 0%);\n        }\n\n        &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n            opacity: 0;\n            transform: translate(-10%, 0%);\n        }\n    `\n};\n\nconst position = {\n    right: css`\n        left: unset;\n        right: 0;\n        top: 0;\n        bottom: 0;\n    `,\n    left: css`\n        left: 0;\n        right: unset;\n        top: 0;\n        bottom: 0;\n    `\n};\n\nconst StyledCard = styled(Card)<{ side?: string }>`\n    position: fixed;\n\n    left: ${p => (p.side === 'right' ? 'unset' : 0)};\n    right: ${p => (p.side === 'right' ? 0 : 'unset')};\n    transform: translate(0%, 0%);\n    z-index: ${Elevation.CARD_ON_DIMMING};\n    height: 100%;\n    will-change: transform, opacity;\n    transition: transform ${ANIMATION_DURATION}ms ease-out, opacity ${ANIMATION_DURATION}ms ease-out;\n\n    ${p => inFrom[p.side]};\n    ${p => position[p.side]};\n\n    @media (max-width: calc(${p => p.width} + 2rem)) {\n        width: calc(100% - 2rem);\n    }\n`;\n\ninterface SideCardProps extends CardProps {\n    visible: boolean;\n    side: string;\n}\n\nconst SideCard: React.FC<React.PropsWithChildren<SideCardProps>> = ({\n    visible,\n    width = '28.375rem',\n    ...rest\n}: SideCardProps) => (\n    <CSSTransition in={visible} classNames={TRANSITION_KEY} timeout={ANIMATION_DURATION} unmountOnExit appear>\n        <StyledCard {...rest} width={width} level={300} />\n    </CSSTransition>\n);\n\nexport { SideCard, ANIMATION_DURATION };\n","import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { Dimming } from '../../Dimming/Dimming';\nimport { getSemanticValue } from '../../../utils/cssVariables';\n\nconst TRANSITION_KEY = 'dimming-fade-animation';\nconst ANIMATION_DURATION = 200;\n\nconst fadeInAnimation = (maxOpacity = 0.6) => css`\n    transition: opacity ${ANIMATION_DURATION}ms cubic-bezier(0.215, 0.61, 0.355, 1);\n\n    &.${TRANSITION_KEY}-appear, &.${TRANSITION_KEY}-enter {\n        opacity: 0;\n    }\n\n    &.${TRANSITION_KEY}-appear-active, &.${TRANSITION_KEY}-enter-active {\n        opacity: ${maxOpacity};\n    }\n\n    &.${TRANSITION_KEY}-exit {\n        opacity: ${maxOpacity};\n    }\n\n    &.${TRANSITION_KEY}-exit-done, &.${TRANSITION_KEY}-exit-active {\n        opacity: 0;\n    }\n`;\n\nconst fullscreenDimming = css`\n    background-color: ${getSemanticValue('background-surface-neutral-default')};\n    opacity: 1;\n`;\n\nconst DimmingFadeStyled = styled(Dimming)<{ fullscreen?: boolean }>`\n    will-change: opacity;\n\n    ${p => (p.fullscreen ? fadeInAnimation(1) : fadeInAnimation())};\n    ${p => (p.fullscreen ? fullscreenDimming : undefined)}\n`;\n\ninterface DimmingFadeProps {\n    visible: boolean;\n    fullscreen?: boolean;\n    onClick: (event: React.MouseEvent) => void;\n}\n\nconst DimmingFade: React.FC<React.PropsWithChildren<DimmingFadeProps>> = ({ visible, ...rest }: DimmingFadeProps) => (\n    <CSSTransition in={visible} classNames={TRANSITION_KEY} timeout={ANIMATION_DURATION} unmountOnExit appear>\n        <DimmingFadeStyled {...rest} />\n    </CSSTransition>\n);\n\nexport { DimmingFade, ANIMATION_DURATION };\n","import styled from 'styled-components';\nimport { Elevation, Spaces } from '../../../essentials';\nimport { XCrossIcon } from '../../../icons';\n\nconst TopRightXIcon = styled(XCrossIcon)`\n    position: absolute;\n    top: ${Spaces[1]};\n    right: ${Spaces[1]};\n    cursor: pointer;\n    z-index: ${Elevation.CARD_ON_DIMMING};\n`;\n\nexport { TopRightXIcon };\n","import React, { useEffect, useState, ReactNode, useContext } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { WidthProps } from 'styled-system';\nimport { useIsEscKeyPressed } from '../../utils/hooks/useIsEscKeyPressed';\nimport { ANIMATION_DURATION as CARD_ANIMATION_DURATION, CenteredCard } from './components/CenteredCard';\nimport { ANIMATION_DURATION as CARD_ANIMATION_DURATION_SIDE, SideCard } from './components/SideCard';\nimport { ANIMATION_DURATION as DIMMING_ANIMATION_DURATION, DimmingFade } from './components/DimmingFade';\nimport { TopRightXIcon } from './components/TopRightXIcon';\n\ntype DismissFunc = () => void;\n\nconst DismissContext = React.createContext<DismissFunc>(undefined);\n\nconst useOffcanvasDismiss = (): DismissFunc => {\n    const dismiss = useContext(DismissContext);\n\n    if (dismiss === undefined) {\n        throw new Error('useOffcanvasDismiss must be used within a <Offcanvas />');\n    }\n\n    return dismiss;\n};\n\ninterface OffcanvasProps extends WidthProps {\n    /**\n     * Show the Offcanvas on the side of the page: left or right\n     */\n    side?: 'left' | 'right' | 'top' | 'bottom';\n    /**\n     * Makes the Offcanvas dismissible by the user (defaults to true)\n     */\n    dismissible?: boolean;\n    /**\n     * Function that will be called when the user intends to close the Offcanvas\n     */\n    onClose?: () => void;\n    /**\n     * Children can be rendered with a dismiss function as render prop. Calling\n     * the dismiss function will close the Offcanvas.\n     */\n    children?: ReactNode | ((dismiss: DismissFunc) => ReactNode);\n}\n\nconst PreventBackgroundScroll = createGlobalStyle`\n    body {\n        overflow: hidden;\n    }\n`;\n\nconst ANIMATION_DURATION = Math.max(\n    DIMMING_ANIMATION_DURATION,\n    CARD_ANIMATION_DURATION || CARD_ANIMATION_DURATION_SIDE\n);\n\n/*\n * We define the types for the props twice because the render props won't be inferred correctly\n * when only using `React.FC<OffcanvasProps>`. This leads to compiler errors when passing the\n * dismiss function.\n */\nconst Offcanvas: React.FC<OffcanvasProps> = ({\n    children,\n    onClose,\n    dismissible = true,\n    side = 'left',\n    ...rest\n}: OffcanvasProps) => {\n    const [visible, setVisible] = useState(true);\n    const isEscKeyPressed = useIsEscKeyPressed();\n\n    const handleClose: DismissFunc = () => {\n        setVisible(false);\n\n        if (onClose) {\n            setTimeout(() => onClose(), ANIMATION_DURATION);\n        }\n    };\n\n    const handleDimmingClick = () => {\n        if (dismissible) handleClose();\n    };\n\n    useEffect(() => {\n        if (dismissible && isEscKeyPressed) {\n            handleClose();\n        }\n    }, [dismissible, isEscKeyPressed]);\n\n    const renderChildren = () => {\n        if (typeof children === 'function') {\n            return children(handleClose);\n        }\n\n        return children;\n    };\n\n    return (\n        <DismissContext.Provider value={handleClose}>\n            <DimmingFade onClick={handleDimmingClick} visible={visible} data-testid=\"dimming-background\" />\n            {side === 'top' || side === 'bottom' ? (\n                <CenteredCard visible={visible} {...rest} side={side}>\n                    {dismissible && <TopRightXIcon data-testid=\"close-icon\" onClick={handleClose} />}\n                    {renderChildren()}\n                </CenteredCard>\n            ) : (\n                <SideCard visible={visible} {...rest} side={side}>\n                    {dismissible && <TopRightXIcon data-testid=\"close-icon\" onClick={handleClose} />}\n                    {renderChildren()}\n                </SideCard>\n            )}\n            <PreventBackgroundScroll />\n        </DismissContext.Provider>\n    );\n};\n\nexport { Offcanvas, OffcanvasProps, useOffcanvasDismiss };\n"],"names":[],"sourceRoot":""}