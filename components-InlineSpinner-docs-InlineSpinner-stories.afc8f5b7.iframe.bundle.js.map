{"version":3,"file":"components-InlineSpinner-docs-InlineSpinner-stories.afc8f5b7.iframe.bundle.js","mappings":";;;;AA0CA;;;;;;AAMA;;;AAGA;;AAEA;AAGA","sources":["webpack://@freenow/wave/./src/components/InlineSpinner/InlineSpinner.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport styled, { keyframes } from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant } from 'styled-system';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { ReadCssColorVariable } from '../../essentials/Colors/types';\n\ninterface InlineSpinnerProps extends MarginProps {\n    /**\n     * Override the color of the spinner\n     */\n    // the below is the hack to keep autocomplete showing semantic variables but allowing any string as well\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    color?: ReadCssColorVariable | (string & {});\n    /**\n     * Set the size of the component\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            width: '1rem',\n            height: '1rem',\n            borderWidth: '0.1rem'\n        },\n        medium: {\n            width: '1.25rem',\n            height: '1.25rem',\n            borderWidth: '0.125rem'\n        }\n    }\n});\n\nconst rotation = keyframes`\n    to {\n        transform: rotate(360deg);\n    }\n`;\n\nconst InlineSpinnerIcon = styled.span<InlineSpinnerProps>`\n    display: inline-block;\n    box-sizing: border-box;\n    width: 1.25rem;\n    height: 1.25rem;\n    vertical-align: text-bottom;\n    border: 0.125rem solid ${p => p.color};\n    border-right-color: transparent;\n    border-radius: 50%;\n    animation: ${rotation} 750ms linear infinite;\n\n    ${compose(margin, sizeVariant)}\n`;\n\nconst InlineSpinner: React.FC<InlineSpinnerProps> = ({\n    color = getSemanticValue('foreground-primary'),\n    size = 'medium',\n    ...rest\n}: InlineSpinnerProps) => (\n    <span role=\"progressbar\">\n        <InlineSpinnerIcon color={color} size={size} {...rest} />\n    </span>\n);\n\nexport { InlineSpinner, InlineSpinnerProps };\n"],"names":[],"sourceRoot":""}