{"version":3,"file":"components-experimental-Label-docs-Label-stories.3fed6919.iframe.bundle.js","mappings":";;;AAqCA;AACA;;;AAGA;;AAEA;AAGA;ACPA;AACA;;AAEA;AACA;AACA;;AAGA;;;;ACuBA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/Label/Label.tsx","webpack://@freenow/wave/","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { variant } from 'styled-system';\nimport React, { ComponentPropsWithoutRef, ReactElement } from 'react';\nimport { textStyles } from '../Text/Text';\nimport { getSemanticValue } from '../../../essentials/experimental/cssVariables';\nimport { get } from '../../../utils/experimental/themeGet';\n\ntype LabelType = 'default' | 'positive' | 'negative';\n\ninterface LabelProps extends ComponentPropsWithoutRef<'span'> {\n    /**\n     * Set the appropriate colors for the component with 'default' as a default\n     */\n    type?: LabelType;\n}\n\nconst variantStyles = variant({\n    prop: '$type',\n    variants: {\n        default: {\n            color: getSemanticValue('on-surface'),\n            backgroundColor: getSemanticValue('surface-variant')\n        },\n        positive: {\n            color: getSemanticValue('on-positive-container'),\n            backgroundColor: getSemanticValue('positive-container')\n        },\n        negative: {\n            color: getSemanticValue('on-negative-container'),\n            backgroundColor: getSemanticValue('negative-container')\n        }\n    }\n});\n\nconst StyledLabel = styled.span<{ $type: LabelType }>`\n    display: inline-flex;\n    box-sizing: border-box;\n    border-radius: ${get('radii.2')};\n    padding: ${get('space.1')} ${get('space.2')};\n    white-space: nowrap;\n\n    ${textStyles.variants.label2};\n\n    ${props => variantStyles(props)}\n`;\n\nfunction Label({ children, type = 'default', ...restProps }: LabelProps): ReactElement {\n    return (\n        <StyledLabel $type={type} {...restProps}>\n            {children}\n        </StyledLabel>\n    );\n}\n\nexport { Label, LabelProps };\n",null,"import { Text as BaseText, TextProps as BaseTextProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../../essentials/experimental';\n\nexport type TextVariant = 'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2';\n\ninterface TextProps extends BaseTextProps {\n    variant?: ResponsiveValue<TextVariant>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst Text = styled(BaseText)<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(variant(textStyles))}\n`;\n\nText.defaultProps = {\n    variant: 'body1'\n};\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}