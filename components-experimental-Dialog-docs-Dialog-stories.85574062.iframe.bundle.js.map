{"version":3,"file":"components-experimental-Dialog-docs-Dialog-stories.85574062.iframe.bundle.js","mappings":";;AAOA;AACA;;;;;;;;;;;;;;;AAiBA;;AAMA;;;;;;AClBA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;ACJA;;;;;;AAQA;;;;;AAOA;;;AAKA;;AAEA;AAGA;AACA;AAYA;ACzCA;;AAUA;;;;;AC0DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;AAEA;AAGA;;;;AAIA;AACA;;AAEA;AACA;;AAIA;;;;;;;;;AAWA;;;;ACzHA;;;;;AAQA;ACPA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;;;;;;;;AAQA;;;;;;;;;;;;AAYA;;;;;;;;AAQA;;;;AAIA;;;;;;;;;AASA;AACA;;;;;AAKA;;;;;AAKA;AACA;;;;;;;;;;AAUA;;;;;AAKA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;;;;;;AASA;AACA;;;;AAIA;;;;;;AAMA;;;;;;AAMA;AACA;;;;;AAKA;AACA;;AAIA;;;;AC/GA;;;;;AAKA;AAGA;;;;AAIA;AAGA;;;;ACcA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/Modal/Modal.tsx","webpack://@freenow/wave/./src/components/experimental/Backdrop/Backdrop.tsx","webpack://@freenow/wave/./src/components/experimental/Dialog/Dialog.tsx","webpack://@freenow/wave/","webpack://@freenow/wave/./src/components/experimental/Button/Button.tsx","webpack://@freenow/wave/./src/components/experimental/Checkbox/components/LabelWrapper.tsx","webpack://@freenow/wave/./src/components/experimental/Checkbox/Checkbox.tsx","webpack://@freenow/wave/./src/components/experimental/InlineSpinner/InlineSpinner.tsx","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Dialog, DialogProps, Modal as BaseModal } from 'react-aria-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\nconst ModalCard = styled(BaseModal)`\n    border-radius: 1.5rem;\n    background: ${getSemanticValue('surface')};\n    color: ${getSemanticValue('on-surface')};\n    outline: none;\n\n    &[data-entering] {\n        animation: modal-zoom 300ms cubic-bezier(0.175, 0.885, 0.32, 1.275);\n    }\n\n    @keyframes modal-zoom {\n        from {\n            transform: scale(0.8);\n        }\n        to {\n            transform: scale(1);\n        }\n    }\n`;\n\nconst StyledDialog = styled(Dialog)`\n    outline: none;\n`;\n\ntype ModalProps = Pick<DialogProps, 'children' | 'role'>;\n\nconst Modal = React.forwardRef<HTMLDivElement, ModalProps>((props, ref) => (\n    <ModalCard ref={ref}>\n        <StyledDialog {...props} />\n    </ModalCard>\n));\n\nexport { Modal, ModalProps };\n","import styled from 'styled-components';\nimport { ModalOverlayProps, ModalOverlay } from 'react-aria-components';\nimport { getSemanticHslValue } from '../../../essentials/experimental';\nimport { Elevation } from '../../../essentials';\n\ntype BackdropProps = ModalOverlayProps;\n\nconst Backdrop = styled(ModalOverlay)`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: var(--visual-viewport-height);\n    background: hsla(${getSemanticHslValue('on-surface')}, 60%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: ${Elevation.DIMMING};\n\n    &[data-entering] {\n        animation: backdrop-fade 200ms;\n    }\n\n    &[data-exiting] {\n        animation: backdrop-fade 150ms reverse ease-in;\n    }\n\n    @keyframes backdrop-fade {\n        from {\n            opacity: 0;\n        }\n        to {\n            opacity: 1;\n        }\n    }\n`;\n\nexport { Backdrop, BackdropProps };\n","import React, { ReactElement, ReactNode } from 'react';\nimport { Heading } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { Text, textStyles } from '../Text/Text';\nimport { Modal } from '../Modal/Modal';\nimport { Backdrop, BackdropProps } from '../Backdrop/Backdrop';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\nconst Card = styled.div`\n    display: grid;\n    gap: 0.5rem;\n`;\n\nconst ButtonsWrapper = styled.div`\n    padding-top: 1.5rem;\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n    gap: 1rem;\n`;\n\nconst BodyWrapper = styled.div`\n    padding-top: 1rem;\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n`;\n\nconst StyledModal = styled(Modal)`\n    padding: 2rem;\n    width: 30rem;\n`;\n\nconst HeadlineText = styled(Heading)`\n    margin: 0;\n    ${textStyles.variants.headline}\n`;\n\nconst SubtitleText = styled(Text)`\n    color: ${getSemanticValue('on-surface-variant')};\n`;\n\ninterface DialogProps extends Omit<BackdropProps, 'isDismissable' | 'isKeyboardDismissDisabled'> {\n    role?: 'dialog' | 'alertdialog';\n    headline: ReactNode;\n    subtitle: ReactNode;\n    dismissButton?: ReactNode;\n    actionButton: ReactNode;\n    body?: ReactNode;\n}\n\nconst Dialog = ({\n    role = 'dialog',\n    headline,\n    subtitle,\n    dismissButton,\n    actionButton,\n    body,\n    ...props\n}: DialogProps): ReactElement => (\n    <Backdrop {...props} isDismissable={false} isKeyboardDismissDisabled>\n        <StyledModal role={role}>\n            <Card>\n                <HeadlineText slot=\"title\">{headline}</HeadlineText>\n\n                <SubtitleText as=\"p\" variant=\"body1\">\n                    {subtitle}\n                </SubtitleText>\n\n                {body && <BodyWrapper>{body}</BodyWrapper>}\n\n                <ButtonsWrapper>\n                    {dismissButton}\n                    {actionButton}\n                </ButtonsWrapper>\n            </Card>\n        </StyledModal>\n    </Backdrop>\n);\n\nexport { Dialog, DialogProps };\n",null,"import React, { ReactElement, ReactNode } from 'react';\nimport styled from 'styled-components';\nimport { variant } from 'styled-system';\nimport { Button as BaseButton, ButtonProps as BaseButtonProps, ButtonRenderProps } from 'react-aria-components';\nimport { getSemanticValue } from '../../../essentials/experimental/cssVariables';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { textStyles } from '../Text/Text';\nimport { InlineSpinner } from '../InlineSpinner/InlineSpinner';\n\ntype Emphasis = 'primary' | 'secondary' | 'textButton';\n\ninterface ButtonProps extends BaseButtonProps {\n    /**\n     * Define style of the button component, defaults to primary\n     */\n    emphasis?: Emphasis;\n    /**\n     * Loading state, defaults to false\n     */\n    isLoading?: boolean;\n}\n\nconst emphasisStyles = variant<Record<string, unknown>, Emphasis>({\n    prop: '$emphasis',\n    variants: {\n        primary: {\n            color: getSemanticValue('on-accent'),\n            background: getSemanticValue('accent'),\n\n            '&::before': {\n                background: getSemanticValue('on-accent')\n            },\n\n            '&[data-disabled]::before': {\n                opacity: 0.38\n            }\n        },\n        secondary: {\n            color: getSemanticValue('on-surface'),\n            background: getSemanticValue('surface-variant'),\n\n            '&::before': {\n                background: getSemanticValue('on-surface')\n            },\n\n            '&[data-disabled]': {\n                opacity: 0.38\n            },\n\n            '&[data-disabled]::before': {\n                opacity: 0.06\n            }\n        },\n        textButton: {\n            color: getSemanticValue('on-surface'),\n            background: 'transparent',\n\n            '&::before': {\n                background: getSemanticValue('interactive')\n            },\n\n            '&[data-disabled]': {\n                opacity: 0.38\n            },\n\n            '&[data-disabled]::before': {\n                opacity: 0.06,\n                background: 'transparent'\n            }\n        }\n    }\n});\n\nconst ButtonStyled = styled(BaseButton)<{ $emphasis: Emphasis }>`\n    position: relative;\n\n    border: none;\n    outline: none;\n    border-radius: ${get('radii.4')};\n    padding: 0;\n\n    cursor: pointer;\n\n    &[data-disabled],\n    &[data-pending] {\n        cursor: not-allowed;\n    }\n\n    &::before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n        bottom: 0;\n        content: '';\n        border-radius: inherit;\n        opacity: 0;\n        transition: opacity ease 200ms;\n    }\n\n    &[data-hovered]::before {\n        opacity: 0.16;\n    }\n\n    &[data-focused]::before,\n    &[data-pressed]::before {\n        opacity: 0.24;\n    }\n\n    &[data-pending] {\n        opacity: 0.38;\n    }\n\n    ${textStyles.variants.label1}\n\n    ${emphasisStyles};\n`;\n\nconst ChildrenContainer = styled.span<{ $isLoading: boolean }>`\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: ${get('space.2')};\n    padding: ${get('space.4')} ${get('space.6')};\n\n    opacity: ${({ $isLoading }) => ($isLoading ? 0 : 1)};\n    visibility: ${({ $isLoading }) => ($isLoading ? 'hidden' : 'visible')};\n    transition: opacity ease 200ms;\n`;\n\nconst SpinnerContainer = styled.span`\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    pointer-events: none;\n`;\n\nconst spinnerColor: Record<Emphasis, string> = {\n    primary: getSemanticValue('on-accent'),\n    secondary: getSemanticValue('on-surface'),\n    textButton: getSemanticValue('on-surface')\n};\n\nfunction Button({ children, emphasis = 'primary', isLoading = false, ...restProps }: ButtonProps): ReactElement {\n    const renderContent = (props: ButtonRenderProps & { defaultChildren: ReactNode }) => (\n        <>\n            <ChildrenContainer $isLoading={isLoading}>\n                {typeof children === 'function' ? children(props) : children}\n            </ChildrenContainer>\n            {isLoading && (\n                <SpinnerContainer>\n                    <InlineSpinner data-testid=\"button-spinner\" color={spinnerColor[emphasis]} size=\"medium\" />\n                </SpinnerContainer>\n            )}\n        </>\n    );\n\n    return (\n        <ButtonStyled data-testid=\"button-container\" isPending={isLoading} $emphasis={emphasis} {...restProps}>\n            {renderContent}\n        </ButtonStyled>\n    );\n}\n\nexport { Button };\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useHover } from '@react-aria/interactions';\nimport { mergeProps } from '@react-aria/utils';\n\nimport { getSemanticValue, theme } from '../../../../essentials/experimental';\n\ninterface LabelWrapperProps {\n    isDisabled?: boolean;\n    isInvalid?: boolean;\n}\n\ninterface StyledLabelProps extends LabelWrapperProps {\n    isHovered?: boolean;\n}\n\nconst StyledLabel = styled.label.attrs({ theme })<StyledLabelProps>`\n    display: inline-flex;\n    position: relative;\n    user-select: none;\n    color: ${props =>\n        getSemanticValue(props.isDisabled ? 'outline-variant' : props.isInvalid ? 'negative-variant' : 'on-surface')};\n    line-height: 1;\n    gap: 0.5rem;\n    padding: 3px 2px;\n    align-items: center;\n`;\n\nfunction LabelWrapper(props: LabelWrapperProps & React.LabelHTMLAttributes<HTMLLabelElement>): JSX.Element {\n    const { isDisabled = false, isInvalid = false, ...otherProps } = props;\n\n    const { hoverProps, isHovered } = useHover({ isDisabled });\n\n    return (\n        <StyledLabel\n            isDisabled={isDisabled}\n            isInvalid={isInvalid}\n            isHovered={isHovered}\n            {...mergeProps(hoverProps, otherProps)}\n        />\n    );\n}\n\nexport { LabelWrapper };\n","import React, { FC, ReactNode } from 'react';\nimport { Checkbox as CheckboxComponent, CheckboxProps as ReactAriaCheckboxProps } from 'react-aria-components';\nimport styled from 'styled-components';\n\nimport { Text, TextVariant } from '../Text/Text';\nimport { LabelWrapper } from './components/LabelWrapper';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { themeGet } from '../../../utils/experimental';\n\ninterface CheckboxProps extends Omit<ReactAriaCheckboxProps, 'children'> {\n    /**\n     * Provide a label for the input which will be shown next to the checkbox\n     */\n    label?: ReactNode;\n    /**\n     * Text variant for the label\n     */\n    variant?: TextVariant;\n}\n\nconst StyledCheckbox = styled(CheckboxComponent)`\n    --selected-color: ${getSemanticValue('accent')};\n    --selected-color-pressed: ${getSemanticValue('interactive')};\n    --checkmark-color: ${getSemanticValue('surface')};\n\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    forced-color-adjust: none;\n    cursor: pointer;\n\n    .checkbox {\n        width: ${themeGet('space.5')};\n        height: ${themeGet('space.5')};\n        border: 2px solid ${getSemanticValue('divider')};\n        border-radius: ${themeGet('radii.2')};\n        transition: all 200ms;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n\n        &:hover {\n            border-color: ${getSemanticValue('interactive')};\n        }\n    }\n\n    svg {\n        position: absolute;\n        width: 65%;\n        height: 62%;\n        top: 45%;\n        left: 53%;\n        transform: translate(-45%, -40%);\n        fill: none;\n        stroke: ${getSemanticValue('surface')};\n        stroke-width: 3px;\n        stroke-dasharray: 22px;\n        stroke-dashoffset: 66;\n        transition: all 200ms;\n    }\n\n    &[data-pressed] .checkbox {\n        border-color: ${getSemanticValue('surface-variant')};\n    }\n\n    &[data-focus-visible] .checkbox {\n        outline: 2px solid ${getSemanticValue('surface-variant')};\n        outline-offset: 2px;\n    }\n\n    &[data-disabled] {\n        color: transparent;\n        cursor: not-allowed;\n\n        .checkbox {\n            background-color: ${getSemanticValue('surface')};\n            border-color: ${getSemanticValue('surface-variant')};\n        }\n    }\n\n    &[data-invalid] .checkbox {\n        border-color: ${getSemanticValue('negative-variant')};\n    }\n\n    &[data-selected] .checkbox,\n    &[data-indeterminate] .checkbox {\n        border-color: ${getSemanticValue('accent')};\n        background: ${getSemanticValue('accent')};\n    }\n\n    &[data-selected] svg,\n    &[data-indeterminate] svg {\n        stroke-dashoffset: 44;\n    }\n\n    &[data-indeterminate] svg {\n        stroke: none;\n        fill: ${getSemanticValue('surface')};\n        left: 52%;\n    }\n\n    &[data-invalid] .checkbox:hover {\n        border-color: ${getSemanticValue('negative')};\n    }\n\n    &[data-selected] .checkbox:hover,\n    &[data-indeterminate] .checkbox:hover {\n        border-color: ${getSemanticValue('on-interactive-container')};\n        background: ${getSemanticValue('on-interactive-container')};\n    }\n\n    &[data-selected][data-pressed] .checkbox,\n    &[data-indeterminate][data-pressed] .checkbox {\n        border-color: ${getSemanticValue('interactive')};\n        background: ${getSemanticValue('interactive')};\n    }\n\n    &[data-selected][data-disabled],\n    &[data-indeterminate][data-disabled] {\n        color: transparent;\n        cursor: not-allowed;\n\n        .checkbox {\n            background-color: ${getSemanticValue('surface')};\n            border-color: ${getSemanticValue('surface-variant')};\n        }\n\n        svg {\n            stroke: ${getSemanticValue('outline-variant')};\n        }\n    }\n\n    &[data-indeterminate][data-disabled] svg {\n        stroke: none;\n        fill: ${getSemanticValue('outline-variant')};\n        left: 52%;\n    }\n\n    &[data-invalid][data-selected] .checkbox,\n    &[data-invalid][data-indeterminate] .checkbox {\n        background-color: ${getSemanticValue('negative-variant')};\n        border-color: ${getSemanticValue('negative-variant')};\n    }\n\n    &[data-invalid][data-selected] .checkbox:hover,\n    &[data-invalid][data-indeterminate] .checkbox:hover {\n        background-color: ${getSemanticValue('negative')};\n        border-color: ${getSemanticValue('negative')};\n    }\n`;\n\nconst Checkbox: FC<CheckboxProps> = props => {\n    const { isDisabled, isInvalid, isIndeterminate, label, variant = 'body1', ...rest } = props;\n\n    let dynamicLabel: ReactNode = label;\n    if (typeof label === 'string') {\n        dynamicLabel = (\n            <Text onClick={e => e.stopPropagation()} variant={variant}>\n                {label}\n            </Text>\n        );\n    }\n\n    return (\n        <LabelWrapper isDisabled={isDisabled} isInvalid={isInvalid}>\n            <StyledCheckbox isDisabled={isDisabled} isIndeterminate={isIndeterminate} isInvalid={isInvalid} {...rest}>\n                <div className=\"checkbox\">\n                    <svg viewBox=\"0 0 18 18\" aria-hidden=\"true\">\n                        {isIndeterminate ? (\n                            <rect x={1} y={7.5} width={15} height={3} rx={1.5} ry={1.5} />\n                        ) : (\n                            <polyline points=\"1 9 7 14 15 4\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                        )}\n                    </svg>\n                </div>\n            </StyledCheckbox>\n            {dynamicLabel}\n        </LabelWrapper>\n    );\n};\n\nexport { Checkbox, CheckboxProps };\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { compose, variant } from 'styled-system';\nimport SpinnerIcon from '../../../icons/experimental/SpinnerIcon';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\ninterface InlineSpinnerProps {\n    /**\n     * Override the color of the spinner\n     */\n    color?: string;\n    /**\n     * Set the size of the component\n     */\n    size?: 'small' | 'medium' | 'large';\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            width: '1rem',\n            height: '1rem'\n        },\n        medium: {\n            width: '1.25rem',\n            height: '1.25rem'\n        },\n        large: {\n            width: '2.5rem',\n            height: '2.5rem'\n        }\n    }\n});\n\nconst rotation = keyframes`\n    to {\n        transform: rotate(360deg);\n    }\n`;\n\nconst Wrapper = styled.span<InlineSpinnerProps>`\n    display: inline-flex;\n    box-sizing: border-box;\n    vertical-align: text-bottom;\n\n    ${compose(sizeVariant)}\n`;\n\nconst Icon = styled(SpinnerIcon)`\n    width: 100%;\n    height: 100%;\n\n    animation: ${rotation} 750ms linear infinite;\n`;\n\nconst InlineSpinner: React.FC<InlineSpinnerProps> = ({\n    color = getSemanticValue('interactive'),\n    size = 'medium',\n    ...rest\n}: InlineSpinnerProps) => (\n    <Wrapper aria-busy=\"true\" size={size}>\n        <Icon color={color} {...rest} />\n    </Wrapper>\n);\n\nexport { InlineSpinner, InlineSpinnerProps };\n","import { Text as BaseText, TextProps as BaseTextProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../../essentials/experimental';\n\nexport type TextVariant = 'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2';\n\ninterface TextProps extends BaseTextProps {\n    variant?: ResponsiveValue<TextVariant>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst Text = styled(BaseText)<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(variant(textStyles))}\n`;\n\nText.defaultProps = {\n    variant: 'body1'\n};\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}