{"version":3,"file":"components-FilePicker-docs-FilePicker-stories.2558cff5.iframe.bundle.js","mappings":";;;AAoCA;;;;AAIA;AACA;;;;;;;;;;;;;AAaA;;;;ACkBA;AAGA;ACtBA;;;;;;;AASA;AAUA;;;;;;AAMA;;;;AAIA;;;;AAMA;;;;;AAKA;AAGA;AACA;;;AAGA;AAGA;;AAEA;AACA;;AAEA;AACA;;;;;AAOA;;;;;;;;;AASA;AACA;AACA;;AAIA;ACvFA;AAoBA;AACA;;;;AAIA","sources":["webpack://@freenow/wave/./src/components/Button/BaseButton.tsx","webpack://@freenow/wave/./src/components/Button/Button.tsx","webpack://@freenow/wave/./src/components/FilePicker/FilePicker.tsx","webpack://@freenow/wave/./src/components/Text/Text.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, ResponsiveValue, variant, width, WidthProps } from 'styled-system';\n\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\n\ninterface BaseButtonProps extends ComponentPropsWithoutRef<'button'>, MarginProps, WidthProps {\n    /**\n     * Adjusts the size of the button\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst sizeVariant = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            minWidth: '5rem',\n            padding: '0 0.75rem'\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            minWidth: '6.25rem',\n            padding: '0 1rem'\n        }\n    }\n});\n\n// \"svg path\" fill set to \"inherit\" to being able to transition using button variants\nconst BaseButton = styled.button.attrs({ theme })<BaseButtonProps>`\n    align-items: center;\n    background: transparent;\n    border-radius: ${get('radii.2')};\n    border: 0.0625rem solid transparent;\n    cursor: pointer;\n    display: inline-flex;\n    font-family: ${get('fonts.normal')};\n    font-weight: ${get('fontWeights.semibold')};\n    justify-content: center;\n    text-align: center;\n    text-decoration: none;\n\n    &:disabled {\n        cursor: not-allowed;\n    }\n\n    svg path {\n        fill: inherit;\n    }\n\n    ${compose(margin, sizeVariant, width)}\n`;\n\nexport { BaseButton, BaseButtonProps };\n","import styled from 'styled-components';\nimport { ButtonStyleProps, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../essentials/theme';\n\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { BaseButton, BaseButtonProps } from './BaseButton';\nimport { ComponentSemanticTokens } from '../../essentials/Colors/types';\n\ntype Variant = 'primary' | 'secondary' | 'danger';\n\ninterface ButtonProps extends BaseButtonProps, ButtonStyleProps {\n    /**\n     * Define style of the button component, defaults to primary\n     */\n    variant?: ResponsiveValue<Variant>;\n}\n\nconst variantStyles = variant<ComponentSemanticTokens, Variant>({\n    variants: {\n        primary: {\n            color: getSemanticValue('foreground-on-background-primary'),\n            fill: getSemanticValue('foreground-on-background-primary'),\n            background: getSemanticValue('background-element-primary-default'),\n\n            '&:hover': {\n                color: getSemanticValue('foreground-on-background-accent'),\n                background: getSemanticValue('background-element-primary-emphasized')\n            },\n\n            '&:disabled': {\n                color: getSemanticValue('foreground-on-background-disabled'),\n                background: getSemanticValue('background-element-disabled-default')\n            }\n        },\n        secondary: {\n            color: getSemanticValue('foreground-primary'),\n            fill: getSemanticValue('foreground-primary'),\n            background: getSemanticValue('background-page-default'),\n            borderColor: getSemanticValue('border-neutral-default'),\n\n            '&:hover': {\n                color: getSemanticValue('foreground-on-background-neutral'),\n                background: getSemanticValue('background-element-neutral-emphasized')\n            },\n\n            '&:disabled': {\n                color: getSemanticValue('foreground-disabled'),\n                fill: getSemanticValue('foreground-disabled'),\n                background: getSemanticValue('transparent'),\n                borderColor: getSemanticValue('border-disabled')\n            }\n        },\n        danger: {\n            color: getSemanticValue('foreground-on-background-danger'),\n            fill: getSemanticValue('foreground-on-background-danger'),\n            background: getSemanticValue('background-element-danger-default'),\n\n            '&:hover': {\n                background: getSemanticValue('background-element-danger-emphasized')\n            },\n\n            '&:disabled': {\n                background: getSemanticValue('background-element-disabled-default'),\n                borderColor: getSemanticValue('border-disabled')\n            }\n        }\n    }\n});\n\nconst Button = styled(BaseButton).attrs({ theme })<ButtonProps>`\n    transition: background ease 200ms, border-color ease 200ms, color ease 200ms, fill ease 200ms;\n\n    ${variantStyles};\n`;\n\nButton.defaultProps = {\n    size: 'medium',\n    variant: 'primary'\n};\n\nexport { Button, ButtonProps };\n","import React, { ComponentPropsWithoutRef, FC, MouseEventHandler, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MarginProps } from 'styled-system';\nimport { MediaQueries } from '../../essentials';\nimport { CheckCircleIcon, UploadIcon } from '../../icons';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Button } from '../Button/Button';\nimport { Text } from '../Text/Text';\nimport { shrinkFileName } from './utils/format';\n\ninterface FilePickerProps extends MarginProps, ComponentPropsWithoutRef<'input'> {\n    /**\n     * Sets the name property of input element in the DOM.\n     * https://developer.mozilla.org/en-US/docs/Web/API/Element/name\n     */\n    name: string;\n    /**\n     * One or more unique file type identifiers describing\n     * files types to allow.\n     * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file\n     */\n    accept?: string;\n    /**\n     * What source to use for capturing image or video data.\n     * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file\n     */\n    capture?: boolean | 'user' | 'environment';\n    /**\n     * Text to provide a clear description of what the user should upload\n     */\n    label: string;\n    /**\n     * Text to display within component button, it describes the main action,\n     * it works better when short\n     */\n    buttonText: string;\n    /**\n     * Keep the action button displayed instead of showing the success state.\n     */\n    alwaysShowActionButton?: boolean;\n    /**\n     * Whether the component should render an error state\n     */\n    error?: boolean;\n    /**\n     * Callback to be used when the input receives a new file\n     */\n    onFileChange?: (file: File, event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst InputButton = styled(Button)`\n    font-size: ${get('fontSizes.1')};\n    line-height: 1;\n    font-weight: 400;\n    height: auto;\n    min-width: auto;\n    padding: 0.5rem 0.75rem;\n    white-space: nowrap;\n`;\n\nconst ICON_FILE_FEEDBACK_COLOR = getSemanticValue('foreground-success-default');\n\ninterface OutlinerProps extends BoxProps {\n    disabled: boolean;\n    error: boolean;\n    hasValidFile: boolean;\n}\n\n// NOTE: we want to affect the color of only one icon SVG and not the ICON_FILE_FEEDBACK_COLOR\nconst Outliner = styled(Box)<OutlinerProps>`\n    border: 0.0625rem solid ${getSemanticValue('border-neutral-default')};\n    box-sizing: border-box;\n    cursor: pointer;\n    position: relative;\n    transition: background-color ease 200ms, border-color ease 200ms;\n\n    ${Text} {\n        cursor: pointer;\n    }\n\n    ${({ disabled }) =>\n        disabled &&\n        css`\n            opacity: 0.5;\n\n            &,\n            ${InputButton}, ${Text} {\n                cursor: not-allowed;\n            }\n        `}\n\n    ${({ error }) =>\n        error &&\n        css`\n            box-shadow: inset 0 0 0 0.0625rem ${getSemanticValue('border-danger-default')};\n            border-color: ${getSemanticValue('transparent')};\n        `}\n\n    ${({ hasValidFile }) =>\n        hasValidFile &&\n        css`\n            ${MediaQueries.medium} {\n                &:hover {\n                    background-color: ${getSemanticValue('background-element-info-default')};\n                    border-color: ${getSemanticValue('transparent')};\n\n                    svg:not([color='${ICON_FILE_FEEDBACK_COLOR}']) path {\n                        fill: ${getSemanticValue('foreground-accent-default')};\n                    }\n                }\n            }\n        `}\n`;\n\nconst Input = styled.input`\n    height: 100%;\n    left: 0;\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    width: 100%;\n    outline: none;\n\n    &:focus + ${Outliner} {\n        border-color: ${getSemanticValue('border-focus')};\n        box-shadow: inset 0 0 0 0.0625rem ${getSemanticValue('border-focus')};\n    }\n`;\n\nconst FilePicker: FC<FilePickerProps> = ({\n    name,\n    accept = '*',\n    capture,\n    label,\n    buttonText,\n    error = false,\n    onFileChange = () => undefined,\n    onChange = () => undefined,\n    disabled = false,\n    alwaysShowActionButton = false,\n    ...nonInputProps\n}: FilePickerProps) => {\n    const inputEl = useRef<HTMLInputElement>(null);\n    const [file, setFile] = useState<File | null>();\n    const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const eventFile = e.target.files?.[0];\n\n        onChange(e);\n        onFileChange(eventFile, e);\n        setFile(eventFile);\n    };\n    const onClickHandler: MouseEventHandler = e => {\n        // Avoid label trigger file selection twice\n        e.preventDefault();\n        // Avoid button trigger file selection twice\n        e.stopPropagation();\n        // Allow other spaces of the component trigger file selection\n        inputEl.current.click();\n    };\n    const validFileSelected = file && !error;\n\n    return (\n        <Box position=\"relative\" {...nonInputProps}>\n            <Input\n                accept={accept}\n                capture={capture}\n                disabled={disabled}\n                id={name}\n                multiple={false}\n                name={name}\n                onChange={onInputChange}\n                ref={inputEl}\n                type=\"file\"\n            />\n            <Outliner\n                minHeight=\"5.125rem\"\n                alignItems=\"stretch\"\n                data-testid=\"filepicker-outliner\"\n                display=\"flex\"\n                disabled={disabled}\n                hasValidFile={validFileSelected}\n                error={error}\n                justifyContent=\"space-between\"\n                onClick={onClickHandler}\n                px={2}\n                py={validFileSelected ? '1.25rem' : 3}\n            >\n                <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" pr={2}>\n                    <Text as=\"label\" htmlFor={name} fontSize={1}>\n                        {label}\n                    </Text>\n                    <Text secondary fontSize={1}>\n                        {file && shrinkFileName(file)}\n                    </Text>\n                </Box>\n                <Box display={{ _: 'none', medium: 'flex' }} alignItems=\"center\" justifyContent=\"top\">\n                    {!alwaysShowActionButton && validFileSelected ? (\n                        <CheckCircleIcon color={ICON_FILE_FEEDBACK_COLOR} />\n                    ) : (\n                        <InputButton variant=\"secondary\" type=\"button\" tabIndex={-1} onClick={onClickHandler}>\n                            {buttonText}\n                        </InputButton>\n                    )}\n                </Box>\n                <Box display={{ _: 'flex', medium: 'none' }} alignItems=\"top\">\n                    {!alwaysShowActionButton && validFileSelected ? (\n                        <CheckCircleIcon color={ICON_FILE_FEEDBACK_COLOR} />\n                    ) : (\n                        <UploadIcon />\n                    )}\n                </Box>\n            </Outliner>\n        </Box>\n    );\n};\n\nexport { FilePicker, FilePickerProps };\n","import { ComponentPropsWithoutRef } from 'react';\nimport styled from 'styled-components';\nimport {\n    compose,\n    fontFamily,\n    FontFamilyProps,\n    fontSize,\n    FontSizeProps,\n    fontWeight,\n    margin,\n    MarginProps,\n    ResponsiveValue,\n    textAlign,\n    TextAlignProps\n} from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface TextProps\n    extends ComponentPropsWithoutRef<'span'>,\n        MarginProps,\n        FontSizeProps,\n        FontFamilyProps,\n        TextAlignProps {\n    /**\n     * The font-weight property specifies the weight (or boldness) of the font.\n     * @default normal\n     */\n    fontWeight?: ResponsiveValue<'normal' | 'semibold' | 'bold'>;\n    /**\n     * Enforce primary color\n     */\n    primary?: boolean;\n    /**\n     * Adjust color to indicate secondary information\n     */\n    secondary?: boolean;\n    /**\n     * Adjust color to display a disabled text element\n     */\n    disabled?: boolean;\n}\n\nfunction determineTextColor(props: TextProps) {\n    const { primary, secondary, disabled } = props;\n\n    if (disabled) {\n        return getSemanticValue('foreground-disabled');\n    }\n\n    if (secondary) {\n        return getSemanticValue('foreground-neutral-emphasized');\n    }\n\n    if (primary) {\n        return getSemanticValue('foreground-primary');\n    }\n\n    return 'inherit';\n}\n\nconst Text = styled.span.attrs({ theme })<TextProps>`\n    color: ${determineTextColor};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    line-height: 1.4;\n    margin: 0;\n\n    ${compose(margin, fontSize, fontWeight, fontFamily, textAlign)}\n`;\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}