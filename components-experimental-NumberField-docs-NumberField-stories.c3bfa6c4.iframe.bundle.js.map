{"version":3,"file":"components-experimental-NumberField-docs-NumberField-stories.c3bfa6c4.iframe.bundle.js","mappings":";;;;;;;;;;;AAgBA;AACA;;;ACVA;;;AAGA;AACA;AACA;;AAIA;;;;AAIA;AACA;;;AAGA;AACA;;AAEA;;;AAGA;;;AAGA;;AAEA;;;;AAIA;AACA;;;;AAIA;;;;AAIA;;;;;;;;;;;;;;AAcA;;;;;;ACnDA;;;;;;;;;AASA;AACA;;AAEA;;;AAGA;;AAIA;AACA;;;;;;;AASA;AACA;;;;AAMA;;AAEA;;AC3CA;;AAEA;;AAEA;;;;;;;AAOA;;;;;;;;;ACRA;;;;;;;;ACIA;;;;;;;;;;;;;;;;AAgBA;;;AAGA;;;AC5BA;;;;;;ACuBA;;;AAGA;;;AAGA;;;;;;;;;;;;;;;;;;;;AAsBA;;;;ACeA;AAGA","sources":["webpack://@freenow/wave/./src/components/experimental/Field/Button.ts","webpack://@freenow/wave/./src/components/experimental/Field/FakeInput.ts","webpack://@freenow/wave/./src/components/experimental/Field/Field.ts","webpack://@freenow/wave/./src/components/experimental/Field/Footer.ts","webpack://@freenow/wave/./src/components/experimental/Field/InnerWrapper.ts","webpack://@freenow/wave/./src/components/experimental/Field/Label.ts","webpack://@freenow/wave/./src/components/experimental/Field/Wrapper.ts","webpack://@freenow/wave/./src/components/experimental/NumberField/NumberField.tsx","webpack://@freenow/wave/./src/components/experimental/Text/Text.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Button as BaseButton } from 'react-aria-components';\nimport { getSemanticValue } from '../../../essentials/experimental/cssVariables';\nimport { get } from '../../../utils/experimental/themeGet';\n\nexport const Button = styled(BaseButton)`\n    appearance: none;\n    background: none;\n    border: none;\n    display: flex;\n    margin: 0;\n    padding: 0;\n    cursor: pointer;\n    outline: 0;\n\n    &[data-focused] {\n        outline: ${getSemanticValue('interactive')} solid 0.125rem;\n        border-radius: ${get('radii.2')};\n    }\n`;\n","import styled, { css } from 'styled-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { flyingLabelStyles, Label } from './Label';\nimport { InnerWrapper } from './InnerWrapper';\n\nconst focusStyles = css`\n    outline: ${getSemanticValue('interactive')} solid 0.125rem;\n    outline-offset: -0.125rem;\n\n    ${Label} {\n        color: ${getSemanticValue('interactive')};\n        ${flyingLabelStyles}\n    }\n`;\n\nexport const FakeInput = styled.div<{ $isVisuallyFocused: boolean }>`\n    box-sizing: border-box;\n    cursor: text;\n\n    color: ${getSemanticValue('on-surface-variant')};\n    background-color: ${getSemanticValue('surface')};\n    border-width: 0.0625rem;\n    border-style: solid;\n    border-color: ${getSemanticValue('outline-variant')};\n    border-radius: ${get('radii.4')};\n    min-height: 3.5rem;\n    padding: 0 ${get('space.3')} 0 ${get('space.4')};\n    display: flex;\n    align-items: center;\n    gap: ${get('space.3')};\n\n    /* stylelint-disable selector-type-case, selector-type-no-unknown */\n    & > :not(${InnerWrapper}) {\n        flex-shrink: 0;\n        color: ${getSemanticValue('on-surface-variant')};\n    }\n\n    &:hover {\n        border-color: ${getSemanticValue('outline')};\n        color: ${getSemanticValue('on-surface')};\n    }\n\n    &:focus-within {\n        ${focusStyles}\n    }\n\n    [data-invalid] & {\n        border-color: ${getSemanticValue('negative')};\n    }\n\n    [data-disabled] & {\n        opacity: 0.38;\n        pointer-events: none;\n    }\n\n    &:has(input[disabled]),\n    &:has([aria-disabled='true']) {\n        opacity: 0.38;\n        pointer-events: none;\n    }\n\n    ${props => props.$isVisuallyFocused && focusStyles}\n`;\n","import styled, { css } from 'styled-components';\nimport { DateInput as BaseDateInput, Input as BaseInput, TextArea as BaseTextArea } from 'react-aria-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\nexport const fieldTextStyles = css`\n    font-family: inherit;\n    font-size: var(--wave-exp-typescale-body-1-size);\n    font-weight: var(--wave-exp-typescale-body-1-weight);\n    line-height: var(--wave-exp-typescale-body-1-line-height);\n`;\n\nexport const fieldStyles = css`\n    border: none;\n    background-color: unset;\n    outline: none;\n\n    display: block;\n    width: 100%;\n    padding: 0;\n\n    caret-color: ${getSemanticValue('interactive')};\n    color: ${getSemanticValue('on-surface')};\n\n    ${fieldTextStyles}\n\n    [data-placeholder] {\n        color: ${getSemanticValue('on-surface-variant')};\n    }\n`;\n\nexport const Input = styled(BaseInput)`\n    ${fieldStyles}\n\n    &[type='search'] {\n        &::-webkit-search-cancel-button {\n            display: none;\n        }\n    }\n`;\n\nexport const TextArea = styled(BaseTextArea).attrs({ rows: 1 })`\n    ${fieldStyles};\n\n    resize: none;\n    min-height: var(--wave-exp-typescale-body-1-line-height);\n`;\n\nexport const DateInput = styled(BaseDateInput)`\n    display: flex;\n    ${fieldTextStyles}\n`;\n","import styled from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\nimport { getSemanticValue } from '../../../essentials/experimental';\nimport { textStyles } from '../Text/Text';\n\nexport const Footer = styled.footer`\n    padding: ${get('space.1')} ${get('space.3')} ${get('space.0')};\n\n    color: ${getSemanticValue('on-surface-variant')};\n\n    ${textStyles.variants.label2}\n\n    &:empty {\n        display: none;\n    }\n\n    [data-invalid] & {\n        color: ${getSemanticValue('negative')};\n    }\n`;\n","import styled from 'styled-components';\n\nexport const InnerWrapper = styled.div<{ hideLabel?: boolean }>`\n    position: relative;\n    overflow: hidden;\n\n    box-sizing: border-box;\n    width: 100%;\n\n    ${props =>\n        !props.hideLabel &&\n        `\n        padding-top: var(--wave-exp-typescale-label-2-line-height);\n    `}\n`;\n","import { Label as BaseLabel } from 'react-aria-components';\nimport styled, { css } from 'styled-components';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\nexport const flyingLabelStyles = css`\n    top: 0;\n    transform: none;\n\n    font-size: var(--wave-exp-typescale-label-2-size);\n    font-weight: var(--wave-exp-typescale-label-2-weight);\n    line-height: var(--wave-exp-typescale-label-2-line-height);\n`;\n\nexport const Label = styled(BaseLabel)<{ $flying?: boolean }>`\n    position: absolute;\n    top: 50%;\n    color: currentColor;\n\n    font-family: inherit;\n    font-size: var(--wave-exp-typescale-body-1-size);\n    font-weight: var(--wave-exp-typescale-body-1-weight);\n    line-height: var(--wave-exp-typescale-body-1-line-height);\n    white-space: nowrap;\n\n    transform: translateY(-50%);\n    transform-origin: 0;\n\n    transition: top 200ms ease, font-size 200ms ease, transform 200ms ease;\n\n    ${props => props.$flying && flyingLabelStyles}\n\n    [data-invalid] & {\n        color: ${getSemanticValue('negative')};\n    }\n`;\n","import styled from 'styled-components';\nimport { get } from '../../../utils/experimental/themeGet';\n\nexport const Wrapper = styled.div`\n    padding: ${get('space.2')} 0;\n`;\n","import React from 'react';\nimport {\n    NumberField as BaseNumberField,\n    NumberFieldProps as BaseNumberFieldProps,\n    FieldError,\n    Group\n} from 'react-aria-components';\nimport styled from 'styled-components';\nimport { Label } from '../Field/Label';\nimport { Footer } from '../Field/Footer';\nimport { FakeInput } from '../Field/FakeInput';\nimport { InnerWrapper } from '../Field/InnerWrapper';\nimport { Wrapper } from '../Field/Wrapper';\nimport { Input } from '../Field/Field';\nimport { FieldProps } from '../Field/Props';\nimport { Button } from '../Field/Button';\nimport DropupSelectIcon from '../../../icons/arrows/DropupSelectIcon';\nimport DropdownSelectIcon from '../../../icons/arrows/DropdownSelectIcon';\nimport { getSemanticValue } from '../../../essentials/experimental';\n\ntype NumberFieldProps = Omit<FieldProps, 'actionIcon' | 'leadingIcon'> & BaseNumberFieldProps;\n\nconst GroupControl = styled(Group)`\n    display: flex;\n    flex-direction: column;\n    height: 1.5rem;\n\n    ${Button} {\n        position: relative;\n        top: -50%;\n        color: ${getSemanticValue('on-surface-variant')};\n\n        &[data-hovered] {\n            color: ${getSemanticValue('interactive')};\n        }\n\n        &[data-disabled] {\n            opacity: 0.38;\n        }\n\n        svg {\n            position: relative;\n            pointer-events: none;\n        }\n\n        &:first-of-type svg {\n            top: 8px;\n        }\n\n        &:last-of-type svg {\n            bottom: 8px;\n        }\n    }\n`;\n\nconst NumberField = React.forwardRef<HTMLDivElement, NumberFieldProps>(\n    ({ label, description, errorMessage, isVisuallyFocused = false, ...props }, forwardedRef) => (\n        <Wrapper>\n            <BaseNumberField {...props} ref={forwardedRef}>\n                {({ isInvalid }) => (\n                    <>\n                        <FakeInput $isVisuallyFocused={isVisuallyFocused}>\n                            <InnerWrapper>\n                                {label && <Label $flying>{label}</Label>}\n                                <Input />\n                            </InnerWrapper>\n                            <GroupControl>\n                                <Button slot=\"increment\">\n                                    <DropupSelectIcon />\n                                </Button>\n                                <Button slot=\"decrement\">\n                                    <DropdownSelectIcon />\n                                </Button>\n                            </GroupControl>\n                        </FakeInput>\n                        <Footer>{isInvalid ? <FieldError>{errorMessage}</FieldError> : description}</Footer>\n                    </>\n                )}\n            </BaseNumberField>\n        </Wrapper>\n    )\n);\n\nexport { NumberField, NumberFieldProps };\n","import { Text as BaseText, TextProps as BaseTextProps } from 'react-aria-components';\nimport styled from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../../essentials/experimental';\n\nexport type TextVariant = 'display' | 'headline' | 'title1' | 'title2' | 'body1' | 'body2' | 'label1' | 'label2';\n\ninterface TextProps extends BaseTextProps {\n    variant?: ResponsiveValue<TextVariant>;\n}\n\nexport const textStyles = {\n    variants: {\n        display: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[4],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[4],\n            fontStretch: '50%'\n        },\n        headline: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[3],\n            fontWeight: theme.fontWeights.bold,\n            lineHeight: theme.lineHeights[3],\n            fontStretch: '50%'\n        },\n        title1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[2],\n            fontWeight: theme.fontWeights.semibold,\n            lineHeight: theme.lineHeights[2]\n        },\n        title2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        body1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[1]\n        },\n        body2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        },\n        label1: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[1],\n            fontWeight: theme.fontWeights.medium,\n            lineHeight: theme.lineHeights[1]\n        },\n        label2: {\n            fontFamily: 'inherit',\n            fontSize: theme.fontSizes[0],\n            fontWeight: theme.fontWeights.normal,\n            lineHeight: theme.lineHeights[0]\n        }\n    }\n};\n\nconst Text = styled(BaseText)<TextProps>`\n    color: inherit;\n    margin: 0;\n\n    ${compose(variant(textStyles))}\n`;\n\nText.defaultProps = {\n    variant: 'body1'\n};\n\nexport { Text, TextProps };\n"],"names":[],"sourceRoot":""}