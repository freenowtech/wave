{"version":3,"file":"components-Select-docs-Select-stories.0852e379.iframe.bundle.js","mappings":";;;;AAUA;AACA;AACA;AARA;ACAA;ACgEA;;AAEA;;AAEA;AACA;;;;AAIA;;AAIA;;;AAGA;;AAEA;AACA;AACA;AAhEA;;;;;;;;;;AA2EA;;;AAGA;AApDA;AAGA;AACA;;AAIA;AACA;;AAKA;AAiDA;;;AAGA;;;;;;;AAOA;;;;;;AAMA;AACA;;;;AAIA;;;;;;;;AC3GA;AAGA;;;;;;;;;AAWA","sources":["webpack://@freenow/wave/./src/components/Select/SelectLabel.ts","webpack://@freenow/wave/./src/components/Select/selectVariantSizes.ts","webpack://@freenow/wave/./src/components/Select/SelectInput.ts","webpack://@freenow/wave/./src/components/Select/Select.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { get } from '../../utils/themeGet';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\nconst ANIMATION_DURATION = 100;\n\nconst SelectLabel = styled.label`\n    position: absolute;\n    pointer-events: none;\n    line-height: 1;\n    font-weight: ${get('fontWeights.semibold')};\n    color: ${getSemanticValue('foreground-neutral-emphasized')};\n    background: ${getSemanticValue('background-page-default')};\n    transition: color ${ANIMATION_DURATION}ms ease-out, background ${ANIMATION_DURATION}ms ease-out;\n`;\n\nexport { SelectLabel };\n","import { variant } from 'styled-system';\nimport { get } from '../../utils/themeGet';\nimport { SelectLabel } from './SelectLabel';\n\nconst bottomLinedSizeVariants = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2.5rem',\n            padding: '0.625rem 1.25rem 0.125rem 0.125rem',\n            [`& ~ ${SelectLabel}`]: {\n                top: '0.125rem',\n                left: '0',\n                padding: '0 0.125rem',\n                fontSize: '0.625rem'\n            },\n            '& ~ .svg-icon': {\n                top: '0.625rem'\n            }\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3.5rem',\n            padding: '1.25rem 1.75rem 0.25rem 0.25rem',\n            [`& ~ ${SelectLabel}`]: {\n                top: '0.375rem',\n                left: '0',\n                padding: '0 0.25rem',\n                fontSize: get('fontSizes.0')\n            },\n            '& ~ .svg-icon': {\n                top: '1rem'\n            }\n        }\n    }\n});\n\nconst boxedSizeVariants = variant({\n    prop: 'size',\n    variants: {\n        small: {\n            fontSize: get('fontSizes.1'),\n            height: '2rem',\n            padding: '0 1.5rem 0 0.5rem',\n            [`& ~ ${SelectLabel}`]: {\n                top: '-0.3125rem',\n                left: '0.4375rem',\n                padding: '0 0.125rem',\n                fontSize: '0.625rem'\n            }\n        },\n        medium: {\n            fontSize: get('fontSizes.2'),\n            height: '3rem',\n            padding: '0 2.25rem 0 0.75rem',\n            [`& ~ ${SelectLabel}`]: {\n                top: '-0.3125rem',\n                left: '0.5625rem',\n                padding: '0 0.25rem',\n                fontSize: get('fontSizes.0')\n            }\n        }\n    }\n});\n\nexport { boxedSizeVariants, bottomLinedSizeVariants };\n","import { ComponentPropsWithoutRef, FC } from 'react';\nimport styled, { css } from 'styled-components';\nimport { compose, ResponsiveValue, variant } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { get } from '../../utils/themeGet';\nimport { SelectLabel } from './SelectLabel';\nimport { bottomLinedSizeVariants, boxedSizeVariants } from './selectVariantSizes';\nimport { getSemanticValue } from '../../utils/cssVariables';\n\ninterface BaseSelectProps extends Omit<ComponentPropsWithoutRef<'select'>, 'size'> {\n    /**\n     * Define the display variant with boxed as the default\n     */\n    variant?: ResponsiveValue<'boxed' | 'bottom-lined'>;\n    /**\n     * Indicate that the input contains an error\n     */\n    error?: boolean;\n    /**\n     * Set the size of the input with medium as the default\n     */\n    size?: ResponsiveValue<'small' | 'medium'>;\n}\n\nconst ANIMATION_DURATION = 100;\n\nconst inputVariants = variant({\n    variants: {\n        boxed: {\n            borderRadius: get('radii.2'),\n            border: `0.0625rem solid ${getSemanticValue('border-neutral-default')}`,\n            '&:active:not(:disabled), &:focus:not(:disabled)': {\n                borderColor: getSemanticValue('border-focus'),\n                boxShadow: `inset 0 0 0 0.0625rem ${getSemanticValue('border-focus')}`\n            }\n        },\n        'bottom-lined': {\n            border: 'none',\n            borderTopLeftRadius: get('radii.1'),\n            borderTopRightRadius: get('radii.1'),\n            borderBottom: `0.0625rem solid ${getSemanticValue('border-neutral-default')}`,\n\n            '&:active:not(:disabled), &:focus:not(:disabled)': {\n                borderColor: getSemanticValue('border-focus'),\n                boxShadow: `inset 0 -0.0625rem 0 0 ${getSemanticValue('border-focus')}`\n            }\n        }\n    }\n});\n\nconst getErrorStyles = ({ error, variant: variantProp }: BaseSelectProps) => {\n    if (error) {\n        return css`\n            border-color: ${getSemanticValue('border-danger-default')};\n            box-shadow: ${variantProp === 'boxed'\n                ? `inset 0 0 0 0.0625rem ${getSemanticValue('border-danger-default')}`\n                : `inset 0 -0.0625rem 0 0 ${getSemanticValue('border-danger-default')}`};\n\n            & ~ ${SelectLabel} {\n                color: ${getSemanticValue('foreground-danger-emphasized')};\n            }\n        `;\n    }\n\n    return undefined;\n};\n\nconst disabledStyles = css<BaseSelectProps>`\n    color: ${getSemanticValue('foreground-disabled')};\n    cursor: not-allowed;\n    border-color: ${getSemanticValue('border-disabled')};\n\n    & ~ ${SelectLabel} {\n        color: ${getSemanticValue('foreground-disabled')};\n    }\n\n    & ~ .svg-icon svg > * {\n        fill: ${getSemanticValue('foreground-disabled')};\n    }\n`;\n\nconst SelectInput: FC<BaseSelectProps> = styled.select.attrs({ theme })<BaseSelectProps>`\n    margin: 0;\n    box-sizing: border-box;\n    background: ${getSemanticValue('background-page-default')};\n    border-radius: 0;\n    color: ${getSemanticValue('foreground-primary')};\n    font-size: ${get('fontSizes.2')};\n    font-family: ${get('fonts.normal')};\n    transition: box-shadow ${ANIMATION_DURATION}ms, border ${ANIMATION_DURATION}ms;\n    outline: none;\n    appearance: none;\n    width: 100%;\n    padding-right: 2rem;\n    white-space: nowrap;\n    overflow-x: hidden;\n    text-overflow: ellipsis;\n\n    & ~ .svg-icon svg > * {\n        fill: ${getSemanticValue('foreground-neutral-emphasized')};\n    }\n\n    ${p => {\n        switch (p.variant) {\n            case 'boxed':\n                return compose(boxedSizeVariants, inputVariants)(p);\n            case 'bottom-lined':\n                return compose(bottomLinedSizeVariants, inputVariants)(p);\n            default:\n                return undefined;\n        }\n    }}\n    ${getErrorStyles}\n    ${p => (p.disabled ? disabledStyles : undefined)}\n    &:-moz-focusring {\n        outline: none;\n        text-shadow: 0 0 0 ${getSemanticValue('foreground-neutral-emphasized')};\n    }\n\n    &:-webkit-autofill,\n    &:-webkit-autofill:hover,\n    &:-webkit-autofill:focus,\n    &:-webkit-autofill:active {\n        -webkit-text-fill-color: ${getSemanticValue('foreground-neutral-emphasized')};\n        transition: background-color 99999999ms ease 99999999ms;\n    }\n\n    &:active:not(:disabled),\n    &:focus:not(:disabled) {\n        & ~ ${SelectLabel} {\n            color: ${getSemanticValue('foreground-neutral-emphasized')};\n        }\n\n        & ~ .svg-icon svg > * {\n            fill: ${getSemanticValue('foreground-neutral-emphasized')};\n        }\n    }\n`;\n\nexport { SelectInput, BaseSelectProps };\n","import React from 'react';\nimport styled from 'styled-components';\nimport { compose, margin, MarginProps, width, WidthProps } from 'styled-system';\nimport { theme } from '../../essentials/theme';\nimport { ChevronDownIcon } from '../../icons';\nimport { extractClassNameProps, extractWidthProps, extractWrapperMarginProps } from '../../utils/extractProps';\nimport { useGeneratedId } from '../../utils/hooks/useGeneratedId';\nimport { BaseSelectProps, SelectInput } from './SelectInput';\nimport { SelectLabel } from './SelectLabel';\n\ninterface SelectProps extends BaseSelectProps, WidthProps, MarginProps {\n    /**\n     * Set the label for the select input\n     */\n    label?: string;\n\n    /**\n     * Set a placeholder for the select component, allowing users to remove their selection\n     */\n    placeholder?: string;\n}\n\nconst SelectWrapper = styled.div.attrs({ theme })`\n    display: inline-block;\n    position: relative;\n    box-sizing: border-box;\n\n    ${compose(margin, width)}\n`;\n\nconst IconNode = styled.div`\n    bottom: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    position: absolute;\n    pointer-events: none;\n    right: 0.5rem;\n    top: 0;\n`;\n\nconst Select: React.FC<SelectProps> = ({ variant = 'boxed', size = 'medium', ...props }: SelectProps) => {\n    const { classNameProps, restProps: withoutClassName } = extractClassNameProps(props);\n    const { marginProps, restProps: withoutMargin } = extractWrapperMarginProps(withoutClassName);\n    const { widthProps, restProps } = extractWidthProps(withoutMargin);\n\n    const { label, children, placeholder, ...rest } = restProps;\n\n    const id = useGeneratedId(props.id);\n\n    return (\n        <SelectWrapper {...classNameProps} {...marginProps} {...widthProps}>\n            <SelectInput variant={variant} size={size} {...rest} id={id}>\n                {placeholder ? <option value=\"\">{placeholder}</option> : undefined}\n                {children}\n            </SelectInput>\n            <IconNode className=\"svg-icon\">\n                <ChevronDownIcon />\n            </IconNode>\n            {label && <SelectLabel htmlFor={id}>{label}</SelectLabel>}\n        </SelectWrapper>\n    );\n};\n\nexport { Select, SelectProps };\n"],"names":[],"sourceRoot":""}